{'updated': u'2014-11-27T14:57:55.459+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'announcements', 'updated_parsed': time.struct_time(tm_year=2014, tm_mon=11, tm_mday=27, tm_hour=13, tm_min=57, tm_sec=55, tm_wday=3, tm_yday=331, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2014, tm_mon=11, tm_mday=27, tm_hour=13, tm_min=57, tm_sec=0, tm_wday=3, tm_yday=331, tm_isdst=0), 'tags': [{'term': u'odyssey', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'r3', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'pred': u'announcements', 'title': u'Qubes R3/Odyssey initial source code release', 'links': [{'href': u'http://www.blogger.com/feeds/24586388/posts/default/2049939853263374613', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/2049939853263374613', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2014/11/qubes-r3odyssey-initial-source-code.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes R3/Odyssey initial source code release'}], 'summary': u'Back in 2013 we\'ve started the work on generalizing Qubes architecture, which we code-named \u201cOdyssey\u201d, to allow for use of multiple hypervisors instead of just Xen via Hypervisor Abstraction Layer (\u201cHAL\u201d -&gt; \u201cSpace Odyssey\u201d, get it? ;). The concept has been described in <a href="http://theinvisiblethings.blogspot.com/2013/03/introducing-qubes-odyssey-framework.html">this post</a>, which I recommend to re-read if you\'re more interested in understanding our goals.<br /><br />We have been wandering here and there since that time. Lots of work has been invested in the light-weight Qubes edition for Windows, which, sadly, turned out to be <a href="http://theinvisiblethings.blogspot.com/2014/01/shattering-myths-of-windows-security.html">a failure</a>.<br /><br />We have also done a lot of work in the meantime to polish Qubes R2 and bring it to the state of the <a href="http://theinvisiblethings.blogspot.com/2014/09/announcing-qubes-os-release-2.html">final release</a>, which happened earlier this fall.<br /><br />We have also been heavily researching possibilities of other cool projects based on this flexible new architecture. Some of which you might hear about in the coming months, others turned out to be dead ends.<br /><br />Today we\'re finally releasing the Qubes R3 source code to the public. The code builds fine (see <a href="https://wiki.qubes-os.org/wiki/QubesR3Building">here</a> for building instruction), produces install-able ISO, and, if that was not enough, even seems to be working, mostly fine, when installed :)<br /><br />However, we don\'t recommend users to switch to it, and we intend this release for developers only, specifically those who would like to start working towards porting of other hypervisors, or other containerization technologies, like LXC, to Qubes R3. I highly recommend these devlopers to discuss what they try to achieve on the <a href="https://wiki.qubes-os.org/wiki/QubesLists">qubes-devel</a> mailing list, before they start the actual coding.<br /><br />Currently the only implemented and supported backend is Xen, of course, specifically the Xen 4.4, currently the latest version. It should be now trivial to switch to future versions as they become available, although, a decision to rush with that might not be such a no-brainer from the security point of view. We should remember that the hypervisor, unlike Linux kernel, is not someting you would like to change every month or so. Ideally we should aim for having a stable version of Xen for desktops that would work for years without needing any updates.<br /><br />But use of other hypervisors might open up lots of interesting possibilities: imagine e.g. Qubes Live USB edition that has backends for 1) Xen, 2)  KVM, and 3) LXC, and choose automatically the most secure one which is still supported on the given laptop.<br /><br />Major features of the current release, compared to Qubes R2:<br /><ul><li>Hypervisor Abstraction Layer for all the core management stack (but still missing for the GUI daemon, see below)</li></ul><ul><li>New implementation of vchan and qrexec. As you might know our original vchan has been rewritten and improved (better performance and flexibility) and included in the upstream Xen starting from v4.2. Now we\'re switching to this upstream libvchan. Also, qrexec has been slightly rewritten to utilize some new features of this libvchan, which results in much better performance for inter-VM traffic (like a few orders of magnitude better!) Especially important for things such as USB virtualization that we\'re testing right now (not to be confused with USB controller pass-though).</li></ul>There is still some work going on which we would like to complete before we officially decide to release Qubes OS 3.0-rc1 ISO, and this includes:<br /><ul><li>Rewrite of some internal code for the core management stack, which includes internal API of the python classes. This should mostly be of no interest to users, and even most developers working on Qubes.</li></ul><ul><li>Initial code for <a href="https://wiki.qubes-os.org/ticket/853">Qubes Admin API</a> and port of Qubes Manager to use it.</li></ul>Further down the road (Qubes OS 3.1) we plan to work on some really exciting things:<br /><ul><li>More flexibility to qrexec policy (more on that in a separate post)</li><li>More flexibility to Qubes Admin API (expose it to slelect other VMs) </li><li>Split of Dom0 into (semi-depriviliged) GUI domain and minimal Admin domain. This would be great opportunity to also add the missing HAL support for the GUI daemon.</li></ul>One of the immediate application of these features above would be to introduce support for remote management of Qubes installations, an absolutely necessary feature for corporate adoption of Qubes.<br /><br />Also note how all these tasks are independent of the actual hypervisor support, meaning it\'s perfectly possible for other developers to work on porting other hypervisors to Qubes in the meantime.<br /><br />The possibilities seems to be endless now. Join us and help us with The Revolution! :)<br /><br />', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u"Back in 2013 we've started the work on generalizing Qubes architecture, which we code-named Odyssey, to allow for use of multiple hypervisors instead of just Xen via Hypervisor Abstraction Layer (HAL  Space Odyssey, get it? ;). The concept has been described in this post, which I recommend to re-read if you're more interested in understanding our goals.We have been wandering here and there since that time. Lots of work has been invested in the light-weight Qubes edition for Windows, which, sadly, turned out to be a failure.We have also done a lot of work in the meantime to polish Qubes R2 and bring it to the state of the final release, which happened earlier this fall.We have also been heavily researching possibilities of other cool projects based on this flexible new architecture. Some of which you might hear about in the coming months, others turned out to be dead ends.Today we're finally releasing the Qubes R3 source code to the public. The code builds fine (see here for building instruction), produces install-able ISO, and, if that was not enough, even seems to be working, mostly fine, when installed :)However, we don't recommend users to switch to it, and we intend this release for developers only, specifically those who would like to start working towards porting of other hypervisors, or other containerization technologies, like LXC, to Qubes R3. I highly recommend these devlopers to discuss what they try to achieve on the qubes-devel mailing list, before they start the actual coding.Currently the only implemented and supported backend is Xen, of course, specifically the Xen 4.4, currently the latest version. It should be now trivial to switch to future versions as they become available, although, a decision to rush with that might not be such a no-brainer from the security point of view. We should remember that the hypervisor, unlike Linux kernel, is not someting you would like to change every month or so. Ideally we should aim for having a stable version of Xen for desktops that would work for years without needing any updates.But use of other hypervisors might open up lots of interesting possibilities: imagine e.g. Qubes Live USB edition that has backends for 1) Xen, 2)  KVM, and 3) LXC, and choose automatically the most secure one which is still supported on the given laptop.Major features of the current release, compared to Qubes R2:Hypervisor Abstraction Layer for all the core management stack (but still missing for the GUI daemon, see below)New implementation of vchan and qrexec. As you might know our original vchan has been rewritten and improved (better performance and flexibility) and included in the upstream Xen starting from v4.2. Now we're switching to this upstream libvchan. Also, qrexec has been slightly rewritten to utilize some new features of this libvchan, which results in much better performance for inter-VM traffic (like a few orders of magnitude better!) Especially important for things such as USB virtualization that we're testing right now (not to be confused with USB controller pass-though).There is still some work going on which we would like to complete before we officially decide to release Qubes OS 3.0-rc1 ISO, and this includes:Rewrite of some internal code for the core management stack, which includes internal API of the python classes. This should mostly be of no interest to users, and even most developers working on Qubes.Initial code for Qubes Admin API and port of Qubes Manager to use it.Further down the road (Qubes OS 3.1) we plan to work on some really exciting things:More flexibility to qrexec policy (more on that in a separate post)More flexibility to Qubes Admin API (expose it to slelect other VMs) Split of Dom0 into (semi-depriviliged) GUI domain and minimal Admin domain. This would be great opportunity to also add the missing HAL support for the GUI daemon.One of the immediate application of these features above would be to introduce support for remote management of Qubes installations, an absolutely necessary feature for corporate adoption of Qubes.Also note how all these tasks are independent of the actual hypervisor support, meaning it's perfectly possible for other developers to work on porting other hypervisors to Qubes in the meantime.The possibilities seems to be endless now. Join us and help us with The Revolution! :)", 'language': None}], 'guidislink': True, 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Qubes R3/Odyssey initial source code release', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2014/11/qubes-r3odyssey-initial-source-code.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2014-11-27T14:57:00.001+01:00', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-2049939853263374613', 'classifier': 'Join us'}
{'updated_parsed': time.struct_time(tm_year=2014, tm_mon=11, tm_mday=27, tm_hour=12, tm_min=23, tm_sec=40, tm_wday=3, tm_yday=331, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/4366442760226795341/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=4366442760226795341', 'type': u'text/html', 'rel': u'replies', 'title': u'11 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/4366442760226795341', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/4366442760226795341', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2014/09/announcing-qubes-os-release-2.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Announcing Qubes OS Release 2!'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-4366442760226795341', 'published_parsed': time.struct_time(tm_year=2014, tm_mon=9, tm_mday=26, tm_hour=18, tm_min=28, tm_sec=0, tm_wday=4, tm_yday=269, tm_isdst=0), 'title': u'Announcing Qubes OS Release 2!', 'pred': u'announcements', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'Today we\'re releasing Qubes OS R2! I\'m not gonna write about all the cool features in this release because you can find all this in our wiki and previous announcements (R2-beta1, R2-beta2, R2-beta3, R2-rc1, and R2-rc2). Suffice to say that we\'ve come a long way over those 4+ years from a primitive proof of concept to a powerful desktop OS which, I believe, it is today.One of the biggest difficulties we have been facing with Qubes since the very beginning, has been the amount of this extra, not-so-exciting, not directly security-related work, but so much needed to ensure things actually work. Yet, the line between what is, and what is not-security related, is sometimes very thin and one can easily cross it if not being careful.It\'s great that we\'re receiving more and more community contributions. This includes not only bug fixes, but also invaluable efforts related to documentation, HCL maintenance, as well as some really non-trivial new features (advanced backups support, Debian and Arch templates, TorVM, Whonix port, etc). Thanks! I\'m also happy to announce that Caspar Bowden, a well known privacy advocate, expert on EU data protection law, member of the board of Tor, former Microsoft Chief Privacy Adviser, etc, will be taking a role as Qubes Policy Adviser, helping us to make Qubes OS more suitable for a wider audience of people interested in privacy, and be liaising&nbsp; with other projects that would like to build privacy services with Qubes as a base.And there is still a lot in front of us. Using the obligatory car analogy, I would say Qubes OS is currently like a racing car that just went into production as a road vehicle: one hell of an engine under-the-hood, and powerful new technologies until now unavailable even for professional use, yet lacking leather interior with 12-speaker audio system, and still with a manual transmission... This is just the beginning for making security by isolation on the desktop as "driveable" as a [insert your fav make of German fine cars] :)Exciting stuff is coming next: the Release 3 (Odyssey) and more, stay tuned!Thanks to everyone who has made Qubes OS possible, as well as all the upstream projects without which we would probably never even try this journey: Xen, Linux, Xorg, and many others!', 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Announcing Qubes OS Release 2!', 'language': None}, 'updated': u'2014-11-27T13:23:40.232+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2014/09/announcing-qubes-os-release-2.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://3.bp.blogspot.com/-0yOLNM-YXqs/VCWk3PrvYgI/AAAAAAAAAPE/AnXQpgxmjLY/s72-c/qubes-logo-blue.png', 'width': u'72', 'height': u'72'}], 'summary': u'<div class="separator" style="clear: both; text-align: center;"></div>Today <a href="https://wiki.qubes-os.org/wiki/QubesDownloads">we\'re releasing</a> Qubes OS R2! I\'m not gonna write about all the cool features in this release because you can find all this in <a href="https://wiki.qubes-os.org/">our wiki</a> and previous announcements (<a href="http://theinvisiblethings.blogspot.com/2012/12/qubes-2-beta-1-with-initial-windows.html">R2-beta1</a>, <a href="http://theinvisiblethings.blogspot.com/2013/02/qubes-2-beta-2-has-been-released.html">R2-beta2</a>, <a href="http://theinvisiblethings.blogspot.com/2013/12/qubes-r2-beta-3-has-been-released.html">R2-beta3</a>, <a href="http://theinvisiblethings.blogspot.com/2014/04/qubes-os-r2-rc1-has-been-released.html">R2-rc1</a>, and <a href="http://theinvisiblethings.blogspot.com/2014/08/qubes-os-r2-rc2-debian-template-ssled.html">R2-rc2</a>). Suffice to say that we\'ve come a long way over those 4+ years from a <a href="http://theinvisiblethings.blogspot.com/2010/04/introducing-qubes-os.html">primitive proof of concept</a> to a powerful desktop OS which, I believe, it is today.<br /><br />One of the biggest difficulties we have been facing with Qubes since the very beginning, has been the amount of this extra, not-so-exciting, not directly security-related work, but so much needed to ensure things actually work. Yet, the line between what is, and what is not-security related, is sometimes very thin and one can easily cross it if not being careful.<br /><br />It\'s great that we\'re receiving more and more community contributions. This includes not only bug fixes, but also invaluable efforts related to <a href="https://wiki.qubes-os.org/wiki/UserDoc">documentation</a>, <a href="https://wiki.qubes-os.org/wiki/HCL">HCL maintenance</a>, as well as some really non-trivial new features (advanced backups support, Debian and Arch templates, TorVM, Whonix port, etc). Thanks! <br /><br />I\'m also happy to announce that <span id="goog_1035536959"></span><a href="https://independent.academia.edu/CasparBowden">Caspar Bowden<span id="goog_1035536960"></span></a>, a well known privacy advocate, expert on EU data protection law, member of the board of Tor, former Microsoft Chief Privacy Adviser, etc, will be taking a role as Qubes Policy Adviser, helping us to make Qubes OS more suitable for a wider audience of people interested in privacy, and be liaising&nbsp; with other projects that would like to build privacy services with Qubes as a base.<br /><br />And there is still a lot in front of us. Using the obligatory car analogy, I would say Qubes OS is currently like a racing car that just went into production as a road vehicle: one hell of an engine under-the-hood, and powerful new technologies until now unavailable even for professional use, yet lacking leather interior with 12-speaker audio system, and still with a manual transmission... This is just the beginning for making security by isolation on the desktop as "driveable" as a [insert your fav make of German fine cars] :)<br /><br />Exciting stuff is coming next: the Release 3 (\u201c<a href="http://theinvisiblethings.blogspot.com/2013/03/introducing-qubes-odyssey-framework.html">Odyssey</a>\u201d) and more, stay tuned!<br /><br />Thanks to <a href="https://wiki.qubes-os.org/wiki/QubesDevelopers">everyone</a> who has made Qubes OS possible, as well as all the upstream projects without which we would probably never even try this journey: Xen, Linux, Xorg, and many others!<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-0yOLNM-YXqs/VCWk3PrvYgI/AAAAAAAAAPE/AnXQpgxmjLY/s1600/qubes-logo-blue.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="200" src="http://3.bp.blogspot.com/-0yOLNM-YXqs/VCWk3PrvYgI/AAAAAAAAAPE/AnXQpgxmjLY/s1600/qubes-logo-blue.png" width="200" /></a></div><br />', 'guidislink': True, 'published': u'2014-09-26T20:28:00.000+02:00', u'thr_total': u'11', 'classifier': 'bug fixes'}
{'updated': u'2014-08-26T19:15:58.669+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'paper', 'updated_parsed': time.struct_time(tm_year=2014, tm_mon=8, tm_mday=26, tm_hour=17, tm_min=15, tm_sec=58, tm_wday=1, tm_yday=238, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2014, tm_mon=8, tm_mday=26, tm_hour=17, tm_min=15, tm_sec=0, tm_wday=1, tm_yday=238, tm_isdst=0), 'title': u'Physical separation vs. Software compartmentalization', 'pred': u'security', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://www.blogger.com/feeds/24586388/posts/default/2261156925386470515', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/2261156925386470515', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2014/08/physical-separation-vs-software.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Physical separation vs. Software compartmentalization'}], 'summary': u'Many people believe the Holy Grail of secure isolation is to use two or more physically separate machines. This belief seems so natural, that we often don\'t give it much thought. After all, what better isolation could we possible get than physical "airgap"?<br /><br />I argue with this point of view in this <a href="http://www.invisiblethingslab.com/resources/2014/Software_compartmentalization_vs_physical_separation.pdf">new paper</a>.<br /><br />I think a good place for in-depth technical discussions around the topics discussed in the paper would be our <a href="https://wiki.qubes-os.org/wiki/QubesLists">qubes-devel mailing list</a>.', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'Many people believe the Holy Grail of secure isolation is to use two or more physically separate machines. This belief seems so natural, that we often don\'t give it much thought. After all, what better isolation could we possible get than physical "airgap"?I argue with this point of view in this new paper.I think a good place for in-depth technical discussions around the topics discussed in the paper would be our qubes-devel mailing list.', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Physical separation vs. Software compartmentalization', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2014/08/physical-separation-vs-software.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2014-08-26T19:15:00.003+02:00', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-2261156925386470515', 'classifier': 'topics discussed'}
{'updated_parsed': time.struct_time(tm_year=2014, tm_mon=11, tm_mday=27, tm_hour=12, tm_min=24, tm_sec=15, tm_wday=3, tm_yday=331, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7667743056108682405/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=7667743056108682405', 'type': u'text/html', 'rel': u'replies', 'title': u'11 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7667743056108682405', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7667743056108682405', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2014/08/qubes-os-r2-rc2-debian-template-ssled.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes OS R2 rc2, Debian template, SSLed Wiki, BadUSB, and more...'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-7667743056108682405', 'published_parsed': time.struct_time(tm_year=2014, tm_mon=8, tm_mday=6, tm_hour=11, tm_min=2, tm_sec=0, tm_wday=2, tm_yday=218, tm_isdst=0), 'title': u'Qubes OS R2 rc2, Debian template, SSLed Wiki, BadUSB, and more...', 'pred': u'announcements', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'Today we\'re release the second release candidate (rc2) for Qubes OS R2. There are currently no more open tickets for the final R2 release, and we hope that what we release today is stable enough and so will be identical, or nearly identical, to the final R2 ISO, which we plan to release after the summer holidays. Download and installation instructions are here.After Qubes rc1 release a few months ago we have been hit by a number of problems related to unreliable VM start-ups. The most prevalent problem has been traced down to an upstream bug in systemd, which just happened to be manifesting on Qubes OS due to specific conditions imposed by our startup scripts.Actually, it has not been the first time when some things related to VM bootup or initialization didn\'t work quite well on Qubes, a side effect of heavy optimizations and stripping down we do in order to make the VMs as light weight as possible. E.g. we don\'t start most of the Desktop Environment which otherwise is assumed to be running by various desktop-related applications and services. In most cases these are really NOTOURBUG kind of problems, yet we just happen to be unlucky they manifest on Qubes. We do need more help from the community with testing, debugging and patching such NOTOURBUG problems in the upstream. The more people use Qubes OS, the higher the chances such problems will be addressed much quicker. Ideally, in the future, we could partner with a Linux distro that would include Qubes AppVM as one of the test cases.Speaking of different Linux distros --&nbsp; we have also recently built and released an experimental (beta) Debian template for Qubes AppVMs, a popular request expressed by our users for quite some time. It can be readily installed with just one command, as described in the wiki. It is supposed to behave as a first class Qubes AppVM with all the Qubes signature VM integration features, such as seamless GUI virtualization, secure clipboard, secure file copy, and other integration, all working out of the box. Special thanks to our community contributors for providing most of the patches required for porting of our agents and other scripts to Debian. This template is currently provided via our templates-community repo, but it nevertheless has been built and signed by ITL, and is also configured to fetch updates (for Qubes tools) from our server, but we look forward for somebody from the community to take over from us the maintenance (building, testing) of the updates for this template.Also in our "Templates Appstore" you can find now an experimental minimal fedora-based template, which might be used by more advanced users to build customized special-purpose VMs and templates.We have also moved our Wiki server to a bigger EC2 instance so it could better handle the increased traffic and also added a real CA-signed SSL certificate! But I encourage people to read why this is mostly irrelevant from the security standpoint and why they should still be checking signatures on the ISOs.We also got a new logo (actually we never really had our own logo before). This also means Qubes now got its own distinct set of themes for installer, plymouth and, of course, a bunch of cool wallpapers with Qubes logo nicely engraved on them. However, it turned out that convincing KDE to set our wallpaper as a default one exceeds the collective mental abilities of ITL, and so one needs to right-click on the desktop and choose one of the Qubes-branded wallpapers manually after install or upgrade.Every once in a while people (re-)discover that monolithic kernel-based desktop operating systems are not the best solution whenever the user even remotely cares about security...Yes, USB inherent insecurity, as well as widespread GUI insecurity, or networking stack insecurity, trivial physical insecurities, or sick permissions model as used in most desktop systems, have all been known facts for years. The recognition of these problems has been the primary motivator for us to start the work on Qubes OS back in 2009/2010. And yes, Qubes running on an appropriate hardware (specifically with Intel VT-d) can solve most of these problems. Correction: Qubes OS can allow the user or administrator to solve these problems, as unfortunately this still requires some configuration decisions made by the human operator. So today Qubes R2 is like a sports manual transmission, which requires a bit of skill to get most out of it. In the near future I see no reason why we should not be offering the "automatic 8-speed transmission" edition of Qubes OS. We just need more time to get there. The R3 release (Odyssey-based), whose early code is planned to be released just after the "final" R2, so sometime in September, is all about bringing us closer to that "automatic transmission" version.With my 10+ years of experience as a system-level security researcher, I believe there is no other way to go. Don\'t get deluded that safe languages or formally verified microkernels could solve these problems. Security by Isolation, done sensibly, is the only way to go (of course it doesn\'t preclude making use of some formally verified components, like e.g. microkernel in place of Xen, at least in some editions of Qubes). Finally one more announcement for today: after writing this blog for 8 years, I\'ve suddenly felt like I might need to try also some new form of expression... And so, for a few days, I now have a twitter account (@rootkovska), which I hope to use for updates on Qubes, as well as more general commentary on various things happening in IT security.', 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Qubes OS R2 rc2, Debian template, SSLed Wiki, BadUSB, and more...', 'language': None}, 'updated': u'2014-11-27T13:24:15.997+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'os security', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'usb', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2014/08/qubes-os-r2-rc2-debian-template-ssled.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://1.bp.blogspot.com/-FZ0wECOfuPs/U-FSwDST6UI/AAAAAAAAAO0/kJUqXKYkqlU/s72-c/qubes-logo-blue.png', 'width': u'72', 'height': u'72'}], 'summary': u'Today we\'re release the second release candidate (rc2) for Qubes OS R2. There are currently no more open tickets for the final R2 release, and we hope that what we release today is stable enough and so will be identical, or nearly identical, to the final R2 ISO, which we plan to release after the summer holidays. Download and installation instructions are <a href="https://wiki.qubes-os.org/wiki/QubesDownloads">here</a>.<br /><br />After Qubes rc1 release a <a href="http://theinvisiblethings.blogspot.com/2014/04/qubes-os-r2-rc1-has-been-released.html">few months ago</a> we have been hit by a number of problems related to unreliable VM start-ups. The most prevalent problem has been traced down to an upstream bug in systemd, which just happened to be manifesting on Qubes OS due to specific conditions imposed by our startup scripts.<br /><br />Actually, it has not been the first time when some things related to VM bootup or initialization didn\'t work quite well on Qubes, a side effect of heavy optimizations and stripping down we do in order to make the VMs as light weight as possible. E.g. we don\'t start most of the Desktop Environment which otherwise is assumed to be running by various desktop-related applications and services. In most cases these are really NOTOURBUG kind of problems, yet we just happen to be unlucky they manifest on Qubes. We do need more help from the community with testing, debugging and patching such NOTOURBUG problems in the upstream. The more people use Qubes OS, the higher the chances such problems will be addressed much quicker. Ideally, in the future, we could partner with a Linux distro that would include Qubes AppVM as one of the test cases.<br /><br />Speaking of different Linux distros --&nbsp; we have also recently built and released an experimental (\u201cbeta\u201d) <a href="https://wiki.qubes-os.org/wiki/Templates/Debian">Debian template for Qubes AppVMs</a>, a popular request expressed by our users for quite some time. It can be readily installed with just one command, as described in the wiki. It is supposed to behave as a first class Qubes AppVM with all the Qubes signature VM integration features, such as seamless GUI virtualization, secure clipboard, secure file copy, and other integration, all working out of the box. Special thanks to our community contributors for providing most of the patches required for porting of our agents and other scripts to Debian. This template is currently provided via our <span>templates-community</span> repo, but it nevertheless has been built and signed by ITL, and is also configured to fetch updates (for Qubes tools) from our server, but we look forward for somebody from the community to take over from us the maintenance (building, testing) of the updates for this template.<br /><br />Also in our "Templates Appstore" you can find now an experimental <a href="https://wiki.qubes-os.org/wiki/Templates/FedoraMinimal">\u201cminimal\u201d fedora-based template</a>, which might be used by more advanced users to build customized special-purpose VMs and templates.<br /><br />We have also moved our Wiki server to a bigger EC2 instance so it could better handle the increased traffic and also added a real CA-signed SSL certificate! But I encourage people to <a href="https://groups.google.com/d/msg/qubes-users/LsDpKnwN6w8/guoN9pKwcF4J">read why</a> this is mostly irrelevant from the security standpoint and why they should still be checking signatures on the ISOs.<br /><br />We also got a new logo (actually we never really had our own logo before). This also means Qubes now got its own distinct set of themes for installer, plymouth and, of course, a bunch of cool wallpapers with Qubes logo nicely engraved on them. However, it turned out that convincing KDE to set our wallpaper as a default one exceeds the collective mental abilities of ITL, and so one needs to right-click on the desktop and choose one of the Qubes-branded wallpapers manually after install or upgrade.<br /><br />Every once in a while people (re-)<a href="http://www.wired.com/2014/07/usb-security/">discover</a> that monolithic kernel-based desktop operating systems are not the best solution whenever the user even remotely cares about security...<br /><br />Yes, <a href="http://theinvisiblethings.blogspot.com/2011/06/usb-security-challenges.html">USB inherent insecurity</a>, as well as widespread <a href="http://theinvisiblethings.blogspot.com/2011/04/linux-security-circus-on-gui-isolation.html">GUI insecurity</a>, or <a href="http://theinvisiblethings.blogspot.com/2010/04/remotely-attacking-network-cards-or-why.html">networking stack insecurity</a>, trivial <a href="http://theinvisiblethings.blogspot.com/2009/10/evil-maid-goes-after-truecrypt.html">physical insecurities</a>, or <a href="http://theinvisiblethings.blogspot.com/2010/08/ms-dos-security-model.html">sick permissions model</a> as used in most desktop systems, have all been known facts for years. The recognition of these problems has been the primary motivator for us to start the work on Qubes OS back in 2009/2010. <br /><br />And yes, Qubes running on an appropriate hardware (specifically with Intel VT-d) can solve most of these problems. Correction: Qubes OS can allow the user or administrator to solve these problems, as unfortunately this still requires some configuration decisions made by the human operator. So today Qubes R2 is like a sports manual transmission, which requires a bit of skill to get most out of it. In the near future I see no reason why we should not be offering the "automatic 8-speed transmission" edition of Qubes OS. We just need more time to get there. The R3 release (<a href="http://theinvisiblethings.blogspot.com/2013/03/introducing-qubes-odyssey-framework.html">Odyssey</a>-based), whose early code is planned to be released just after the "final" R2, so sometime in September, is all about bringing us closer to that "automatic transmission" version.<br /><br />With my 10+ years of experience as a system-level security researcher, I believe there is no other way to go. <a href="http://theinvisiblethings.blogspot.com/2010/05/on-formally-verified-microkernels-and.html">Don\'t get deluded</a> that safe languages or formally verified microkernels could solve these problems. Security by Isolation, done sensibly, is the only way to go (of course it doesn\'t preclude making use of some formally verified components, like e.g. microkernel in place of Xen, at least in some editions of Qubes). <br /><br />Finally one more announcement for today: after writing this blog for 8 years, I\'ve suddenly felt like I might need to try also some new form of expression... And so, for a few days, I now have a <a href="https://twitter.com/rootkovska">twitter account</a> (@rootkovska), which I hope to use for updates on Qubes, as well as more general commentary on various things happening in IT security.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-FZ0wECOfuPs/U-FSwDST6UI/AAAAAAAAAO0/kJUqXKYkqlU/s1600/qubes-logo-blue.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="200" src="http://1.bp.blogspot.com/-FZ0wECOfuPs/U-FSwDST6UI/AAAAAAAAAO0/kJUqXKYkqlU/s1600/qubes-logo-blue.png" width="200" /></a></div>', 'guidislink': True, 'published': u'2014-08-06T13:02:00.000+02:00', u'thr_total': u'11', 'classifier': 'updates'}
{'updated': u'2014-11-27T13:24:27.320+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'announcements', 'updated_parsed': time.struct_time(tm_year=2014, tm_mon=11, tm_mday=27, tm_hour=12, tm_min=24, tm_sec=27, tm_wday=3, tm_yday=331, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2014, tm_mon=4, tm_mday=20, tm_hour=18, tm_min=40, tm_sec=0, tm_wday=6, tm_yday=110, tm_isdst=0), 'title': u'Qubes OS R2 rc1 has been released!', 'pred': u'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7571053820604404319/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=7571053820604404319', 'type': u'text/html', 'rel': u'replies', 'title': u'10 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7571053820604404319', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7571053820604404319', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2014/04/qubes-os-r2-rc1-has-been-released.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes OS R2 rc1 has been released!'}], 'summary': u'Today we\'re releasing Qubes OS R2 rc1 (release candidate), which is expected to be the last milestone before the final Qubes OS R2 release. As mentioned <a href="http://theinvisiblethings.blogspot.com/2013/12/qubes-r2-beta-3-has-been-released.html">previously</a> today\'s release is bringing mainly UI improvements and polishing and lots of bugfixes, as well as some last new features:&nbsp; <br /><ul><li>Both Dom0 and VMs have been upgraded to Fedora 20.</li></ul><ul><li>Support for full templates download via two new repo definitions: <a href="http://sourceforge.net/projects/qubesos/files/templates-itl/"><span>templates-itl</span></a> and <a href="http://sourceforge.net/projects/qubesos/files/templates-community/"><span>templates-community</span></a>. With a bit of imagination we could call it Qubes \u201cAppStore\u201d for VMs :) Currently we have only published one template there \u2013 the new default fc20-based template, but we plan to upload more templates in the coming weeks (such as the community-produced Arch Linux and Debian templates). Even though we have a separate repo for community contributed templates, we still plan on building those templates <i>ourselves</i>, from (contributed) sources.</li></ul><ul><li>Support for running Windows AppVMs in \u201cfull desktop\u201d mode with support for arbitrary window resizing (which automatically adjusts the resolution in the VMs).</li></ul><ul><li>Support for on-the-fly switching between the \u201cfull desktop\u201d and \u201cseamless\u201d modes for Windows AppVMs.</li></ul>The last two features require, of course, our proprietary Qubes Windows Tools to be installed in the Windows AppVMs to work, which new version we have also published to the new repositories for R2rc1.<br /><br />We support smooth upgrading for current Qubes R2 Beta 3 users \u2013 the procedure is very simple, yet it will take some hours because of the Dom0 distro upgrading.<br /><br />As can be seen in our <a href="http://wiki.qubes-os.org/trac/report/3">ticketing system</a>, there really are only few minor cosmetic tasks left before the final Qubes R2 release. It is expected that upgrade from today\'s release to the final R2 will be very simple and quick \u2013 just standard updates installation.<br /><br />As usual, the detailed installation and upgrade instructions, as well as the HCL, can be found <a href="http://wiki.qubes-os.org/trac/wiki/QubesDownloads">here</a>. Note however, that the HCL for the today\'s release will take some days/weeks to compile, as we need to wait for reports from the community, and so for this time the HCL for the previous release (R2 Beta 3) should be used instead. It is reasonable to expect that the new HCL will be a subset of the previous one.<br /><br />Also, as usual, please keep in mind that we don\'t control the servers from which the ISO is being served and so please always make sure to verify the digital signature on the downloaded ISO before installing it.<br /><br />Please direct all the technical questions or comments regarding Qubes OS to <a href="http://wiki.qubes-os.org/trac/wiki/QubesLists">our mailing lists</a>.<br /><br />Enjoy!<br /><br />', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u"Today we're releasing Qubes OS R2 rc1 (release candidate), which is expected to be the last milestone before the final Qubes OS R2 release. As mentioned previously today's release is bringing mainly UI improvements and polishing and lots of bugfixes, as well as some last new features:&nbsp; Both Dom0 and VMs have been upgraded to Fedora 20.Support for full templates download via two new repo definitions: templates-itl and templates-community. With a bit of imagination we could call it Qubes AppStore for VMs :) Currently we have only published one template there \u2013 the new default fc20-based template, but we plan to upload more templates in the coming weeks (such as the community-produced Arch Linux and Debian templates). Even though we have a separate repo for community contributed templates, we still plan on building those templates ourselves, from (contributed) sources.Support for running Windows AppVMs in full desktop mode with support for arbitrary window resizing (which automatically adjusts the resolution in the VMs).Support for on-the-fly switching between the full desktop and seamless modes for Windows AppVMs.The last two features require, of course, our proprietary Qubes Windows Tools to be installed in the Windows AppVMs to work, which new version we have also published to the new repositories for R2rc1.We support smooth upgrading for current Qubes R2 Beta 3 users \u2013 the procedure is very simple, yet it will take some hours because of the Dom0 distro upgrading.As can be seen in our ticketing system, there really are only few minor cosmetic tasks left before the final Qubes R2 release. It is expected that upgrade from today's release to the final R2 will be very simple and quick \u2013 just standard updates installation.As usual, the detailed installation and upgrade instructions, as well as the HCL, can be found here. Note however, that the HCL for the today's release will take some days/weeks to compile, as we need to wait for reports from the community, and so for this time the HCL for the previous release (R2 Beta 3) should be used instead. It is reasonable to expect that the new HCL will be a subset of the previous one.Also, as usual, please keep in mind that we don't control the servers from which the ISO is being served and so please always make sure to verify the digital signature on the downloaded ISO before installing it.Please direct all the technical questions or comments regarding Qubes OS to our mailing lists.Enjoy!", 'language': None}], 'guidislink': True, 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Qubes OS R2 rc1 has been released!', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2014/04/qubes-os-r2-rc1-has-been-released.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2014-04-20T20:40:00.000+02:00', u'thr_total': u'10', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-7571053820604404319', 'classifier': 'improvements'}
{'updated': u'2014-11-27T13:24:38.464+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'security', 'updated_parsed': time.struct_time(tm_year=2014, tm_mon=11, tm_mday=27, tm_hour=12, tm_min=24, tm_sec=38, tm_wday=3, tm_yday=331, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2014, tm_mon=1, tm_mday=15, tm_hour=23, tm_min=32, tm_sec=0, tm_wday=2, tm_yday=15, tm_isdst=0), 'title': u'Shattering the myths of Windows security', 'pred': u'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/366066024465255660/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=366066024465255660', 'type': u'text/html', 'rel': u'replies', 'title': u'27 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/366066024465255660', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/366066024465255660', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2014/01/shattering-myths-of-windows-security.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Shattering the myths of Windows security'}], 'summary': u'When I originally described the flexible <a href="http://theinvisiblethings.blogspot.com/2013/03/introducing-qubes-odyssey-framework.html">Qubes Odyssey framework</a> several months ago, I mentioned that we would even consider to use \u201cWindows Native Isolation\u201d mechanisms as a primitive type of isolation provider (\u201chypervisor\u201d) for some basic edition of Qubes for Windows. The idea has been very attractive indeed, because with minimal effort we could allow people to install and run such Qubes WNI on their normal, consumer Windows laptops.<br /><br />Sure, the inter-process isolation provided by a monolithic kernel such as Windows or Linux could never be compared to the inter-VM isolation offered even by the most lousy hypervisors. This is simply because the sizes of the interfaces exposed to untrusted entities (processes in case of a monolithic kernel; VMs in case of a hypervisor) are just incomparable. Just think about all those Windows system calls and GDI calls which any process can call and which contains probably thousands of bugs still waiting to be discovered by some kid with IDA. And think about those tens of thousands of drivers, which also expose (often unsecured) IOCTLs, as well as parsing the incoming packets, USB devices infos, filesystem metadata, etc. And then think about various additional services exposed by system processes, which are not part of the kernel, but which are still trusted and privileged. And now think about the typical interface that needs to be exposed to a typical VM: it\'s \u201cjust\u201d the virtualized CPU, some emulated devices (some old-fashined Pentium-era chipset, SVGA graphics adapter, etc) and virtualized memory. <br /><br />Anyway, knowing all this, I still believed that Qubes WNI would make a whole lot of sense. This is because Qubes WNI would still offer a significant boost over the \u201cJust Windows\u201d default security, which is (still) essentially equivalent to the <a href="http://theinvisiblethings.blogspot.com/2010/08/ms-dos-security-model.html">MS-DOS security model</a>.&nbsp; And this is a real pity, because Windows OS has long implemented very sophisticated security mechanisms, such as complex ACLs applicable to nearly any object, as well as recent mechanisms such as UIPI/UAC, etc. So, why not use all those sophisticated security to bring some real-world security to Windows desktops!<br /><br />And, best of all, once people start using Qubes WNI, and they liked it, they could then pretty seamlessly upgrade to Xen-based Qubes OS, or perhaps Hyper-V-based Qubes OS (when we implement it) and their system would look and behave very similarly. Albeit with orders of magnitude stronger security. Finally, if we could get our Odyssey Framework to be flexible enough to support both Qubes WNI, as well as Xen-based Qubes OS, we should then be able to support any hypervisor or other isolation mechanism in the future.<br /><br />And so we decided to build the Qubes WNI. Lots of work we invested in building Qubes WNI was actually WNI-independent, because it e.g. covered adjusting the core Odyssey framework to be more flexible (after all \u201cWNI\u201d is quite a non-standard hypervisor) as well as some components that were Windows-specific, but not WNI-specific (e.g. could very well be used on Hyper-V based Qubes OS in the future). But we also invested lots of time into evaluating all those Windows security mechanisms in order to achieve our specific goals (e.g. proper GUI isolation, networking isolation, kernel object spaces isolation, etc)...<br /><br />Sadly this all has turned out to be a story without a happy end, as we have finally came to the conclusion that consumer Windows OS, with all those one-would-think sophisticated security mechanisms, is just not usable for any real-world domain isolation.<br /><br />And today we publish a technical paper about our findings on Windows security model and mechanisms and why we concluded they are inadequate in practice. The paper has been written by Rafa\u0142 Wojdy\u0142a who joined ITL a few months ago with the main task of implementing Qubes WNI. I think most people will be able to learn a thing or two about Windows security model by reading this paper.<br /><br />Also, we still do have this little hope that somebody will read the paper and then write to us: \u201cOh, you\'re guys so dumb, you could just use this and that mechanism, to solve all your problems with WNI!\u201d :)<br /><br />The paper can be downloaded from <a href="http://www.invisiblethingslab.com/resources/2014/A%20crack%20on%20the%20glass.pdf">here</a>.', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u"When I originally described the flexible Qubes Odyssey framework several months ago, I mentioned that we would even consider to use Windows Native Isolation mechanisms as a primitive type of isolation provider (hypervisor) for some basic edition of Qubes for Windows. The idea has been very attractive indeed, because with minimal effort we could allow people to install and run such Qubes WNI on their normal, consumer Windows laptops.Sure, the inter-process isolation provided by a monolithic kernel such as Windows or Linux could never be compared to the inter-VM isolation offered even by the most lousy hypervisors. This is simply because the sizes of the interfaces exposed to untrusted entities (processes in case of a monolithic kernel; VMs in case of a hypervisor) are just incomparable. Just think about all those Windows system calls and GDI calls which any process can call and which contains probably thousands of bugs still waiting to be discovered by some kid with IDA. And think about those tens of thousands of drivers, which also expose (often unsecured) IOCTLs, as well as parsing the incoming packets, USB devices infos, filesystem metadata, etc. And then think about various additional services exposed by system processes, which are not part of the kernel, but which are still trusted and privileged. And now think about the typical interface that needs to be exposed to a typical VM: it's just the virtualized CPU, some emulated devices (some old-fashined Pentium-era chipset, SVGA graphics adapter, etc) and virtualized memory. Anyway, knowing all this, I still believed that Qubes WNI would make a whole lot of sense. This is because Qubes WNI would still offer a significant boost over the Just Windows default security, which is (still) essentially equivalent to the MS-DOS security model.&nbsp; And this is a real pity, because Windows OS has long implemented very sophisticated security mechanisms, such as complex ACLs applicable to nearly any object, as well as recent mechanisms such as UIPI/UAC, etc. So, why not use all those sophisticated security to bring some real-world security to Windows desktops!And, best of all, once people start using Qubes WNI, and they liked it, they could then pretty seamlessly upgrade to Xen-based Qubes OS, or perhaps Hyper-V-based Qubes OS (when we implement it) and their system would look and behave very similarly. Albeit with orders of magnitude stronger security. Finally, if we could get our Odyssey Framework to be flexible enough to support both Qubes WNI, as well as Xen-based Qubes OS, we should then be able to support any hypervisor or other isolation mechanism in the future.And so we decided to build the Qubes WNI. Lots of work we invested in building Qubes WNI was actually WNI-independent, because it e.g. covered adjusting the core Odyssey framework to be more flexible (after all WNI is quite a non-standard hypervisor) as well as some components that were Windows-specific, but not WNI-specific (e.g. could very well be used on Hyper-V based Qubes OS in the future). But we also invested lots of time into evaluating all those Windows security mechanisms in order to achieve our specific goals (e.g. proper GUI isolation, networking isolation, kernel object spaces isolation, etc)...Sadly this all has turned out to be a story without a happy end, as we have finally came to the conclusion that consumer Windows OS, with all those one-would-think sophisticated security mechanisms, is just not usable for any real-world domain isolation.And today we publish a technical paper about our findings on Windows security model and mechanisms and why we concluded they are inadequate in practice. The paper has been written by Rafa\u0142 Wojdy\u0142a who joined ITL a few months ago with the main task of implementing Qubes WNI. I think most people will be able to learn a thing or two about Windows security model by reading this paper.Also, we still do have this little hope that somebody will read the paper and then write to us: Oh, you're guys so dumb, you could just use this and that mechanism, to solve all your problems with WNI! :)The paper can be downloaded from here.", 'language': None}], 'guidislink': True, 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Shattering the myths of Windows security', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2014/01/shattering-myths-of-windows-security.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2014-01-16T00:32:00.000+01:00', u'thr_total': u'27', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-366066024465255660', 'classifier': 'Windows security'}
{'updated': u'2014-11-27T13:24:51.677+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'announcements', 'updated_parsed': time.struct_time(tm_year=2014, tm_mon=11, tm_mday=27, tm_hour=12, tm_min=24, tm_sec=51, tm_wday=3, tm_yday=331, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2013, tm_mon=12, tm_mday=10, tm_hour=23, tm_min=14, tm_sec=0, tm_wday=1, tm_yday=344, tm_isdst=0), 'title': u'Qubes R2 Beta 3 has been released!', 'pred': u'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/3957611366610637891/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=3957611366610637891', 'type': u'text/html', 'rel': u'replies', 'title': u'8 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/3957611366610637891', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/3957611366610637891', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2013/12/qubes-r2-beta-3-has-been-released.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes R2 Beta 3 has been released!'}], 'summary': u'<br /><div style="margin-bottom: 0in;">Today we\'re releasing Qubes R2 Beta 3, one of the latest milestones on our roadmap for Qubes R2. Even though it is still called a \u201cbeta\u201d, most users should install it, because, we believe, it is the most polished and stable Qubes edition. Looking back, I think it was a mistake to use this alpha/beta/rc nomenclature to mark Qubes releases, and so, starting with Qubes R3 we will be just using version numbers: 3.0, 3.1, etc.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Anyway, back to the R2 Beta 3 \u2013 below I discuss some of the highlights of the today\'s release:</div><ul><li><div style="margin-bottom: 0in;">The <b>seamless GUI virtualization  for Windows 7-based AppVMs</b>, and support for <b>HVM-based  templates </b>(e.g. Windows-based templates) is one of the most  spectacular feature of this release, I think. It has already been  discussed in an <a href="http://theinvisiblethings.blogspot.com/2013/11/windows-7-seamless-gui-integration.html">earlier blog post</a>,  and now instructions have also been added <a href="http://wiki.qubes-os.org/trac/wiki/WindowsAppVms">to the wiki</a> for how to install and use such Windows AppVMs.</div><div style="margin-bottom: 0in;"><br /></div></li><li><div style="margin-bottom: 0in;">We\'ve also introduced a much more  <b>advanced infrastructure for system backups</b>, so it is now  possible to make and restore backups to/from <i>untrusted </i><span style="font-style: normal;">VMs,  which allows e.g. to backup easily the whole system to a NAS, or  just to an USB device, not worrying that somebody might  exploit the NAS client over the network, or that plugging of the USB disk </span><span style="font-style: normal;">with  malformed partition table or filesystem </span><span style="font-style: normal;">might  compromise the system. The whole point here is that the VM that  handles the backup storage (and which might be directing it to a  NAS, or somewhere) might be compromised, and it still cannot do  anything that could compromise (or even DoS) the system, neither can  it sniff the data in the backup. I will write more about the  challenges we had to solve and how we did it in a separate blog  post. I\'m very proud to note that majority of the implementation for  this has been contributed by the community, specifically Oliver  Medoc. </span><span style="font-style: normal;">Thanks!</span></div></li></ul><ul><li><div style="margin-bottom: 0in;"><span style="font-style: normal;">A  very simple feature, trivial almost, yet very important from the  security point of view \u2013 it is now possible to set </span><span style="font-style: normal;"><b>\'autostart\'  property on select VMs</b></span><span style="font-style: normal;">.  Why is this so important for security? Because I can create e.g.  UsbVM, assign all my USB controllers to it, and then once I set it  as autostarting, I can have assurance that all my USB controllers  will be delegated to such AppVM immediately upon each system boot.  Having such a UsbVM is a very good idea, if one is afraid of  physical <span id="goog_20988535"></span><a href="http://www.blogger.com/goog_20988534">attacks coming though USB devices</a></span><a href="http://www.blogger.com/"><span style="font-style: normal;"></span></a><span style="font-style: normal;"><span id="goog_20988536"></span>.  And it now could double as a BackupVM with this new backup system  mentioned above!</span></div></li></ul><ul><li><div style="margin-bottom: 0in;"><span style="font-style: normal;">To  improve hardware compatibility we now ship the installer with  </span><span style="font-style: normal;"><b>multiple </b></span><span style="font-style: normal;"><b>kernel  versions </b></span><span style="font-style: normal;">(3.7, 3.9, and  3.11) allowing to run the installation using any of those, e.g. if  it turned out that one kernel doesn\'t support the graphics card  correctly -- a typical problem many users faced in the past. All the kernels are also installed in the final system, allowing the user to easily boot with a select Dom0 kernel later, choosing the one which supports their hardware best. </span></div><div style="margin-bottom: 0in;"><br /></div></li><li><div style="margin-bottom: 0in;"><span style="font-style: normal;">Another popular problem of the past now was the lack of support for dynamically changing resolution/screen layout in the AppVMs when a seccond</span><sup><span style="font-style: normal;"></span></sup><span style="font-style: normal;"> monitor or a projector was hot-plugged in (which changed only the resolution layout in  Dom0). Now this problem has been solved and the </span><span style="font-style: normal;"><b>new  monitor layout is dynamically propagated to the AppVMs</b></span><span style="font-style: normal;">,  allowing to use all the screen real estate by the apps running there.</span></div></li></ul><ul><li><div style="margin-bottom: 0in;">There has also been a significant  amount of <b>cleanups </b><b>and fixes</b>. This includes the  unification of paths and command names (\u201cThe Underscore  Revolution\u201d as we call it), as well as refactoring of all the  source code components (which now closely matches what we have on  Qubes Odyssey/R3), and lots of various bugfixes.</div></li></ul><div style="margin-bottom: 0in;">We\'re planning one more release (Qubes R2 RC1) before the final R2, which will bring improvements mostly in the area of more polished UI, such as allowing some of the tasks that currently require commandline to be done from the Qubes Manager. So, this would mostly be a minor cosmetic upgrade, plus bugfixes. And probably we will also upgrade the default Linux template to Fedora 20.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Installation and upgrade instructions can be found <a href="http://wiki.qubes-os.org/trac/wiki/QubesDownloads">here</a>.</div>', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u"Today we're releasing Qubes R2 Beta 3, one of the latest milestones on our roadmap for Qubes R2. Even though it is still called a beta, most users should install it, because, we believe, it is the most polished and stable Qubes edition. Looking back, I think it was a mistake to use this alpha/beta/rc nomenclature to mark Qubes releases, and so, starting with Qubes R3 we will be just using version numbers: 3.0, 3.1, etc.Anyway, back to the R2 Beta 3 \u2013 below I discuss some of the highlights of the today's release:The seamless GUI virtualization  for Windows 7-based AppVMs, and support for HVM-based  templates (e.g. Windows-based templates) is one of the most  spectacular feature of this release, I think. It has already been  discussed in an earlier blog post,  and now instructions have also been added to the wiki for how to install and use such Windows AppVMs.We've also introduced a much more  advanced infrastructure for system backups, so it is now  possible to make and restore backups to/from untrusted VMs,  which allows e.g. to backup easily the whole system to a NAS, or  just to an USB device, not worrying that somebody might  exploit the NAS client over the network, or that plugging of the USB disk with  malformed partition table or filesystem might  compromise the system. The whole point here is that the VM that  handles the backup storage (and which might be directing it to a  NAS, or somewhere) might be compromised, and it still cannot do  anything that could compromise (or even DoS) the system, neither can  it sniff the data in the backup. I will write more about the  challenges we had to solve and how we did it in a separate blog  post. I'm very proud to note that majority of the implementation for  this has been contributed by the community, specifically Oliver  Medoc. Thanks!A  very simple feature, trivial almost, yet very important from the  security point of view \u2013 it is now possible to set 'autostart'  property on select VMs.  Why is this so important for security? Because I can create e.g.  UsbVM, assign all my USB controllers to it, and then once I set it  as autostarting, I can have assurance that all my USB controllers  will be delegated to such AppVM immediately upon each system boot.  Having such a UsbVM is a very good idea, if one is afraid of  physical attacks coming though USB devices.  And it now could double as a BackupVM with this new backup system  mentioned above!To  improve hardware compatibility we now ship the installer with  multiple kernel  versions (3.7, 3.9, and  3.11) allowing to run the installation using any of those, e.g. if  it turned out that one kernel doesn't support the graphics card  correctly -- a typical problem many users faced in the past. All the kernels are also installed in the final system, allowing the user to easily boot with a select Dom0 kernel later, choosing the one which supports their hardware best. Another popular problem of the past now was the lack of support for dynamically changing resolution/screen layout in the AppVMs when a seccond monitor or a projector was hot-plugged in (which changed only the resolution layout in  Dom0). Now this problem has been solved and the new  monitor layout is dynamically propagated to the AppVMs,  allowing to use all the screen real estate by the apps running there.There has also been a significant  amount of cleanups and fixes. This includes the  unification of paths and command names (The Underscore  Revolution as we call it), as well as refactoring of all the  source code components (which now closely matches what we have on  Qubes Odyssey/R3), and lots of various bugfixes.We're planning one more release (Qubes R2 RC1) before the final R2, which will bring improvements mostly in the area of more polished UI, such as allowing some of the tasks that currently require commandline to be done from the Qubes Manager. So, this would mostly be a minor cosmetic upgrade, plus bugfixes. And probably we will also upgrade the default Linux template to Fedora 20.Installation and upgrade instructions can be found here.", 'language': None}], 'guidislink': True, 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Qubes R2 Beta 3 has been released!', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2013/12/qubes-r2-beta-3-has-been-released.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2013-12-11T00:14:00.000+01:00', u'thr_total': u'8', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-3957611366610637891', 'classifier': 'beta'}
{'updated_parsed': time.struct_time(tm_year=2014, tm_mon=11, tm_mday=27, tm_hour=12, tm_min=25, tm_sec=4, tm_wday=3, tm_yday=331, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/3852916224574976224/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=3852916224574976224', 'type': u'text/html', 'rel': u'replies', 'title': u'10 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/3852916224574976224', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/3852916224574976224', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2013/11/windows-7-seamless-gui-integration.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Windows 7 seamless GUI integration coming to Qubes OS!'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-3852916224574976224', 'published_parsed': time.struct_time(tm_year=2013, tm_mon=11, tm_mday=26, tm_hour=17, tm_min=4, tm_sec=0, tm_wday=1, tm_yday=330, tm_isdst=0), 'title': u'Windows 7 seamless GUI integration coming to Qubes OS!', 'pred': u'announcements', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'Finally, after months of hard work, seamless mode for Windows 7 AppVMs is coming to Qubes OS! The new Windows Support Tools will be released together with the Qubes OS R2 Beta 3, which we plan to release in the next 1-2 weeks. Here is an obligatory screenshot showing a few Windows apps running in seamless mode integrated onto Qubes trusted desktop (note the usual Qubes trusted decorations around each of the Win7 windows):  The seamless mode for Windows AppVMs is not yet as polishedas the one we have for Linux AppVMs, because, unlike what we do for Xorg, the Windows GUI agent is not based on composition buffers extraction. This causes some, ratherminor, cosmetic problems. For example, when we have two overlapping windows from a Win7 AppVM, and move the top window away, its remaining "shadow" will be visible on the underlying window for the duration of the operation. But generally this all works reasonably good, and you should not really feel any slowness or heaviness compared to Linux AppVMs virtualization. It should be noted that we managed to add this seamless support for Windows AppVMs without any changes to our secure GUI virtualization protocol. Of course, the usual Qubes integration features, such as secure inter-VM clipboard and file copy also work for Windows AppVMs with the tools installed. The Qubes Windows Support Tools are proprietary, but they are supposed to be installed only in the Windows 7 VMs, which themselves contain millions of lines of proprietary code already. Besides that, the tools do not introduce any other modifications to the system.As a special bonus we have also added (and releasing also in R2B3) the support for template-based HVMs. So it will now be possible to do something like this:  qvm-create --hvm work-win7 --template win7-x64 --label greenqvm-create --hvm personal-win7 --template win7-x64 --label purpleqvm-create--hvm testing-win7 --template win7-x64 --label red          ... tellingQubes to createthree HVM AppVMs based on the same template.All such template-based AppVMs use the root filesystem from the Template VM, which is shared in a read-only manner, of course, but Qubes makes it look for the AppVMs as if the root filesystem was writable.Just like in case of Linux AppVMs, the actual writes are stored in COW buffersbacked by files stored in each of the AppVMs directories. Upon AppVM\'s reboot, thosefilesarediscarded, which reverts the VMs\' root filesystems back to that of the template (the golden image). For the above mechanism to make any sense we should configure the OS in the Template VMto usea separate disk for the user\'s home directory(ies) (e.g. C:\\Users in case of Windows). Qubes automatically exposes an additional private disk to each of the AppVMs exactly for this very purpose. Again, just like it has been done for Linux AppVMs for years.The above feature allows to create lots of Windows AppVMs quickly and with minimal use of disk space, and with an ability to centrally update all the system software in all the AppVMs all at once. Just like for Linux AppVMs.Users should, however, ensure that their license allows for such instantiating of the OS they use in the template. Note that from the technical point of view the OS is installed, and, in case of Windows, also activated, only once: in the template VM. The installed files are never copied, they are only shared with the running instances of AppVMs. Consult your software licensing lawyer.', 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Windows 7 seamless GUI integration coming to Qubes OS!', 'language': None}, 'updated': u'2014-11-27T13:25:04.398+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'link': u'http://theinvisiblethings.blogspot.com/2013/11/windows-7-seamless-gui-integration.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'os', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://1.bp.blogspot.com/-PJN1_VDD1NQ/UpTN4lE_xdI/AAAAAAAAAME/KmnnAnNmMGo/s72-c/windows-seamless-1.png', 'width': u'72', 'height': u'72'}], 'summary': u'<br /><div style="margin-bottom: 0in;">Finally, after months of hard work, seamless mode for Windows 7 AppVMs is coming to Qubes OS! The new Windows Support Tools will be released together with the Qubes OS R2 Beta 3, which we plan to release in the next 1-2 weeks. Here is an obligatory screenshot showing a few Windows apps running in seamless mode integrated onto Qubes trusted desktop (note the usual Qubes trusted decorations around each of the Win7 windows):</div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-PJN1_VDD1NQ/UpTN4lE_xdI/AAAAAAAAAME/KmnnAnNmMGo/s1600/windows-seamless-1.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="225" src="http://1.bp.blogspot.com/-PJN1_VDD1NQ/UpTN4lE_xdI/AAAAAAAAAME/KmnnAnNmMGo/s400/windows-seamless-1.png" width="400" /></a></div><br />  <br /><div style="margin-bottom: 0in;"><span style="font-style: normal;">The seamless mode for Windows AppVMs is not </span><span style="font-style: normal;">yet </span><span style="font-style: normal;">as </span><span style="font-style: normal;">polished</span><span style="font-style: normal;">as the one we have for Linux AppVMs, </span><span style="font-style: normal;">because, unlike what we do for Xorg, the Windows GUI agent is not based on composition buffers extraction. </span><span style="font-style: normal;">This causes some, </span><span style="font-style: normal;">rather</span><span style="font-style: normal;">minor</span><span style="font-style: normal;">, </span><span style="font-style: normal;">cosmetic problems. For example, when we have two overlapping windows from a Win7 AppVM, and move the top window away, its remaining "shadow" will be visible on the underlying window for the duration of the operation. But generally this all works reasonably good, and </span><span style="font-style: normal;">you should not </span><span style="font-style: normal;">really </span><span style="font-style: normal;">feel any slowness </span><span style="font-style: normal;">or heaviness </span><span style="font-style: normal;">compared to Linux AppVMs </span><span style="font-style: normal;">virtualization. It should be noted that we managed to add this seamless support for Windows AppVMs without any changes to our secure GUI virtualization protocol. </span></div><div style="margin-bottom: 0in;"><br /><span style="font-style: normal;">Of course, </span><span style="font-style: normal;">the usual </span><span style="font-style: normal;">Qubes integration features, such as secure inter-VM clipboard and file copy also work for Windows AppVMs </span><span style="font-style: normal;">with the tools installed</span><span style="font-style: normal;">. </span></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">The </span><span style="font-style: normal;">Qubes </span><span style="font-style: normal;">Windows </span><span style="font-style: normal;">S</span><span style="font-style: normal;">upport </span><span style="font-style: normal;">T</span><span style="font-style: normal;">ools </span><span style="font-style: normal;">are proprietary, but they are </span><span style="font-style: normal;">supposed to be installed </span><span style="font-style: normal;">only in the Windows 7 VMs, which themselves contain millions of lines of proprietary code </span><span style="font-style: normal;">already.</span><span style="font-style: normal;"> B</span><span style="font-style: normal;">esides that, the tools </span><span style="font-style: normal;">do not introduce any other modifications to </span><span style="font-style: normal;">the system</span><span style="font-style: normal;">.</span></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; margin-bottom: 0in;">As a special bonus we have also added (and releasing also in R2B3) the support for template-based HVMs. So it will now be possible to do something like this:</div><br />  <br /><div style="margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono, monospace; font-size: x-small;"><span style="font-style: normal;">qvm-create </span><span style="font-style: normal;">--</span><span style="font-style: normal;">hvm work-win7 </span><b><span style="font-style: normal;">--</span></b><span style="font-style: normal;"><b>template win7-x64</b> </span><span style="font-style: normal;">--</span><span style="font-style: normal;">label green</span></span></div><span style="font-family: DejaVu Sans Mono, monospace; font-size: x-small;"><span style="font-style: normal;">qvm-create </span><span style="font-style: normal;">--</span><span style="font-style: normal;">hvm personal-win7 </span><b><span style="font-style: normal;">--</span></b><span style="font-style: normal;"><b>template win7-x64</b> </span><span style="font-style: normal;">--</span><span style="font-style: normal;">label purple</span></span><br /><span style="font-family: DejaVu Sans Mono, monospace; font-size: x-small;"><span style="font-style: normal;">qvm-create</span><span style="font-style: normal;">--</span><span style="font-style: normal;">hvm testing-win7 </span><b><span style="font-style: normal;">--</span></b><span style="font-style: normal;"><b>template win7-x64</b> </span><span style="font-style: normal;">--</span><span style="font-style: normal;">label red</span></span><br /><span style="font-size: x-small;"></span><br /><div style="font-style: normal; margin-bottom: 0in;"><span style="font-size: x-small;"><br /></span></div><span style="font-size: x-small;"> </span>         <span style="font-style: normal;">... telling</span><span style="font-style: normal;"></span><span style="font-style: normal;">Qubes to </span><span style="font-style: normal;">create</span><span style="font-style: normal;"></span><span style="font-style: normal;">three</span><span style="font-style: normal;"> HVM </span><span style="font-style: normal;">AppVMs based on </span><span style="font-style: normal;">th</span><span style="font-style: normal;">e same </span><span style="font-style: normal;">template</span><span style="font-style: normal;">.</span><br /><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">All such template-based</span><span style="font-style: normal;"> </span><span style="font-style: normal;">AppVMs </span><span style="font-style: normal;">use the root filesystem from the Template VM, which is shared in a read-only manner, of course, but Qubes makes it look for the AppVMs as if the root filesystem was </span><span style="font-style: normal;">writable.</span><span style="font-style: normal;">Just like in case of </span><span style="font-style: normal;">Linux AppVMs, the actual writes are stored in COW buffer</span><span style="font-style: normal;">s</span><span style="font-style: normal;">backed by files stored in each of the AppVMs directories. Upon AppVM\'s reboot, tho</span><span style="font-style: normal;">se</span><span style="font-style: normal;">file</span><span style="font-style: normal;">s</span><span style="font-style: normal;"></span><span style="font-style: normal;">are</span><span style="font-style: normal;">discarded, which reverts the VMs\' root filesystems back to that of the template (the \u201cgolden image\u201d). </span></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">For the above mechanism to make </span><span style="font-style: normal;">any </span><span style="font-style: normal;">sense we should configure the </span><span style="font-style: normal;">OS in the </span><span style="font-style: normal;">Template VM</span><span style="font-style: normal;">to </span><span style="font-style: normal;">use</span><span style="font-style: normal;">a separate disk for the user\'s home director</span><span style="font-style: normal;">y(ies</span><span style="font-style: normal;">) (</span><span style="font-style: normal;">e.g. </span><span style="font-style: normal;">C:\\Users in case of Windows). </span><span style="font-style: normal;">Qubes automatically exposes an</span><span style="font-style: normal;"> additional private disk to each of the AppVMs exactly for this very purpose. Again, just like it has been done for Linux AppVMs for years.</span></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">The above feature allows to create lots of Windows AppVMs quickly and with minimal use of disk space, </span><span style="font-style: normal;">and with an ability to centrally </span><span style="font-style: normal;"></span><span style="font-style: normal;">update all the system software in all the AppVMs all at once. </span><span style="font-style: normal;">Just like for Linux AppVMs.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">Users should, however, ensure that the</span><span style="font-style: normal;">i</span><span style="font-style: normal;">r license allows for such instantiating of the OS they use in the template. </span><span style="font-style: normal;">Note that from the technical point of view the OS is installed, and, in case of Windows, also </span><span style="font-style: normal;"><span style="font-style: normal;">activated</span>, only once: in the template VM. The installed files are never copied, they are only </span><i>shared</i><span style="font-style: normal;"> with the running instances of AppVMs. Consult your software licensing lawyer.</span></div>', 'guidislink': True, 'published': u'2013-11-26T18:04:00.001+01:00', u'thr_total': u'10', 'classifier': 'Support Tools'}
{'updated': u'2014-11-27T13:25:17.519+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'hardware', 'updated_parsed': time.struct_time(tm_year=2014, tm_mon=11, tm_mday=27, tm_hour=12, tm_min=25, tm_sec=17, tm_wday=3, tm_yday=331, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2013, tm_mon=9, tm_mday=23, tm_hour=17, tm_min=35, tm_sec=0, tm_wday=0, tm_yday=266, tm_isdst=0), 'title': u"Thoughts on Intel's upcoming Software Guard Extensions (Part 2)", 'pred': u'paper', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7969805790285882812/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=7969805790285882812', 'type': u'text/html', 'rel': u'replies', 'title': u'13 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7969805790285882812', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7969805790285882812', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2013/09/thoughts-on-intels-upcoming-software.html', 'type': u'text/html', 'rel': u'alternate', 'title': u"Thoughts on Intel's upcoming Software Guard Extensions (Part 2)"}], 'summary': u'<br /><div style="font-weight: normal; margin-bottom: 0in;">In the <a href="http://theinvisiblethings.blogspot.com/2013/08/thoughts-on-intels-upcoming-software.html">first part of this article</a> published a few weeks ago, I have discussed the basics of Intel SGX technology, and also discussed challenges with using SGX for securing desktop systems, specifically focusing on the problem of trusted input and output. In this part we will look at some other aspects of Intel SGX, and we will start with a discussion of how it could be used to create a truly irreversible software.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>SGX Blackboxing \u2013  </b><b>A</b><b>pps and </b><b>malware </b><b>that cannot be </b><b>reverse </b><b>engineered</b><b>?</b></div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">A nice feature of Intel SGX is that the processor automatically encrypts the content of SGX-protected memory pages whenever it leaves the processor caches and is stored in DRAM. In other words the code and data used by SGX enclaves never leave the processor in plaintext.</div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">This feature, no doubt influenced by the DRM industry, might profoundly change our approach as to who controls our computers really. This is because it will now be easy to create an application, or malware for that matter, that just cannot be reversed engineered in any way. No more IDA, no more debuggers, not even kernel debuggers, could reveal the actual intentions of the EXE file we\'re about to run.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">Consider </span><span style="font-weight: normal;">the following </span><span style="font-weight: normal;">scena</span><span style="font-weight: normal;">rio, </span><span style="font-weight: normal;">where a user downloads an executable, say blackpill.exe, which in fact logically consists of three parts:</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><ol><li><div style="margin-bottom: 0in;"><span style="font-weight: normal;">A  </span><b>1st stage loader</b><span style="font-weight: normal;"> (</span><b>SGX loader)</b><span style="font-weight: normal;"> which  is unencrypted, and </span><span style="font-weight: normal;">which</span><span style="font-weight: normal;"> task is to setup an SGX enclave, copy the rest of the code there,  </span><span style="font-weight: normal;">specifically the 2</span><sup><span style="font-weight: normal;">nd</span></sup><span style="font-weight: normal;"> stage loader, and then start executing the 2</span><sup><span style="font-weight: normal;">nd</span></sup><span style="font-weight: normal;"> stage loader...</span></div></li><li><div style="margin-bottom: 0in;"><span style="font-weight: normal;">The  </span><b>2nd stage loader</b><span style="font-weight: normal;">,  which starts executing within the enclave, perform</span><span style="font-weight: normal;">s</span><span style="font-weight: normal;"> remote attestation with an external server and, in case the remote  attestation completes successfully, </span><span style="font-weight: normal;">obtains</span><span style="font-weight: normal;"> </span><span style="font-weight: normal;">a secret </span><span style="font-weight: normal;">key  from the remote server. This code is also delivered in plaintext  </span><span style="font-weight: normal;">too</span><span style="font-weight: normal;">.</span></div></li><li><div style="margin-bottom: 0in;"><span style="font-weight: normal;">Finally  the </span><b>encrypted blob</b><span style="font-weight: normal;"> which can only be decrypted using the key obtained by the 2</span><sup><span style="font-weight: normal;">nd</span></sup><span style="font-weight: normal;"> stage loader from the remote server, </span><span style="font-weight: normal;">and  which contains the actual logic of the application (or malware).</span></div></li></ol><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">We can easily see that there is no way for the user to figure out what the code from the encrypted blob is going to do on her computer. </span><span style="font-weight: normal;">This is because the key will be released by the remote server only if the </span><span style="font-weight: normal;">2</span><sup><span style="font-weight: normal;">nd</span></sup><span style="font-weight: normal;"></span><span style="font-weight: normal;">stage loader can prove via </span><span style="font-weight: normal;">r</span><span style="font-weight: normal;">emote </span><span style="font-weight: normal;">a</span><span style="font-weight: normal;">ttestation that it indeed executes within a protect SGX enclave and that it is the original unmodified loader code that the application\'s author created. Should one bit of this loader be modified, or should it be attempted to run outside of an SGX enclave, or within a somehow misconfigured SGX enclave, then the </span><span style="font-weight: normal;">r</span><span style="font-weight: normal;">emote </span><span style="font-weight: normal;">a</span><span style="font-weight: normal;">ttestation </span><span style="font-weight: normal;">would</span><span style="font-weight: normal;">fail and the key will not be obtained.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">And once the key is obtained, it is available only within the SGX enclave. It cannot be found in DRAM or on the memory bus, even if the user had access to expensive DRAM emulators or bus sniffers. And the key cannot also be mishandled by the code that runs in the SGX enclave, because remote attestation also proved that the loader code has not been modified, and the author wrote the loader specifically not to mishandle the key in any way (e.g. not to write it out somewhere to unprotected memory, or store on the disk). Now, the loader uses the key to decrypt the payload, and this decrypted payload remains within secure enclave, never leaving it, just like the key. It\'s data  never leaves the enclave either...</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">One little catch is how the key is actually sent to the SGX-protected enclave so that it could not be spoofed in the middle? Of course it must be encrypted, but to which key? Well, we can have our 2<sup>nd</sup>stage loader generate a new key pair and send the public key to the remote server \u2013 the server will then use this public key to send the actual decryption key encrypted with this loader\'s public key. This is almost good, except for the fact that this scheme is not immune to a classic main in the middle attack. The solution to this is easy, though \u2013 if I understand correctly the description of the  new Quoting and Sealing operations performed by the Quoting Enclave \u2013 we can include the generated public key hash as part of the data that will be signed and put into the Quote message, so the remote sever can be assured also that the public key originates from the actual code running in the SGX enclave and not from Mallory somewhere in the middle.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">So, what does the application really do? Does it do exactly what has been advertised by its author? Or does it also \u201caccidentally\u201d sniffs some system memory or even reads out disk sectors and sends the gathered data to a remote server, encrypted, of course? We cannot know this. And that\'s quite worrying, I think.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">One might say that we do accept all the proprietary software blindly anyway \u2013 after all who fires up IDA to review MS Office before use? Or MS Windows? Or any other application? Probably very few people indeed. But the point is: this could be done, and actually some brave souls do that. This could be done even if the author used some advanced form of obfuscation. Can be done, even if taking lots of time. Now, with Intel SGX it suddenly cannot be done anymore. That\'s quite a revolution, complete change of  the rules. We\'re no longer masters of our little universe \u2013 the computer system \u2013 and now somebody else is.</div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Unless there was a way for \u201cCertified Antivirus companies\u201d to get around SGX protection.... (see below for more discussion on this).</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>...And some good applications of SGX</b></div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">The SGX blackboxing has, however, some good usages too, beyond protecting the Hollywood productions, and making malware un-analyzable...</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">One particularly attractive possibility is the \u201ctrusted cloud\u201d where VMs offered to users could not be eavesdropped or tampered by the cloud provider admins. <a href="http://theinvisiblethings.blogspot.com/2011/12/trusted-execution-in-untrusted-cloud.html">I wrote</a> about such possibility two years ago, but with Intel SGX this could be done much, much better. This will, of course, require a specially written hypervisor which would be setting up SGX containers for each of the VM, and then the VM could authenticate to the user and prove, via remote attestation, that it is executing inside a protected and properly set SGX enclave. Note how this time we do not require the hypervisor to authenticate to the users  \u2013 we just don\'t care, if our code correctly attests that it is in a correct SGX, it\'s all fine.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Suddenly Google could no longer collect and process your calendar, email, documents, and medial records! Or how about a tor node that could prove to users that it is not backdoored by its own admin and does not keep a log of how connections were routed? Or a safe bitcoin web-based wallet? It\'s hard to overestimate how good such a technology might be for bringing privacy to the wide society of users...</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Assuming, of course, there was no backdoor for the NSA to get around the SGX protection and ruin this all goodness...(see below for more discussion on this).</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>New OS and VMM architectures</b></div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">In the paragraph above I mentioned that we will need specially written hypervisors (VMMs) that will be making use of SGX in order to protect the user\'s VMs against themselves (i.e. against the hypervisor). We could go further and put other components of a VMM into protected SGX enclaves, things that we currently, in Qubes OS, keep in separate Service VMs, such as networking stacks, USB stacks, etc. Remember that Intel SGX provides convenient mechanism to build inter-enclave secure communication channels.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">We could also take the \u201cGUI domain\u201d (currently this is just Dom0 in Qubes OS) and move it into a separate SGX enclave. If only Intel came up with solid protected input and output technologies that would work well with SGX, then this would suddenly make whole lots of sense (unlike currently where <a href="http://theinvisiblethings.blogspot.com/2010/09/untrusting-your-gui-subsystem.html">it is very challenging</a>). What we win this way is that no longer a bug in the hypervisor should be critical, as it would be now a long way for the attacker who compromised the hypervisor to steal any real secret of the user, because there are no secrets in the hypervisor itself.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">In this setup the two most critical enclaves are: 1) the GUI enclave, of course, and 2) the admin enclave, although it is thinkable that the latter could be made reasonably deprivileged in that it might only be allowed to create/remove VMs, setup networking and other policies for them, but no longer be able to read and write memory of the VMs (Anti Snowden Protection, ASP?).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">And... why use hypervisors? Why not use the same approach to compartmentalize ordinary operating systems? Well, this could be done, of course, but it would require considerable rewrite of the systems, essentially turning them into microkernels (except for the fact that the microkernel would no longer need to be trusted), as well as the applications and drivers, and we know that this will never happen. Again, let me repeat one more time: the whole point of using virtualization for security is that it wraps up all the huge APIs of an ordinary OS, like Win32 or POSIX, or OSX, into a virtual machine that itself requires orders of magnitude simpler interface to/from the outside world (especially true for paravirtualized VMs), and all this without the need to rewrite the applications.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>Trusting Intel \u2013 Next Generation of Backdooring?</b></div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">We have seen that SGX offers a number of attractive functionality that could potentially make our digital systems more secure and 3<sup>rd</sup>party servers more trusted. But does it really?</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">The obvious question, especially in the light of recent revelations about NSA backdooring everything and the kitchen sink, is whether Intel will have backdoors allowing \u201cprivileged entities\u201d to bypass SGX protections?</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>Traditional CPU backdooring</b></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Of course they could, no question about it. But one can say that Intel (as well as AMD) might have been having backdoors in their processors for a long time, not necessarily in anything related to SGX, TPM, TXT, AMT, etc. Intel could have built backdoors into simple MOV or ADD instructions, in such a way that they would automatically disable ring/page protections whenever executed with some magic arguments. <a href="http://theinvisiblethings.blogspot.com/2009/06/more-thoughts-on-cpu-backdoors.html">I wrote</a> more about this many years ago. </div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">The problem with those \u201ctraditional\u201d backdoors is that Intel (or a certain agency) could be caught using it, and this might have catastrophic consequences for Intel. Just imagine somebody discovered (during a forensic analysis of an  incident) that doing:</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span>MOV eax, $deadbeef</span></div><span></span><div style="margin-bottom: 0in;"><span>MOV ebx, $babecafe</span></div><span></span><div style="margin-bottom: 0in;"><span>ADD eax, ebx</span></div><span></span><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">...causes ring elevation for the next 1000 cycles.  All the processors affected would suddenly became equivalents of the old 8086 and would have to be replaced. Quite a marketing nightmare I think, no?</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>Next-generation CPU backdooring</b></div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">But as more and more crypto and security mechanisms got delegated from software to the processor, the more likely it becomes for Intel (or AMD) to insert really \u201cplausibly deniable\u201d backdoors into processors.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Consider e.g. <a href="http://people.umass.edu/gbecker/BeckerChes13.pdf">the recent paper</a> on how to plant a backdoor into the Intel\'s Ivy Bridge\'s random number generator (usable via the new RDRAND instruction). The backdoor reduces the actual entropy of the generator making it feasible to later brute-force any crypto which uses keys generated via the weakened generator. The paper goes into great lengths describing how this backdoor could be injected by a malicious foundry (e.g. one in China), behind the Intel\'s back, which is achieved by implementing the backdoor entirely below the HDL level. The paper takes a \u201cclassic\u201d view on the threat model with Good Americans (Intel engineers)  and the Bad Chinese (foundry operators/employees). Nevertheless, it should be obvious that Intel could have planted such a backdoor without any effort or challenge described in the paper, because they could do so at any level, not necessarily below HDL.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">But backdooring an RNG is still something that leaves traces. Even though the backdoored processor can apparently pass all external \u201crandomness\u201d testes, such as the NIST testsuite, they still might be caught. Perhaps because somebody will buy 1000 processors and will run them for a year and will note down all the numbers generated and then conclude that the distribution is quite not right. Or something like that. Or perhaps because somebody will reverse-engineer the processor  and specifically the RNG circuitry and notice some gates are shorted to GND. Or perhaps because somebody at this \u201cBad Chinese\u201d foundry will notice that.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Let\'s now get back to Intel SGX -- what is the actual Root of Trust for this technology? Of course, the processor, just like for the old ring3/ring0 separation. But for SGX there is additional Root of Trust which is used for remote attestation, and this is the private key(s) used for signing the Quote Messages.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">If the signing private key somehow got into the hands of an adversary, the remote attestation breaks down completely. Suddenly the \u201cSGX Blackboxed\u201d apps and malware can readily be decrypted, disassembled and reverse engineered, because the adversary can now emulate their execution step by step under a debugger and still pass the remote attestation. We might say this is good, as we don\'t want irreversible malware and apps. But then, suddenly, we also loose our attractive \u201ctrusted cloud\u201d too \u2013 now there is nothing that could stop the adversary, who has the private signing key, to run our trusted VM outside of SGX, yet still reporting to us that it is SGX-protected. And so, while we believe that our trusted VM should be trusted and unsniffable, and while we devote all our deepest secrets to it, the adversary can read them all like on a plate.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">And the worst thing is \u2013 even if somebody took such a processor, disassembled it into pieces, analyzed transitor-by-transitor, recreated HDL, analyzed it all, then still it all would look good. Because the backdoor is... the leaked private key that is now also in the hands of the adversary, and there is no way to prove it by looking at the processor alone.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">As I understand, the whole idea of having a separate TPM chip, was exactly to make such backdoor-by-leaking-keys more difficult, because, while we\'re all forced to use Intel or AMD processors today, it is possible that e.g. every country can produce their own TPM, as it\'s million times less complex than a modern processor. So, perhaps Russia could use their own TPMs, which they might be reasonably sure they use private keys which have not be handed over to the NSA.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">However, as I mentioned in the first part of this article, sadly, this scheme doesn\'t work that well. The processor can still cheat the external TPM module. For example, in case of an Intel TXT and TPM \u2013 the processor can produce incorrect PCR values in response to certain trigger \u2013 in that case it no longer matters that the TPM is trusted and keys not leaked, because the TPM will sign wrong values. On the other hand we go back now to using \u201ctraditional\u201d backdoors in the processors, whose main disadvantage is that people might got cought using them (e.g. somebody analyzed an exploit which turns out to be triggering correct Quote message despite incorrect PCRs).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">So, perhaps, the idea of separate TPM actually does make some sense after all?</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>What about just accidental bugs in Intel products?</b></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Conspiracy theories aside, what about accidental bugs? What are the chances of SGX being really foolproof, at least against those unlucky adversaries who didn\'t get access to the private signing keys? The Intel\'s processor have become quite a complex beasts these days. And if you also thrown in the Memory Controller Hub, it\'s unimaginably complex beast.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Let\'s take a quick tour back discussing some spectacular attacks against Intel \u201chardware\u201d security mechanisms. I wrote \u201chardware\u201d in quotation marks, because really most of these technologies is software, like most of the things in electronics these days. Nevertheless the \u201chardware enforced security\u201d does have a special appeal to lots of people, often creating an impression that these must be some ultimate unbreakable technologies....</div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">I think it all started with our <a href="http://invisiblethingslab.com/resources/bh08/part2-full.pdf">exploit against Intel Q35 chipset</a> (slides 15+) demonstrated back in 2008 which was the first attack allowing to compromise, otherwise hardware-protected, SMM memory on Intel platforms (some other attacks against SMM shown before assumed the SMM was not protected, which was the case on many older platforms).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">This was then shortly followed by <a href="http://invisiblethingslab.com/resources/bh09dc/Attacking%20Intel%20TXT%20-%20paper.pdf">another paper</a> from us about attacking Intel Trusted Execution Technology (TXT), which found out and exploited a fact that TXT-loaded code was not protected against code running in the SMM mode. We used our previous attack on Q35 against SMM, as well as found a couple of new ones, in order to compromise SMM, plant a backdoor there, and then compromise TXT-loaded code from there. The issue highlighted in the paper has never really been correctly patched. Intel has spent years developing something they called STM, which was supposed to be a thin hypervisor for SMM code sandboxing. I don\'t know if the Intel STM specification has eventually been made public, and how many bugs it might be introducing on systems using it, or how much inaccurate it might be.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">In the following years we presented two more devastating attacks against Intel TXT (none of which depending on compromised SMM): <a href="http://invisiblethingslab.com/resources/misc09/Another%20TXT%20Attack.pdf">one</a>which exploited a subtle bug in the processor SINIT module allowing to misconfigure VT-d protections for TXT-loaded code, and <a href="http://www.invisiblethingslab.com/resources/2011/Attacking_Intel_TXT_via_SINIT_hijacking.pdf">another one</a> exploiting a classic buffer overflow bug also in the processor\'s SINIT module, allowing this time not only to fully bypass TXT, but also fully bypass Intel Launch Control Policy and hijack SMM (several years after our original papers on attacking SMM the old bugs got patched and so this was also attractive as yet another way to compromise SMM for whatever other reason).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Invisible Things Lab has also <a href="http://invisiblethingslab.com/resources/bh09usa/Attacking%20Intel%20BIOS.pdf">presented</a> first, and as far as I\'m aware still the only one, attack on Intel BIOS that allowed to reflash the BIOS despite Intel\'s strong \u201chardware\u201d protection mechanism to allow only digitally signed code to be flashed. We also <a href="http://invisiblethingslab.com/resources/bh09usa/Ring%20-3%20Rootkits.pdf">found out</a>about secret processor in the chipset used for execution of Intel AMT code and we found a way to inject our custom code into this special AMT environment and have it executed in parallel with the main system, unconstrained by any other entity.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">This is quite a list of Intel significant security failures, which I think gives something to think about. At the very least that just because something is \u201chardware enforced\u201d or \u201chardware protected\u201d doesn\'t mean it is foolproof against software exploits. Because, it should be clearly said, all our exploits mentioned above were pure software attacks.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">But, to be fair, we have never been able to break Intel core memory protection (ring separation, page protection) or Intel VT-x. Rafal Wojtczuk has probably came closest with <a href="https://media.blackhat.com/bh-us-12/Briefings/Wojtczuk/BH_US_12_Wojtczuk_A_Stitch_In_Time_WP.pdf">his SYSRET attack</a>in an attempt to break the ring separation, but ultimately the Intel\'s excuse was that the problem was on the side of the OS developers who didn\'t notice subtle differences in the behavior of SYSRET between AMD and Intel processors, and didn\'t make their kernel code defensive enough against Intel processor\'s odd behavior.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">We have also <a href="http://www.invisiblethingslab.com/resources/2011/Software%20Attacks%20on%20Intel%20VT-d.pdf">demonstrated</a> rather impressive attacks bypassing Intel VT-d, but, again, to be fair, we should mention that the attacks were possible only on those platforms which Intel didn\'t equip with so called Interrupt Remapping hardware, and that Intel knew that such hardware was indeed needed and was planning it a few years before our attacks were published.</div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">So, is Intel SGX gonna be as insecure as Intel TXT, or as secure as Intel VT-x....?</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>The bottom line</b></div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Intel SGX promises some incredible functionality \u2013 to create protected execution environments (called enclaves) within untrusted (compromised) Operating System. However, for SGX to be of any use on a client OS, it is important that we also have technologies to implement trusted output and input from/to the SGX enclave. Intel currently provides little details about the former and openly admits it doesn\'t have the later.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Still, even without trusted input and output technologies, SGX might be very useful in bringing trust to the cloud, by allowing users to create trusted VMs inside untrusted provider infrastructure. However, at the same time, it could allow to create applications and malware that could not be reversed engineered. It\'s quote ironic that those two applications (trusted cloud and irreversible malware) are mutually bound together, so that if one wanted to add a backdoor to allow A/V industry to be able to analyze SGX-protected malware, then this very same backdoor could be used to weaken the guarantees of the trustworthiness of the user VMs in the cloud.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Finally, a problem that is hard to ignore today, in the post-Snowden world, is the ease of backdooring this technology by Intel itself. In fact Intel doesn\'t need to add anything to their processors \u2013 all they need to do is to give away the private signing keys used by SGX for remote attestation. This makes for a perfectly deniable backdoor \u2013 nobody could catch Intel on this, even if the processor was analyzed transistor-by-transistor, HDL line-by-line.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">As a system architect I would love to have Intel SGX, and I would love to believe it is secure. It would allow to further decompose Qubes OS, specifically get rid of the hypervisor from the TCB, and probably even more.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">  </div><div style="font-weight: normal; margin-bottom: 0in;">Special thanks to Oded Horowitz for turning my attention towards Intel SGX.</div><div style="font-weight: normal; margin-bottom: 0in;"></div>', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u"In the first part of this article published a few weeks ago, I have discussed the basics of Intel SGX technology, and also discussed challenges with using SGX for securing desktop systems, specifically focusing on the problem of trusted input and output. In this part we will look at some other aspects of Intel SGX, and we will start with a discussion of how it could be used to create a truly irreversible software.SGX Blackboxing \u2013  Apps and malware that cannot be reverse engineered?A nice feature of Intel SGX is that the processor automatically encrypts the content of SGX-protected memory pages whenever it leaves the processor caches and is stored in DRAM. In other words the code and data used by SGX enclaves never leave the processor in plaintext.This feature, no doubt influenced by the DRM industry, might profoundly change our approach as to who controls our computers really. This is because it will now be easy to create an application, or malware for that matter, that just cannot be reversed engineered in any way. No more IDA, no more debuggers, not even kernel debuggers, could reveal the actual intentions of the EXE file we're about to run.Consider the following scenario, where a user downloads an executable, say blackpill.exe, which in fact logically consists of three parts:A  1st stage loader (SGX loader) which  is unencrypted, and which task is to setup an SGX enclave, copy the rest of the code there,  specifically the 2nd stage loader, and then start executing the 2nd stage loader...The  2nd stage loader,  which starts executing within the enclave, performs remote attestation with an external server and, in case the remote  attestation completes successfully, obtains a secret key  from the remote server. This code is also delivered in plaintext  too.Finally  the encrypted blob which can only be decrypted using the key obtained by the 2nd stage loader from the remote server, and  which contains the actual logic of the application (or malware).We can easily see that there is no way for the user to figure out what the code from the encrypted blob is going to do on her computer. This is because the key will be released by the remote server only if the 2ndstage loader can prove via remote attestation that it indeed executes within a protect SGX enclave and that it is the original unmodified loader code that the application's author created. Should one bit of this loader be modified, or should it be attempted to run outside of an SGX enclave, or within a somehow misconfigured SGX enclave, then the remote attestation wouldfail and the key will not be obtained.And once the key is obtained, it is available only within the SGX enclave. It cannot be found in DRAM or on the memory bus, even if the user had access to expensive DRAM emulators or bus sniffers. And the key cannot also be mishandled by the code that runs in the SGX enclave, because remote attestation also proved that the loader code has not been modified, and the author wrote the loader specifically not to mishandle the key in any way (e.g. not to write it out somewhere to unprotected memory, or store on the disk). Now, the loader uses the key to decrypt the payload, and this decrypted payload remains within secure enclave, never leaving it, just like the key. It's data  never leaves the enclave either...One little catch is how the key is actually sent to the SGX-protected enclave so that it could not be spoofed in the middle? Of course it must be encrypted, but to which key? Well, we can have our 2ndstage loader generate a new key pair and send the public key to the remote server \u2013 the server will then use this public key to send the actual decryption key encrypted with this loader's public key. This is almost good, except for the fact that this scheme is not immune to a classic main in the middle attack. The solution to this is easy, though \u2013 if I understand correctly the description of the  new Quoting and Sealing operations performed by the Quoting Enclave \u2013 we can include the generated public key hash as part of the data that will be signed and put into the Quote message, so the remote sever can be assured also that the public key originates from the actual code running in the SGX enclave and not from Mallory somewhere in the middle.So, what does the application really do? Does it do exactly what has been advertised by its author? Or does it also accidentally sniffs some system memory or even reads out disk sectors and sends the gathered data to a remote server, encrypted, of course? We cannot know this. And that's quite worrying, I think.One might say that we do accept all the proprietary software blindly anyway \u2013 after all who fires up IDA to review MS Office before use? Or MS Windows? Or any other application? Probably very few people indeed. But the point is: this could be done, and actually some brave souls do that. This could be done even if the author used some advanced form of obfuscation. Can be done, even if taking lots of time. Now, with Intel SGX it suddenly cannot be done anymore. That's quite a revolution, complete change of  the rules. We're no longer masters of our little universe \u2013 the computer system \u2013 and now somebody else is.Unless there was a way for Certified Antivirus companies to get around SGX protection.... (see below for more discussion on this)....And some good applications of SGXThe SGX blackboxing has, however, some good usages too, beyond protecting the Hollywood productions, and making malware un-analyzable...One particularly attractive possibility is the trusted cloud where VMs offered to users could not be eavesdropped or tampered by the cloud provider admins. I wrote about such possibility two years ago, but with Intel SGX this could be done much, much better. This will, of course, require a specially written hypervisor which would be setting up SGX containers for each of the VM, and then the VM could authenticate to the user and prove, via remote attestation, that it is executing inside a protected and properly set SGX enclave. Note how this time we do not require the hypervisor to authenticate to the users  \u2013 we just don't care, if our code correctly attests that it is in a correct SGX, it's all fine.Suddenly Google could no longer collect and process your calendar, email, documents, and medial records! Or how about a tor node that could prove to users that it is not backdoored by its own admin and does not keep a log of how connections were routed? Or a safe bitcoin web-based wallet? It's hard to overestimate how good such a technology might be for bringing privacy to the wide society of users...Assuming, of course, there was no backdoor for the NSA to get around the SGX protection and ruin this all goodness...(see below for more discussion on this).New OS and VMM architecturesIn the paragraph above I mentioned that we will need specially written hypervisors (VMMs) that will be making use of SGX in order to protect the user's VMs against themselves (i.e. against the hypervisor). We could go further and put other components of a VMM into protected SGX enclaves, things that we currently, in Qubes OS, keep in separate Service VMs, such as networking stacks, USB stacks, etc. Remember that Intel SGX provides convenient mechanism to build inter-enclave secure communication channels.We could also take the GUI domain (currently this is just Dom0 in Qubes OS) and move it into a separate SGX enclave. If only Intel came up with solid protected input and output technologies that would work well with SGX, then this would suddenly make whole lots of sense (unlike currently where it is very challenging). What we win this way is that no longer a bug in the hypervisor should be critical, as it would be now a long way for the attacker who compromised the hypervisor to steal any real secret of the user, because there are no secrets in the hypervisor itself.In this setup the two most critical enclaves are: 1) the GUI enclave, of course, and 2) the admin enclave, although it is thinkable that the latter could be made reasonably deprivileged in that it might only be allowed to create/remove VMs, setup networking and other policies for them, but no longer be able to read and write memory of the VMs (Anti Snowden Protection, ASP?).And... why use hypervisors? Why not use the same approach to compartmentalize ordinary operating systems? Well, this could be done, of course, but it would require considerable rewrite of the systems, essentially turning them into microkernels (except for the fact that the microkernel would no longer need to be trusted), as well as the applications and drivers, and we know that this will never happen. Again, let me repeat one more time: the whole point of using virtualization for security is that it wraps up all the huge APIs of an ordinary OS, like Win32 or POSIX, or OSX, into a virtual machine that itself requires orders of magnitude simpler interface to/from the outside world (especially true for paravirtualized VMs), and all this without the need to rewrite the applications.Trusting Intel \u2013 Next Generation of Backdooring?We have seen that SGX offers a number of attractive functionality that could potentially make our digital systems more secure and 3rdparty servers more trusted. But does it really?The obvious question, especially in the light of recent revelations about NSA backdooring everything and the kitchen sink, is whether Intel will have backdoors allowing privileged entities to bypass SGX protections?Traditional CPU backdooringOf course they could, no question about it. But one can say that Intel (as well as AMD) might have been having backdoors in their processors for a long time, not necessarily in anything related to SGX, TPM, TXT, AMT, etc. Intel could have built backdoors into simple MOV or ADD instructions, in such a way that they would automatically disable ring/page protections whenever executed with some magic arguments. I wrote more about this many years ago. The problem with those traditional backdoors is that Intel (or a certain agency) could be caught using it, and this might have catastrophic consequences for Intel. Just imagine somebody discovered (during a forensic analysis of an  incident) that doing:MOV eax, $deadbeefMOV ebx, $babecafeADD eax, ebx...causes ring elevation for the next 1000 cycles.  All the processors affected would suddenly became equivalents of the old 8086 and would have to be replaced. Quite a marketing nightmare I think, no?Next-generation CPU backdooringBut as more and more crypto and security mechanisms got delegated from software to the processor, the more likely it becomes for Intel (or AMD) to insert really plausibly deniable backdoors into processors.Consider e.g. the recent paper on how to plant a backdoor into the Intel's Ivy Bridge's random number generator (usable via the new RDRAND instruction). The backdoor reduces the actual entropy of the generator making it feasible to later brute-force any crypto which uses keys generated via the weakened generator. The paper goes into great lengths describing how this backdoor could be injected by a malicious foundry (e.g. one in China), behind the Intel's back, which is achieved by implementing the backdoor entirely below the HDL level. The paper takes a classic view on the threat model with Good Americans (Intel engineers)  and the Bad Chinese (foundry operators/employees). Nevertheless, it should be obvious that Intel could have planted such a backdoor without any effort or challenge described in the paper, because they could do so at any level, not necessarily below HDL.But backdooring an RNG is still something that leaves traces. Even though the backdoored processor can apparently pass all external randomness testes, such as the NIST testsuite, they still might be caught. Perhaps because somebody will buy 1000 processors and will run them for a year and will note down all the numbers generated and then conclude that the distribution is quite not right. Or something like that. Or perhaps because somebody will reverse-engineer the processor  and specifically the RNG circuitry and notice some gates are shorted to GND. Or perhaps because somebody at this Bad Chinese foundry will notice that.Let's now get back to Intel SGX -- what is the actual Root of Trust for this technology? Of course, the processor, just like for the old ring3/ring0 separation. But for SGX there is additional Root of Trust which is used for remote attestation, and this is the private key(s) used for signing the Quote Messages.If the signing private key somehow got into the hands of an adversary, the remote attestation breaks down completely. Suddenly the SGX Blackboxed apps and malware can readily be decrypted, disassembled and reverse engineered, because the adversary can now emulate their execution step by step under a debugger and still pass the remote attestation. We might say this is good, as we don't want irreversible malware and apps. But then, suddenly, we also loose our attractive trusted cloud too \u2013 now there is nothing that could stop the adversary, who has the private signing key, to run our trusted VM outside of SGX, yet still reporting to us that it is SGX-protected. And so, while we believe that our trusted VM should be trusted and unsniffable, and while we devote all our deepest secrets to it, the adversary can read them all like on a plate.And the worst thing is \u2013 even if somebody took such a processor, disassembled it into pieces, analyzed transitor-by-transitor, recreated HDL, analyzed it all, then still it all would look good. Because the backdoor is... the leaked private key that is now also in the hands of the adversary, and there is no way to prove it by looking at the processor alone.As I understand, the whole idea of having a separate TPM chip, was exactly to make such backdoor-by-leaking-keys more difficult, because, while we're all forced to use Intel or AMD processors today, it is possible that e.g. every country can produce their own TPM, as it's million times less complex than a modern processor. So, perhaps Russia could use their own TPMs, which they might be reasonably sure they use private keys which have not be handed over to the NSA.However, as I mentioned in the first part of this article, sadly, this scheme doesn't work that well. The processor can still cheat the external TPM module. For example, in case of an Intel TXT and TPM \u2013 the processor can produce incorrect PCR values in response to certain trigger \u2013 in that case it no longer matters that the TPM is trusted and keys not leaked, because the TPM will sign wrong values. On the other hand we go back now to using traditional backdoors in the processors, whose main disadvantage is that people might got cought using them (e.g. somebody analyzed an exploit which turns out to be triggering correct Quote message despite incorrect PCRs).So, perhaps, the idea of separate TPM actually does make some sense after all?What about just accidental bugs in Intel products?Conspiracy theories aside, what about accidental bugs? What are the chances of SGX being really foolproof, at least against those unlucky adversaries who didn't get access to the private signing keys? The Intel's processor have become quite a complex beasts these days. And if you also thrown in the Memory Controller Hub, it's unimaginably complex beast.Let's take a quick tour back discussing some spectacular attacks against Intel hardware security mechanisms. I wrote hardware in quotation marks, because really most of these technologies is software, like most of the things in electronics these days. Nevertheless the hardware enforced security does have a special appeal to lots of people, often creating an impression that these must be some ultimate unbreakable technologies....I think it all started with our exploit against Intel Q35 chipset (slides 15+) demonstrated back in 2008 which was the first attack allowing to compromise, otherwise hardware-protected, SMM memory on Intel platforms (some other attacks against SMM shown before assumed the SMM was not protected, which was the case on many older platforms).This was then shortly followed by another paper from us about attacking Intel Trusted Execution Technology (TXT), which found out and exploited a fact that TXT-loaded code was not protected against code running in the SMM mode. We used our previous attack on Q35 against SMM, as well as found a couple of new ones, in order to compromise SMM, plant a backdoor there, and then compromise TXT-loaded code from there. The issue highlighted in the paper has never really been correctly patched. Intel has spent years developing something they called STM, which was supposed to be a thin hypervisor for SMM code sandboxing. I don't know if the Intel STM specification has eventually been made public, and how many bugs it might be introducing on systems using it, or how much inaccurate it might be.In the following years we presented two more devastating attacks against Intel TXT (none of which depending on compromised SMM): onewhich exploited a subtle bug in the processor SINIT module allowing to misconfigure VT-d protections for TXT-loaded code, and another one exploiting a classic buffer overflow bug also in the processor's SINIT module, allowing this time not only to fully bypass TXT, but also fully bypass Intel Launch Control Policy and hijack SMM (several years after our original papers on attacking SMM the old bugs got patched and so this was also attractive as yet another way to compromise SMM for whatever other reason).Invisible Things Lab has also presented first, and as far as I'm aware still the only one, attack on Intel BIOS that allowed to reflash the BIOS despite Intel's strong hardware protection mechanism to allow only digitally signed code to be flashed. We also found outabout secret processor in the chipset used for execution of Intel AMT code and we found a way to inject our custom code into this special AMT environment and have it executed in parallel with the main system, unconstrained by any other entity.This is quite a list of Intel significant security failures, which I think gives something to think about. At the very least that just because something is hardware enforced or hardware protected doesn't mean it is foolproof against software exploits. Because, it should be clearly said, all our exploits mentioned above were pure software attacks.But, to be fair, we have never been able to break Intel core memory protection (ring separation, page protection) or Intel VT-x. Rafal Wojtczuk has probably came closest with his SYSRET attackin an attempt to break the ring separation, but ultimately the Intel's excuse was that the problem was on the side of the OS developers who didn't notice subtle differences in the behavior of SYSRET between AMD and Intel processors, and didn't make their kernel code defensive enough against Intel processor's odd behavior.We have also demonstrated rather impressive attacks bypassing Intel VT-d, but, again, to be fair, we should mention that the attacks were possible only on those platforms which Intel didn't equip with so called Interrupt Remapping hardware, and that Intel knew that such hardware was indeed needed and was planning it a few years before our attacks were published.So, is Intel SGX gonna be as insecure as Intel TXT, or as secure as Intel VT-x....?The bottom lineIntel SGX promises some incredible functionality \u2013 to create protected execution environments (called enclaves) within untrusted (compromised) Operating System. However, for SGX to be of any use on a client OS, it is important that we also have technologies to implement trusted output and input from/to the SGX enclave. Intel currently provides little details about the former and openly admits it doesn't have the later.Still, even without trusted input and output technologies, SGX might be very useful in bringing trust to the cloud, by allowing users to create trusted VMs inside untrusted provider infrastructure. However, at the same time, it could allow to create applications and malware that could not be reversed engineered. It's quote ironic that those two applications (trusted cloud and irreversible malware) are mutually bound together, so that if one wanted to add a backdoor to allow A/V industry to be able to analyze SGX-protected malware, then this very same backdoor could be used to weaken the guarantees of the trustworthiness of the user VMs in the cloud.Finally, a problem that is hard to ignore today, in the post-Snowden world, is the ease of backdooring this technology by Intel itself. In fact Intel doesn't need to add anything to their processors \u2013 all they need to do is to give away the private signing keys used by SGX for remote attestation. This makes for a perfectly deniable backdoor \u2013 nobody could catch Intel on this, even if the processor was analyzed transistor-by-transistor, HDL line-by-line.As a system architect I would love to have Intel SGX, and I would love to believe it is secure. It would allow to further decompose Qubes OS, specifically get rid of the hypervisor from the TCB, and probably even more.  Special thanks to Oded Horowitz for turning my attention towards Intel SGX.", 'language': None}], 'guidislink': True, 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u"Thoughts on Intel's upcoming Software Guard Extensions (Part 2)", 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2013/09/thoughts-on-intels-upcoming-software.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2013-09-23T19:35:00.000+02:00', u'thr_total': u'13', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-7969805790285882812', 'classifier': 'memory bus'}
{'updated': u'2013-08-30T14:14:10.001+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'hardware', 'updated_parsed': time.struct_time(tm_year=2013, tm_mon=8, tm_mday=30, tm_hour=12, tm_min=14, tm_sec=10, tm_wday=4, tm_yday=242, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2013, tm_mon=8, tm_mday=30, tm_hour=12, tm_min=14, tm_sec=0, tm_wday=4, tm_yday=242, tm_isdst=0), 'title': u"Thoughts on Intel's upcoming Software Guard Extensions (Part 1)", 'pred': u'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/8440793216705036426/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=8440793216705036426', 'type': u'text/html', 'rel': u'replies', 'title': u'26 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/8440793216705036426', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/8440793216705036426', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2013/08/thoughts-on-intels-upcoming-software.html', 'type': u'text/html', 'rel': u'alternate', 'title': u"Thoughts on Intel's upcoming Software Guard Extensions (Part 1)"}], 'summary': u'<div style="margin-bottom: 0in;">Intel Software Guard Extensions (SGX) might very well be The Next Big Thing coming to our industry, since the introduction of Intel VT-d, VT-x, and TXT technologies in the previous decade. It apparently seem to promise what so far has never been possible \u2013 an ability to create a secure <i>enclave</i><span style="font-style: normal;">within a potentially compromised OS. It sounds just too great, so I decided to take a closer look and share some early thoughts on this technology</span><span style="font-style: normal;">.</span></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b><span style="font-style: normal;">Intel SGX \u2013</span><span style="font-style: normal;"> secure enclaves within </span><span style="font-style: normal;">untrusted</span><span style="font-style: normal;">world!</span></b></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Intel SGX is an upcoming technology, and there is very little public documents about it at the moment. In fact the only public papers and presentations about SGX can be found in the agenda of <a href="https://sites.google.com/site/haspworkshop2013/workshop-program">one security workshop</a> that took place some two months ago. The three papers from Intel engineers presented there provide a reasonably good technical introduction to those new processor extensions.  </div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">You might think about SGX as of a next generation of Intel TXT \u2013 a technology that has never really took off, and which has had a long history of security problems disclosed by certain team of researchers ;) Intel TXT has also been perhaps the most misunderstood technology from Intel \u2013  in fact many people thought about TXT as if it already could provide security enclaves within untrusted OS \u2013 this however was not really true (even ignoring for our multiple attacks) and I have spoke and wrote many times about that in the past years.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">It\'s not clear to me when SGX will make it to the CPUs that we could buy in local shops around the corner. I would be assuming we\'re talking about 3-5 years from now, because the SGX is not even described in the Intel SDM at this moment.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Intel SGX is essentially a new mode of execution on the CPU, a new memory protection semantic, plus a couple of new instructions to manage this all. So, you create an enclave by filling its protected pages with desired code, then you lock it down, measure the code there, and if everything\'s fine, you ask the processor to start executing the code inside the enclave. Since now on, no entity, including the kernel (ring 0) or hypervisor (ring \u201c-1\u201d), or SMM (ring \u201c-2\u201d) or AMT (ring \u201c-3\u201d), has no right to read nor write the memory pages belonging to the enclave. Simple as that!  </div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Why have we had to wait so long for such technology? Ok, it\'s not really that simple,  because we need some form of attestation or sealing to make sure that the enclave was really loaded with good code.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">The cool thing about an SGX enclave is that it can coexist (and so, co-execute) together with other code, such all the untrusted OS code. There is no need to stop or pause the main OS, and boot into a new stub mini-OS, like it was with the TXT (this is what e.g. <a href="https://sparrow.ece.cmu.edu/group/flicker.html">Flicker</a> tried to do, and which was very clumsy). Additionally, there can be multiple enclaves, mutually untrusted, all executing at the same time.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>No more stinkin\' TPMs nor BIOSes to trust!</b></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">A nice surprise is that SGX infrastructure no longer depends on the TPM to do measurements, sealing and attestation. Instead Intel has a special enclave that essentially emulates the TPM. This is a smart move, and doesn\'t decrease security in my opinion. It surely makes us now trust only Intel vs. trusting Intel plus some-asian-TPM-vendor. While it might sound like a good idea to spread the trust between two or more vendors, this only really makes sense if the relation between trusting those vendors is expressed as \u201cAND\u201d, while in this case the relation is, unfortunately of \u201cOR\u201d type \u2013 if the private EK key gets leaked from the TPM manufacture, we can bypass any remote attestation, and no longer we need any failure on the Intel\'s side. Similarly, if Intel was to have a backdoor in their processors, this would be just enough to sabotage all our security, even if the TPM manufacture was decent and played fair.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Because of this, it\'s generally good that SGX allows us to shrink the number of entities we need to trust down to just one: Intel processor (which, these days include the CPUs as well as the memory controller, and, often, also a GPU). Just to remind \u2013 today, even with a sophisticated operating system architecture like those we use in Qubes OS, which is designed with decomposition and minimizing trust in mind, we still need to trust the BIOS and the TPM, in addition to the processor.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">And, of course, because SGX enclaves memories are protected against any other processor mode\'s access, so SMM backdoor no longer can compromise our protected code (in contrast to TXT, where SMM <i>can</i><span style="font-style: normal;"> subvert a TXT-loaded hypervisor</span>), nor any other entity, such as the infamous AMT, or malicious GPU, should be able to do that.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">So, this is all very good. However...</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>Secure Input and Output (for Humans)</b></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">For any piece of code to be somehow useful, there must be a secure way to interact with it. In case of servers, this could be implemented by e.g. including the SSL endpoint inside the protected enclave. However for most applications that run on a client system, ability to interact with the user via screen and keyboard is a must. So, one of the most important questions is how does Intel SGX secures output to the screen from an SGX enclave, as well as how does it ensure that the input the enclave gets is indeed the input the user intended?</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Interestingly, this subject is not very thoroughly discussed in the Intel papers mentioned above. In fact only one paper briefly mentions Intel Protected Audio Video Path (PVAP) technology that apparently could be used to provide secured output to the screen. The paper then references... a <a href="http://www.intel.com/support/graphics/sb/CS-029871.htm#whatis">consumer FAQ onBlueRay Disc Playback</a> using Intel HD graphics. There is no further technical details and I was also unable to find any technical document from Intel about this technology. Additionally this same paper admits that, as of now, there is no protected <i>input</i>technology available, even on prototype level, although they promise to work on that in the future.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">This might not sound very surprising \u2013 after all one doesn\'t need to be a genius to figure out that the main driving force behind this whole SGX thing is the DRM, and specifically protecting Holywwod media against the pirate industry. This would be nothing wrong in itself, assuming, however, the technology could also have some other usages, that could really improve security of the user (in contrast to the security of the media companies).</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">We shall remember that all the secrets, keys, tokens, and smart-cards, are ultimately to allow the user to access some information. And how does people access information? By viewing in on a computer screen. I know, I know, this so retro, but until we have direct PC-brain interfaces, I\'m afraid that\'s the only way. Without properly securing the graphics output, all the secrets can be ultimately leaked out.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Also, how people command their computers and applications? Well, again using this retro thing called keyboard and mouse (touchpad). However secure our enclave might be, without secured input, the app would not be able to distinguish intended user input from simulated input crafted by malware. Not to mention about such obvious attacks as sniffing of the user input.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Without protected input and output, SGX might be able to stop the malware from stealing the user\'s private keys for email encryption or issuing bank transactions, yet the malware will still be able to command this super-secured software to e.g. decrypt all the user emails and later steal the screenshots of all the plaintext messages (with a bit of simple programming, the screenshot\'s could be turned back into nice ASCII text for saving on bandwidth when leaking them out to a server in Hong Kong), or better yet, perhaps just forward them to an email address that the attacker controls (perhaps still encrypted, but using the attackers key).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">But, let\'s ignore for a moment this \u201clittle issue\u201d of lack of protected input, and lack of technical documentation on how secure graphics output is really implemented. Surely it is thinkable that protected input and output could be implemented in a number of ways, and so let\'s hope Intel will do it, and will do right. We should remember here, that whatever mechanism Intel is going to use to secure the graphics and audio output, it surely will be an attractive target of attacks, as there is probably a huge money incentive for such attacks in the film illegal copying business.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>Securing </b><b>mainstream </b><b>client OSes </b><b>and why this </b><b>is not so simple?</b></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">As mentioned above, for SGX enclaves to be truly meaningful on client systems we need protected input and output, to and from the secured enclaves. Anyway, lets assume for now that Intel has come up with robust mechanisms to provide these. Let\'s now consider further, how SGX could be used to turn our current mainstream desktop systems into reasonably secure bastions.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">We start with a simple scenario \u2013 a dedicated application for viewing of incoming encrypted files, say PDFs, performing their decryption and signature verification., and displaying of the final outcome to the user (via protected graphics path). The application takes care about all the key management too. All this happens, of coruse, inside an SGX enclave(s).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Now, this sounds all attractive and surely could be implemented using the SGX. But what about if we wanted our secure document viewer to become a bit more than just a viewer? What if we wanted a secure version of MS Word or Excel, with its full ability to open complex documents and edit them?</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">Well it\'s obviously not enough to just put the </span><span style="font-weight: normal;">proverbial </span><span style="font-weight: normal;">msword.exe into a </span><span style="font-weight: normal;">SGX</span><span style="font-weight: normal;">enclave. It is not, because the msword.exe makes </span><span style="font-weight: normal;">use </span><span style="font-weight: normal;">of million of other things that are provided by the OS </span><span style="font-weight: normal;">and 3</span><sup><span style="font-weight: normal;">rd</span></sup><span style="font-weight: normal;">libraries, in order to perform all sorts of tasks it is supposed to do.  It is not a straightforward decision to draw a line between those parts that are security sensitive and those that are not. </span><span style="font-weight: normal;">Is font parsing security critical? Is drawing proper labels on GUI buttons and menu lists security critical? Is rendering of various objects that are part of the (decrypted) document, such as pictures, security critical? Is spellchecking security critical? Even if the function of some of a subsystem seem not security critical (i.e. not allows to easily </span><span style="font-weight: normal;">leak</span><span style="font-weight: normal;">the plaintext document out of the enclave), let\'s not forget that all this 3</span><sup><span style="font-weight: normal;">rd</span></sup><span style="font-weight: normal;">party code would be interacting very closely with the enclave-contained code. This means the attack surface exposed to all those untrusted 3</span><sup><span style="font-weight: normal;">rd</span></sup><span style="font-weight: normal;">party modules will be rather huge. And we already know it is rather not possible to write a rendere</span><span style="font-weight: normal;">r</span><span style="font-weight: normal;">for such complex documents as PDFs, DOCs, XLS, etc, without introducing tons of exploitable bugs.</span><span style="font-weight: normal;"></span><span style="font-weight: normal;">And these attack are not coming now from the potentially malicious documents (against thos</span><span style="font-weight: normal;">e</span><span style="font-weight: normal;">we protect, somehow, by parsing only signed document from trusted peers), but are coming from the compromised OS.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">Perhaps it would be possible to take Adobe Reader, MS Word, Powerpoint, Excel etc, and just rewrite every of those apps from scratch in a way that </span><span style="font-weight: normal;">they were</span><span style="font-weight: normal;">properly decomposed into sensitive parts that execute within SGC enclave(s), and those that are not-sensitive and make use of all the </span><span style="font-weight: normal;">OS-provided</span><span style="font-weight: normal;">functionality, and further define clean and simple interfaces between those parts, ensuring the \u201cdirty\u201d code cannot exploit the sensitive code. </span><span style="font-weight: normal;">Somehow attractive, but somehow I don\'t see this happening anytime soon.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">But, perhaps, it would be easier to do something different \u2013 just take the whole msword.exe, all the DLLs it depends on, as well as all the OS subsystems it depends on, such as the GUI subsystem, and put all of this into an enclave. This sounds like a more rational approach, and also more secure.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">Only notice one thing \u2013 we just created... a Virtual Machine </span><span style="font-weight: normal;">with Windows OS inside and the msword.exe that uses this Windows OS.</span><span style="font-weight: normal;">. Sure, it is not a VT-x-based VM, it is an SGX-based VM now, but it is largely the same animal!</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">Again, we came to the conclusion why the use of VMs is suddenly perceived as such an increase in security (which some people cannot get, claiming that introducing VM-layer only increases complexity) \u2013 the use of VMs is profitable because </span><span style="font-weight: normal;">of </span><span style="font-weight: normal;">one of thing: it suddenly packs all the fat libraries- and OS-exposed APIs and subsystems into one security domain, reducing all the interfaces between this code in the VM and the outside world. Reducing of the interfaces between two security domains is ALWAYS desirable.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">But our SGX-isolated VMs have one significant advantage over the other VM technologies we got used to in the last decade or so \u2013 namely those VMs can now be impenetrable to any other entity outside of the VM. No kernel or hypervisor can peek into its memory. Neither can the SMM, AMT, or even a determined physical attacker with DRAM emulator, because SGX automatically encrypts any data that leave the processor, so everything that is in the DRAM is encrypted and useless to the physical attacker.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">This is a significant </span><span style="font-weight: normal;">achievement</span><span style="font-weight: normal;">. Of course SGX, </span><span style="font-weight: normal;">strictly speaking,</span><span style="font-weight: normal;"> is not a (full) virtualization technology, </span><span style="font-weight: normal;">it\'s not going to replace VT-x.</span><span style="font-weight: normal;">. But remember we don\'t always need full virtualization, like VT-x, often we can use paravirtualization and all we need in that case is a good isolation technology. </span><span style="font-weight: normal;">For examaple, </span><span style="font-weight: normal;">Xen use</span><span style="font-weight: normal;">s</span><span style="font-weight: normal;"></span><span style="font-weight: normal;">paravirtualization</span><span style="font-weight: normal;">for Linux-based </span><span style="font-weight: normal;">PV </span><span style="font-weight: normal;">VMs, and use</span><span style="font-weight: normal;">s</span><span style="font-weight: normal;">good-old ring3/ring0 separation mechanism </span><span style="font-weight: normal;">to implement </span><span style="font-weight: normal;">this, and the level </span><span style="font-weight: normal;">of </span><span style="font-weight: normal;">isolation of </span><span style="font-weight: normal;">such </span><span style="font-weight: normal;">PV domains on Xen is comparable to the isolation of HVMs, which are virtualized using VT-x.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>To Be Continued</b></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">In the next part of this article, we will look into some interesting unconventional uses of SGX, such as creating malware that cannot be reversed engineered, or TOR nodes or Bitcoin mixers that should be reasonably trusted, even if we don\'t trust the</span><span style="font-weight: normal;">ir</span><span style="font-weight: normal;">operator</span><span style="font-weight: normal;">s</span><span style="font-weight: normal;">. Then we will discuss how SGX might profoundly change the architecture of the future operating systems, and virtualization systems, in a way that we will no longer need to trust (large portions of) their kernels or hypervisors, or system admins (Anti Snowden Protection?) And, of course, how our Qubes OS might embrace this technology in the future.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Finally, we should discuss the important issue of whether this whole SGX, while providing many great benefits for system architects, should really be blindly trusted? What are the chances of Intel building in backdoors there and exposing those to the NSA? Is there any difference in trusting Intel processors today vs. trusting the SGX as a basis of security model of all software in the future?</div><div style="margin-bottom: 0in;"><br /></div>', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u"Intel Software Guard Extensions (SGX) might very well be The Next Big Thing coming to our industry, since the introduction of Intel VT-d, VT-x, and TXT technologies in the previous decade. It apparently seem to promise what so far has never been possible \u2013 an ability to create a secure enclavewithin a potentially compromised OS. It sounds just too great, so I decided to take a closer look and share some early thoughts on this technology.Intel SGX \u2013 secure enclaves within untrustedworld!Intel SGX is an upcoming technology, and there is very little public documents about it at the moment. In fact the only public papers and presentations about SGX can be found in the agenda of one security workshop that took place some two months ago. The three papers from Intel engineers presented there provide a reasonably good technical introduction to those new processor extensions.  You might think about SGX as of a next generation of Intel TXT \u2013 a technology that has never really took off, and which has had a long history of security problems disclosed by certain team of researchers ;) Intel TXT has also been perhaps the most misunderstood technology from Intel \u2013  in fact many people thought about TXT as if it already could provide security enclaves within untrusted OS \u2013 this however was not really true (even ignoring for our multiple attacks) and I have spoke and wrote many times about that in the past years.It's not clear to me when SGX will make it to the CPUs that we could buy in local shops around the corner. I would be assuming we're talking about 3-5 years from now, because the SGX is not even described in the Intel SDM at this moment.Intel SGX is essentially a new mode of execution on the CPU, a new memory protection semantic, plus a couple of new instructions to manage this all. So, you create an enclave by filling its protected pages with desired code, then you lock it down, measure the code there, and if everything's fine, you ask the processor to start executing the code inside the enclave. Since now on, no entity, including the kernel (ring 0) or hypervisor (ring -1), or SMM (ring -2) or AMT (ring -3), has no right to read nor write the memory pages belonging to the enclave. Simple as that!  Why have we had to wait so long for such technology? Ok, it's not really that simple,  because we need some form of attestation or sealing to make sure that the enclave was really loaded with good code.The cool thing about an SGX enclave is that it can coexist (and so, co-execute) together with other code, such all the untrusted OS code. There is no need to stop or pause the main OS, and boot into a new stub mini-OS, like it was with the TXT (this is what e.g. Flicker tried to do, and which was very clumsy). Additionally, there can be multiple enclaves, mutually untrusted, all executing at the same time.No more stinkin' TPMs nor BIOSes to trust!A nice surprise is that SGX infrastructure no longer depends on the TPM to do measurements, sealing and attestation. Instead Intel has a special enclave that essentially emulates the TPM. This is a smart move, and doesn't decrease security in my opinion. It surely makes us now trust only Intel vs. trusting Intel plus some-asian-TPM-vendor. While it might sound like a good idea to spread the trust between two or more vendors, this only really makes sense if the relation between trusting those vendors is expressed as AND, while in this case the relation is, unfortunately of OR type \u2013 if the private EK key gets leaked from the TPM manufacture, we can bypass any remote attestation, and no longer we need any failure on the Intel's side. Similarly, if Intel was to have a backdoor in their processors, this would be just enough to sabotage all our security, even if the TPM manufacture was decent and played fair.Because of this, it's generally good that SGX allows us to shrink the number of entities we need to trust down to just one: Intel processor (which, these days include the CPUs as well as the memory controller, and, often, also a GPU). Just to remind \u2013 today, even with a sophisticated operating system architecture like those we use in Qubes OS, which is designed with decomposition and minimizing trust in mind, we still need to trust the BIOS and the TPM, in addition to the processor.And, of course, because SGX enclaves memories are protected against any other processor mode's access, so SMM backdoor no longer can compromise our protected code (in contrast to TXT, where SMM can subvert a TXT-loaded hypervisor), nor any other entity, such as the infamous AMT, or malicious GPU, should be able to do that.So, this is all very good. However...Secure Input and Output (for Humans)For any piece of code to be somehow useful, there must be a secure way to interact with it. In case of servers, this could be implemented by e.g. including the SSL endpoint inside the protected enclave. However for most applications that run on a client system, ability to interact with the user via screen and keyboard is a must. So, one of the most important questions is how does Intel SGX secures output to the screen from an SGX enclave, as well as how does it ensure that the input the enclave gets is indeed the input the user intended?Interestingly, this subject is not very thoroughly discussed in the Intel papers mentioned above. In fact only one paper briefly mentions Intel Protected Audio Video Path (PVAP) technology that apparently could be used to provide secured output to the screen. The paper then references... a consumer FAQ onBlueRay Disc Playback using Intel HD graphics. There is no further technical details and I was also unable to find any technical document from Intel about this technology. Additionally this same paper admits that, as of now, there is no protected inputtechnology available, even on prototype level, although they promise to work on that in the future.This might not sound very surprising \u2013 after all one doesn't need to be a genius to figure out that the main driving force behind this whole SGX thing is the DRM, and specifically protecting Holywwod media against the pirate industry. This would be nothing wrong in itself, assuming, however, the technology could also have some other usages, that could really improve security of the user (in contrast to the security of the media companies).We shall remember that all the secrets, keys, tokens, and smart-cards, are ultimately to allow the user to access some information. And how does people access information? By viewing in on a computer screen. I know, I know, this so retro, but until we have direct PC-brain interfaces, I'm afraid that's the only way. Without properly securing the graphics output, all the secrets can be ultimately leaked out.Also, how people command their computers and applications? Well, again using this retro thing called keyboard and mouse (touchpad). However secure our enclave might be, without secured input, the app would not be able to distinguish intended user input from simulated input crafted by malware. Not to mention about such obvious attacks as sniffing of the user input.Without protected input and output, SGX might be able to stop the malware from stealing the user's private keys for email encryption or issuing bank transactions, yet the malware will still be able to command this super-secured software to e.g. decrypt all the user emails and later steal the screenshots of all the plaintext messages (with a bit of simple programming, the screenshot's could be turned back into nice ASCII text for saving on bandwidth when leaking them out to a server in Hong Kong), or better yet, perhaps just forward them to an email address that the attacker controls (perhaps still encrypted, but using the attackers key).But, let's ignore for a moment this little issue of lack of protected input, and lack of technical documentation on how secure graphics output is really implemented. Surely it is thinkable that protected input and output could be implemented in a number of ways, and so let's hope Intel will do it, and will do right. We should remember here, that whatever mechanism Intel is going to use to secure the graphics and audio output, it surely will be an attractive target of attacks, as there is probably a huge money incentive for such attacks in the film illegal copying business.Securing mainstream client OSes and why this is not so simple?As mentioned above, for SGX enclaves to be truly meaningful on client systems we need protected input and output, to and from the secured enclaves. Anyway, lets assume for now that Intel has come up with robust mechanisms to provide these. Let's now consider further, how SGX could be used to turn our current mainstream desktop systems into reasonably secure bastions.We start with a simple scenario \u2013 a dedicated application for viewing of incoming encrypted files, say PDFs, performing their decryption and signature verification., and displaying of the final outcome to the user (via protected graphics path). The application takes care about all the key management too. All this happens, of coruse, inside an SGX enclave(s).Now, this sounds all attractive and surely could be implemented using the SGX. But what about if we wanted our secure document viewer to become a bit more than just a viewer? What if we wanted a secure version of MS Word or Excel, with its full ability to open complex documents and edit them?Well it's obviously not enough to just put the proverbial msword.exe into a SGXenclave. It is not, because the msword.exe makes use of million of other things that are provided by the OS and 3rdlibraries, in order to perform all sorts of tasks it is supposed to do.  It is not a straightforward decision to draw a line between those parts that are security sensitive and those that are not. Is font parsing security critical? Is drawing proper labels on GUI buttons and menu lists security critical? Is rendering of various objects that are part of the (decrypted) document, such as pictures, security critical? Is spellchecking security critical? Even if the function of some of a subsystem seem not security critical (i.e. not allows to easily leakthe plaintext document out of the enclave), let's not forget that all this 3rdparty code would be interacting very closely with the enclave-contained code. This means the attack surface exposed to all those untrusted 3rdparty modules will be rather huge. And we already know it is rather not possible to write a rendererfor such complex documents as PDFs, DOCs, XLS, etc, without introducing tons of exploitable bugs.And these attack are not coming now from the potentially malicious documents (against thosewe protect, somehow, by parsing only signed document from trusted peers), but are coming from the compromised OS.Perhaps it would be possible to take Adobe Reader, MS Word, Powerpoint, Excel etc, and just rewrite every of those apps from scratch in a way that they wereproperly decomposed into sensitive parts that execute within SGC enclave(s), and those that are not-sensitive and make use of all the OS-providedfunctionality, and further define clean and simple interfaces between those parts, ensuring the dirty code cannot exploit the sensitive code. Somehow attractive, but somehow I don't see this happening anytime soon.But, perhaps, it would be easier to do something different \u2013 just take the whole msword.exe, all the DLLs it depends on, as well as all the OS subsystems it depends on, such as the GUI subsystem, and put all of this into an enclave. This sounds like a more rational approach, and also more secure.Only notice one thing \u2013 we just created... a Virtual Machine with Windows OS inside and the msword.exe that uses this Windows OS.. Sure, it is not a VT-x-based VM, it is an SGX-based VM now, but it is largely the same animal!Again, we came to the conclusion why the use of VMs is suddenly perceived as such an increase in security (which some people cannot get, claiming that introducing VM-layer only increases complexity) \u2013 the use of VMs is profitable because of one of thing: it suddenly packs all the fat libraries- and OS-exposed APIs and subsystems into one security domain, reducing all the interfaces between this code in the VM and the outside world. Reducing of the interfaces between two security domains is ALWAYS desirable.But our SGX-isolated VMs have one significant advantage over the other VM technologies we got used to in the last decade or so \u2013 namely those VMs can now be impenetrable to any other entity outside of the VM. No kernel or hypervisor can peek into its memory. Neither can the SMM, AMT, or even a determined physical attacker with DRAM emulator, because SGX automatically encrypts any data that leave the processor, so everything that is in the DRAM is encrypted and useless to the physical attacker.This is a significant achievement. Of course SGX, strictly speaking, is not a (full) virtualization technology, it's not going to replace VT-x.. But remember we don't always need full virtualization, like VT-x, often we can use paravirtualization and all we need in that case is a good isolation technology. For examaple, Xen usesparavirtualizationfor Linux-based PV VMs, and usesgood-old ring3/ring0 separation mechanism to implement this, and the level of isolation of such PV domains on Xen is comparable to the isolation of HVMs, which are virtualized using VT-x.To Be ContinuedIn the next part of this article, we will look into some interesting unconventional uses of SGX, such as creating malware that cannot be reversed engineered, or TOR nodes or Bitcoin mixers that should be reasonably trusted, even if we don't trust theiroperators. Then we will discuss how SGX might profoundly change the architecture of the future operating systems, and virtualization systems, in a way that we will no longer need to trust (large portions of) their kernels or hypervisors, or system admins (Anti Snowden Protection?) And, of course, how our Qubes OS might embrace this technology in the future.Finally, we should discuss the important issue of whether this whole SGX, while providing many great benefits for system architects, should really be blindly trusted? What are the chances of Intel building in backdoors there and exposing those to the NSA? Is there any difference in trusting Intel processors today vs. trusting the SGX as a basis of security model of all software in the future?", 'language': None}], 'guidislink': True, 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u"Thoughts on Intel's upcoming Software Guard Extensions (Part 1)", 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2013/08/thoughts-on-intels-upcoming-software.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2013-08-30T14:14:00.000+02:00', u'thr_total': u'26', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-8440793216705036426', 'classifier': 'DRAM'}
{'updated_parsed': time.struct_time(tm_year=2013, tm_mon=6, tm_mday=22, tm_hour=8, tm_min=56, tm_sec=16, tm_wday=5, tm_yday=173, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/5526599582625415637/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=5526599582625415637', 'type': u'text/html', 'rel': u'replies', 'title': u'8 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/5526599582625415637', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/5526599582625415637', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2013/06/qubes-os-r3-alpha-preview-odyssey-hal.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes OS R3 Alpha preview: Odyssey HAL in action!'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-5526599582625415637', 'published_parsed': time.struct_time(tm_year=2013, tm_mon=6, tm_mday=21, tm_hour=10, tm_min=15, tm_sec=0, tm_wday=4, tm_yday=172, tm_isdst=0), 'title': u'Qubes OS R3 Alpha preview: Odyssey HAL in action!', 'pred': u'announcements', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'In a previous postI have outlined a new direction we\'re aiming with the Qubes project, which is a departure from using a hardcoded hypervisor with Qubes (as well as hardcoded Linux as Dom0, GUI domain, etc).Today I\'m happy to announce that we\'ve already completed initial porting of the current Qubes OS into this Hypervisor-Abstraction-Layer-based framework. The new version of Qubes, that we call R3 Alpha for now, builds fine, installs fine, and even (mostly) works(!), as can be admired on the screenshot below :) It still uses Xen, of course, but this time in a non-hardcoded way, which allows to replace it easily with another hypervisor, as I discuss below.  Our Qubes Odyssey backendneeded to support a specific hypervisor comprises essentially three parts:A libvirt driver to support  a given VMM. In our case we got it (almost) for free, because Xen  4.2 is well supported by libvirt. I wrote almost for free,  because some patches to libvirt were still needed, mostly to get rid  of some unjustified simplifying assumptions, such as that all the  backends are always in Dom0, which is not the case for Qubes OS, of  course. Some of those patches were accepted into upstream libvirt,  some (still) not, so we had to fork libvirt.A VMM-specific implementation  of our vchan \u2013 a simple, socket-like, VMM shared memory-based  communication stack between the VMs. Again, in case of Xen 4.2 we  got that (almost) for free, because Xen 4.2 has now included a  libxenvchan component, which is modified (improved and cleaned up)  version of our original vchan (written in early Qubes days for older  Xen versions) contributed and maintained by Daniel De Graff from the  NSA.Some minor configuration files,  e.g. to tell libvirt which hypervisor protocol to use (in our case:  xen:///), and VM configuration template files.Now, if one wanted to switch Xen for some other hypervisor, such as e.g. the KVM, we would need to write a KVM Odyssey backend in a form of providing the above mentioned three elements. Again, libvirt driver we would get for free, configuration files would be trivial to write, and the only task which would require some coding would be the vchan for KVM.  Ok, one thing that is left out (non-HAL\'ified) for now, is the xc_map_foreign_pages() Xen-specific function call within our GUI daemon.Ideally such call could also be handled by the libvirt API, however it\'s not clear to us whether true zero-copy page access is really supported (and intended). If it is not, we will try to contribute a patch to libvirt to add such functionality, as it is generally useful for many things that involve high-speed inter-VM communication, of which our GUI virtualization is just one example. So, at this moment, one would need to add an ugly #if (BACKEND_VMM == ...) to the code above and use another VMM\'s function(s), equivalent to the xc_map_foreign_pages() on Xen.But besides the above, essentially everything else should Just Work (TM). And that\'s pretty amazing, I think :) While I personally can\'t immediately see any security benefit of switching from Xen to KVM, it might appeal to some people for other reasons (Performance? Better hardware support?). The point is: this should be now easy to do.If one wanted to support some Windows-based hypervisor, on the other hand, such as MS Hyper-V, or Virtual Box on top of Windows, then two more things will need to be taken care of:Our core management stack (the  core-admin repository), the core RPC services (mostly the qrexec  daemon, currently part of core-admin-linux repo), and the libvirt  code (core-libvirt, a forked original libvirt with some custom  patches I mentioned above), all would need to build and run fine on  Windows. While this is not a big problem for core-admin (it\'s all  python) and core-libvirt (it is supposed to build and run on Windows  fine), the qrexec daemon would need to be rewritten with Windows OS  in mind. We\'re currently working on this step, BTW.The GUI daemon would also need to be ported to run on Windows, instead of on top of X Server. This is  somehow orthogonal to the need to get rid of the hardcoded  xc_map_foreign_pages() function as mentioned above. This step might  be optional, however, if we wanted to use a Linux-based (and so  Xorg-based GUI server) as a GUI domain.Once the above two pieces are made Windows-ready (note how I wrote Windows-ready, and not specific-VMM-ready), we can then use any Windows-based hypervisor we want (i.e. for which we have libvirt driver, and can write vchan).This is again pretty amazing, because it means we don\'t need N*M variations of each component (where N is the number of VMMs, and M the number of host/GUI OSes to support) \u2013 but only N+M! This is similar to how modern compilers are designed using a language-specific frontends (C, C++, Pascal, C#, etc), and architecture-specific backends (x86, x64, ARM, etc), and an Intermediate Language for internal grinding, again achieving this N+M number of needed variants instead of N*M, which otherwise would be just totally impractical.One other detail I would like to point out, and which is also visible on the screenshot above, is that we also got rid of using the Xen-specific Xenstore infrastructure (a registry-like tree-based infrastructure for inter-VM configuration and status exchange), and we replaced it with our own, vchan-based Qubes DB (core-qubesdb).One interesting thing about Qubes DB is that it get rids of the (overly complex and unnecessary) permission system that is used by xenstore, and instead uses the most simple approach: each VM has its separate Qubes DB daemon, and so a totally separate configuration/state namespace. This is inline with the rest of the Qubes philosophy, which basically says that: permissions is dead, long live separation!So, in Qubes OS we just isolate everything by default, unless a user/configuration specifically allows an exception \u2013 e.g. no file copy operation between domains is possible, unless the user expresses an explicit consent for it.Many old-school security people can\'t imagine a system without permissions, but if wethink about it more, we might get to a conclusion that: 1) permissions are complex and so often difficult to understand and set correctly, 2) require often complex code to parse and make security decisions, and 3) often are absolutely unneeded.As a practical example of how permissions schemes might sometime trick even (otherwise somehow smart) developersinto making a mistake consider this bug in Qubes we made a long time ago when setting permissions on some xenstore key, which resulted in some information leak (not much of a security problem in general, but still). And just today, Xen.org has published this advisory, that sounds pretty serious, again caused by bad permissions on some xenstore keys. (Yes, we do have updated Xen packages to fix that, of course).Back to Qubes R3 Alpha, the first successful Qubes based on Odyssey HAL framework. As previously mentioned, we plan to make most of the framework open sourced, specifically all the non-Windows code. However, we\'re not publishing this Odyssey/R3 code at this moment, mainly for two reasons: 1) we don\'t want people to immediately start building other backends, such as to support KVM, right at this stage, because we still might want/need to modify some interfaces slightly, e.g. for our vchan, and we don\'t want to tide our hands now, and 2) the other reason is that we\'re still in the middle of Beta releases for Qubes R2, and we want people to rather focus on testing that, rather stable release, than jumping onto Qubes R3 alpha.In other news: everybody seems to be genuinely surprised that unencrypted information can be intercepted and analyzed without user consent... Can it be that people will "discover" cryptography now? How many of you use PGP everyday? And how long will it take then to understand that cryptography without secure client devices is useless?', 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Qubes OS R3 Alpha preview: Odyssey HAL in action!', 'language': None}, 'updated': u'2013-06-22T10:56:16.820+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'link': u'http://theinvisiblethings.blogspot.com/2013/06/qubes-os-r3-alpha-preview-odyssey-hal.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://3.bp.blogspot.com/--nDYFJy9De8/UcMVFM2mygI/AAAAAAAAALg/EJORWNCQNTI/s72-c/r3a1-konsoles.png', 'width': u'72', 'height': u'72'}], 'summary': u'<br /><div style="margin-bottom: 0in;">In a <a href="http://theinvisiblethings.blogspot.com/2013/03/introducing-qubes-odyssey-framework.html">previous post</a>I have outlined a new direction we\'re aiming with the Qubes project, which is a departure from using a \u201chardcoded\u201d hypervisor with Qubes (as well as \u201chardcoded\u201d Linux as Dom0, GUI domain, etc).</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Today I\'m happy to announce that we\'ve already completed initial porting of the current Qubes OS into this Hypervisor-Abstraction-Layer-based framework. The new version of Qubes, that we call \u201cR3 Alpha\u201d for now, builds fine, installs fine, and even (mostly) works(!), as can be admired on the screenshot below :) It still uses Xen, of course, but this time in a non-hardcoded way, which allows to replace it easily with another hypervisor, as I discuss below.</div><div style="margin-bottom: 0in;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/--nDYFJy9De8/UcMVFM2mygI/AAAAAAAAALg/EJORWNCQNTI/s1600/r3a1-konsoles.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="225" src="http://3.bp.blogspot.com/--nDYFJy9De8/UcMVFM2mygI/AAAAAAAAALg/EJORWNCQNTI/s400/r3a1-konsoles.png" width="400" /></a></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">  </div><div style="margin-bottom: 0in;">Our Qubes Odyssey <i>backend</i><span style="font-style: normal;"></span><span style="font-style: normal;">needed </span>to support a specific hypervisor comprises essentially three parts:</div><ol><li><div style="margin-bottom: 0in;"><b>A libvirt driver</b> to support  a given VMM. In our case we got it (almost) for free, because Xen  4.2 is well supported by libvirt. I wrote \u201calmost\u201d for free,  because some patches to libvirt were still needed, mostly to get rid  of some unjustified simplifying assumptions, such as that all the  backends are always in Dom0, which is not the case for Qubes OS, of  course. Some of those patches were accepted into upstream libvirt,  some (still) not, so we had to fork libvirt.</div></li><li><div style="margin-bottom: 0in;">A VMM-specific <b>implementation  of our vchan</b> \u2013 a simple, socket-like, VMM shared memory-based  communication stack between the VMs. Again, in case of Xen 4.2 we  got that (almost) for free, because Xen 4.2 has now included a  libxenvchan component, which is modified (improved and cleaned up)  version of our original vchan (written in early Qubes days for older  Xen versions) contributed and maintained by Daniel De Graff from the  NSA.</div></li><li><div style="margin-bottom: 0in;">Some minor configuration files,  e.g. to tell libvirt which hypervisor protocol to use (in our case:  xen:///), and VM configuration template files.</div></li></ol><div style="margin-bottom: 0in;">Now, if one wanted to switch Xen for some other hypervisor, such as e.g. the KVM, we would need to write a KVM Odyssey backend in a form of providing the above mentioned three elements. Again, libvirt driver we would get for free, configuration files would be trivial to write, and the only task which would require some coding would be the vchan for KVM.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">  </div><div style="margin-bottom: 0in;">Ok, one thing that is left out (non-HAL\'ified) for now, is the xc_map_foreign_pages() Xen-specific <a href="http://git.qubes-os.org/?p=joanna/gui-daemon.git;a=blob;f=shmoverride/shmoverride.c;h=0d66e4faa1ed47b4c1ced481df6e1e4819e53fc5;hb=HEAD#l71">function call</a> within our GUI daemon<a href="http://git.qubes-os.org/?p=joanna/gui-daemon.git;a=blob;f=shmoverride/shmoverride.c;h=0d66e4faa1ed47b4c1ced481df6e1e4819e53fc5;hb=HEAD#l71"></a>.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Ideally such call could also be handled by the libvirt API, however it\'s not clear to us whether true zero-copy page access is really supported (and intended). If it is not, we will try to contribute a patch to libvirt to add such functionality, as it is generally useful for many things that involve high-speed inter-VM communication, of which our GUI virtualization is just one example. So, at this moment, one would need to add an ugly #if (BACKEND_VMM == ...) to the code above and use another VMM\'s function(s), equivalent to the xc_map_foreign_pages() on Xen.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">But besides the above, essentially everything else should Just Work (TM). And that\'s pretty amazing, I think :) While I personally can\'t immediately see any security benefit of switching from Xen to KVM, it might appeal to some people for other reasons (Performance? Better hardware support?). The point is: this should be now easy to do.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">If one wanted to support some Windows-based hypervisor, on the other hand, such as MS Hyper-V, or Virtual Box on top of Windows, then two more things will need to be taken care of:</div><div style="margin-bottom: 0in;"><br /></div><ol><li><div style="margin-bottom: 0in;">Our core management stack (the  core-admin repository), the core RPC services (mostly the qrexec  daemon, currently part of core-admin-linux repo), and the libvirt  code (core-libvirt, a forked original libvirt with some custom  patches I mentioned above), all would need to build and run fine on  Windows. While this is not a big problem for core-admin (it\'s all  python) and core-libvirt (it is supposed to build and run on Windows  fine), the qrexec daemon would need to be rewritten with Windows OS  in mind. We\'re currently working on this step, BTW.</div></li><li><div style="margin-bottom: 0in;">The GUI daemon would also need to be ported to run on Windows, instead of on top of X Server. This is  somehow orthogonal to the need to get rid of the hardcoded  xc_map_foreign_pages() function as mentioned above. This step might  be optional, however, if we wanted to use a Linux-based (and so  Xorg-based GUI server) as a GUI domain.</div></li></ol><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Once the above two pieces are made Windows-ready (note how I wrote Windows-ready, and not specific-VMM-ready), we can then use any Windows-based hypervisor we want (i.e. for which we have libvirt driver, and can write vchan).</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">This is again pretty amazing, because it means we don\'t need N*M variations of each component (where N is the number of VMMs, and M the number of host/GUI OSes to support) \u2013 but only N+M! This is similar to how modern compilers are designed using a language-specific frontends (C, C++, Pascal, C#, etc), and architecture-specific backends (x86, x64, ARM, etc), and an Intermediate Language for internal \u201cgrinding\u201d, again achieving this N+M number of needed variants instead of N*M, which otherwise would be just totally impractical.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">One other detail I would like to point out, and which is also visible on the screenshot above, is that we also got rid of using the Xen-specific Xenstore infrastructure (a registry-like tree-based infrastructure for inter-VM configuration and status exchange), and we replaced it with our own, vchan-based Qubes DB (core-qubesdb).</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">One interesting thing about Qubes DB is that it get rids of the (overly complex and unnecessary) permission system that is used by xenstore, and instead uses the most simple approach: each VM has its separate Qubes DB daemon, and so a totally separate configuration/state namespace. This is inline with the rest of the Qubes philosophy, which basically says that: <b>permissions is dead, long live separation!</b></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">So, in Qubes OS we just isolate everything by default, unless a user/configuration specifically allows an exception \u2013 e.g. no file copy operation between domains is possible, unless the user expresses an explicit consent for it.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">Many old-school security people can\'t imagine a system without permissions, but </span><span style="font-weight: normal;">if we</span><span style="font-weight: normal;">think about it more, we might get to a conclusion that: 1) permissions are complex and so </span><span style="font-weight: normal;">often </span><span style="font-weight: normal;">difficult to un</span><span style="font-weight: normal;">d</span><span style="font-weight: normal;">erstand and set correctly, 2) require often complex code to parse </span><span style="font-weight: normal;">and </span><span style="font-weight: normal;">make security decisions, and 3) often are absolutely unneeded.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">As a practical example of how permissions </span><span style="font-weight: normal;">schemes </span><span style="font-weight: normal;">might </span><span style="font-weight: normal;">sometime </span><span style="font-weight: normal;">trick even (otherwise somehow smart) developers</span><span style="font-weight: normal;">into making a mistake consider <a href="http://git.qubes-os.org/?p=joanna/core-admin.git;a=commitdiff;h=59f71f634af596c8fe2ef507509bf1ae850286c7">this bug</a> in Qubes </span><span style="font-weight: normal;"></span><span style="font-weight: normal;">we made a </span><span style="font-weight: normal;">long time ago when setting permissions on some xenstore key, which resulted in some information leak (not much of a security problem in general, but still). And just today</span><span style="font-weight: normal;">, Xen.org has published <a href="http://lists.xenproject.org/archives/html/xen-devel/2013-06/msg02123.html">this advisory</a><span style="background-color: yellow;"></span>, that sounds pretty serious, again caused by bad permissions on some xenstore keys. (Yes, we do have <a href="https://groups.google.com/forum/#!msg/qubes-devel/KqZdbcgkTGU/YaTwNcQhcrgJ">updated Xen packages</a> </span><span style="font-weight: normal;"><span style="background-color: yellow;"></span></span><span style="font-weight: normal;">to fix that, of course</span><span style="font-weight: normal;">)</span><span style="font-weight: normal;">.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Back to Qubes R3 Alpha, the first successful Qubes based on Odyssey HAL framework. As previously mentioned, we plan to make most of the framework open sourced, specifically all the non-Windows code. However, we\'re not publishing this Odyssey/R3 code at this moment, mainly for two reasons: 1) we don\'t want people to immediately start building other backends, such as to support KVM, right at this stage, because we still might want/need to modify some interfaces slightly, e.g. for our vchan, and we don\'t want to tide our hands now, and 2) the other reason is that we\'re still in the middle of \u201cBeta\u201d releases for Qubes R2, and we want people to rather focus on testing that, rather stable release, than jumping onto Qubes R3 alpha.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">In other news: everybody seems to be genuinely surprised that <i>unencrypted</i> information can be <a href="http://en.wikipedia.org/wiki/PRISM_%28surveillance_program%29">intercepted and analyzed</a> without user consent... Can it be that people will "discover" cryptography now? How many of you use PGP everyday? And how long will it take then to understand that cryptography without secure client devices is useless?</div>', 'guidislink': True, 'published': u'2013-06-21T12:15:00.000+02:00', u'thr_total': u'8', 'classifier': 'configuration template'}
{'updated_parsed': time.struct_time(tm_year=2014, tm_mon=11, tm_mday=27, tm_hour=12, tm_min=26, tm_sec=11, tm_wday=3, tm_yday=331, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7660168967011899954/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=7660168967011899954', 'type': u'text/html', 'rel': u'replies', 'title': u'17 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7660168967011899954', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7660168967011899954', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2013/03/introducing-qubes-odyssey-framework.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Introducing Qubes Odyssey Framework'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-7660168967011899954', 'published_parsed': time.struct_time(tm_year=2013, tm_mon=3, tm_mday=21, tm_hour=16, tm_min=47, tm_sec=0, tm_wday=3, tm_yday=80, tm_isdst=0), 'title': u'Introducing Qubes Odyssey Framework', 'pred': u'hardware', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'Qubes OS is becoming more and more advanced, polished, and user friendly OS.But Qubes OS, even as advanced as it is now, surely have its limitations. Limitations, that for some users might be difficult to accept, and might discourage them from even trying out the OS. One such limitation is lack of 3D graphics support for applications running in AppVMs. Another one is still-far-from-ideal hardware compatibility \u2013 a somehow inherent problem for most (all?) Linux-based systems.There is also one more limitation of Qubes OS, particularly difficult to overcome... Namely that it is a standalone Operating System, not an application that could be installed inside the user\'s existing OS. While installing a new application that increases system\'s security is a no-brianer for most people, switching to a new, exotic OS, is quite a different story...Before I discuss how we plan to address those limitations, let\'s first make a quick digression about what Qubes reallyis, as many people often get that wrong...           What Qubes IS, and what Qubes IS NOT?Qubes surely is not Xen! Qubes only usesXen to create isolatedcontainers \u2013 security domains (or zones). Qubes also is not a Linux distribution! Sure, we currently use Fedora 18 as the default template for AppVMs, but at the same time we also support Windows VMs. And while we also use Linux as GUI and admin domain, we could really use something different \u2013 e.g. Windows as GUI domain.So, what is Qubes then? Qubes (note how I\'ve suddenly dropped the OS suffix) is several things:The  way how to configure,  harden, and  use the VMM (e.g. Xen) to create  isolated security domains, and to minimize overall  system TCB.Secure GUI virtualization that provides strong gui isolation, while at the same time, provides also seamless  integration of all applications running in different VMs onto one common  desktop. Plus a customized  GUI environment, including  trusted Window Manager that  provides unspoofable decorations for the  applications\' windows.Secure  inter-domain  communication and  services infrastructure with centrally  enforced policy engine.  Plus some core  services built on top of this, such as secure file exchange between  domains.Various  additional services,  or addons, built on top of Qubes infrastructure, such as  Disposable VMs, Split GPG, TorVM, Trusted PDF converter, etc. These  are just few examples, as basically the sky is the limit here.Various  additional  customizations to all the guest OSes that  run in various domains: GUI, Admin, ServiceVMs, and AppVMs.  Introducing Qubes HAL: Hypervisor Abstraction LayerBecause Qubes is a bunch of technologies and approaches that are mostly independent from the underlying hypervisor, as discussed above, it\'s quite natural to consider if we could easily build an abstraction layer to allow the use of different VMMs with Qubes, instead of just Xen? Turns out this is not as difficult as we originally thought, and this is exactly the direction we\'re taking right now with Qubes Odyssey! To make this possible we\'re going to use the libvirt project.So, we might imagine Qubes that is based on Hyper-V or even Virtual Box or VMWare Workstation. In the case of the last two Qubes would no longer be a standalone OS, but rather an application that one installs on top of an existing OS, such as Windows. The obvious advantage  we\'re gaining here is improved hardware compatibility, and ease of deployment.And we can go even further and ask: why not use Windows Native Isolation, i.e. mechanisms such as user account separation, process isolation, and ACLs, to implement domain isolation? In other words why not use Windows OS as a kind of VMM? This would further dramatically improve  then lightness of the system...Of course the price we pay for all this is progressively degraded security, as e.g. Virtual Box cannot be a match to Xen in terms of security, both architecturally and implementation-wise, and not to mention the quality of isolation provided by the Windows kernel, which is even less.&nbsp;            But on the other hand, it\'s still better than using just Windows which offers essentially only one zone, so no domain isolation at all! And if we can get, with minimal effort, most of our Qubes code to work with all those various isolation providers then... why not?Being able to seamlessly switch between various hypervisors is only part of the story, of course. The remaining part is the support for different OSes used for various Qubes domains. Currently we use Linux, specifically Fedora 18, in our GUI &amp; Admin domain, but there is no fundamental reason why we couldn\'t use Windows there instead. We discuss this more in-depth in one of the paragraphs below.The diagram below tries to illustrate the trade-offs between hardware compatibility and ease of deployment vs. security when using different isolation backends with Qubes. Some variants might also offer additional benefits, such as super-lightness in terms of CPU and memory resources required, as is the case with Windows Native Isolation.&nbsp;            Some example configurationsLet\'s now discuss two extreme variants of Qubes \u2013 one based on the baremetal Xen hypervisor and the other one based on Windows Native Isolation, so a variant from the opposite endof the spectrum (as shown on the illustration above).The diagram below shows a configuration that uses a decent baremetal hypervisor, such as Xen, with abilities to securely assign devices to untrusted service domains(NetVM, UsbVM). So, this is very similar to the current Qubes OS.&nbsp;            Additionally weseeseparate GUI and Admin domains:the GUI domain might perhaps be based on Windows, to provide users with a familiar UI, while the Admin domain, tasked with domain management and policy enforcement,might be based on some minimal Linux distribution.In the current Qubes OS there is no distinction between a GUI and an Admin domain --both are hosted within one domain called dom0. But in some cases there are benefits of separating the GUI domain from the Admin domain. In a corporate scenario, for example, the Admin domain might be accessible only to the IT department and not to the end user. This way the user wouldhave no way of modifying system-wide policies, and e.g. allowing their work domain to suddenly talk to the wild open Internet, or to copy workproject files from work to personal domains(save for the exotic, low-bandwidthcovert channels, such as through CPU cache).The ability to deprivilege networking and USB stacks by assigning corresponding devices (NICs, and USB controllers) to untrusted, or semi-trused, domains provides great security benefits. This automatically prevents various attacks against the bugs in WiFi stacks or USB stacks.What is not seen on the diagram, but what is typical for baremetal hypervisors is that they are usually much smaller than hosted hypervisors, implementing less services, and delegating most tasks, such as the infamous I/O emulation to (often)unprivileged VMs.Let\'s now look at the other extreme example of using Qubes \u2013 the diagram below shows an architecture of a Qubized Windows system that uses either a hosted VMM, such as Virtual Box or VMWare Workstation, or even the previously mentioned Windows Native Isolation mechanisms, as an isolation provider for domains.&nbsp;   Of course this architecture lacks many benefits discussed above, such as untrusted domains for networking and USB stacks, small hypervisors, etc. But it still can be used to implement multiple security domains, at amuch lower price: better hardware compatibility, easier deployment, and in case of Windows Native Isolation \u2013 excellent performance.And it really can be made reasonable, although it might require more effort&nbsp; than it might seem at first sight. Take Windows Native Isolation \u2013 of course just creating different user accounts to represent different domains is not enough, because Windows still doesn\'t implement true GUI-level isolation. Nor network isolation. So, there is a challenge to do it right, and right in this case means to make the isolation as good as the Windows kernel can isolate processes from different users from each other.Sure, a single kernel exploit destroys this all, but it\'s still better than one application can (legally) read all my files policy that 99% of all desktop OSes out there essentially implement today.Now, probably the best thing with all this is that once we implement a product based on, say, Qubes for Windows, together with various cool addons that will take advantage of the Qubes services infrastructure, and which shall be product-specific, it should then be really easy to upgrade to another VMM, say Hyper-V to boost security. And the users shall not even notice a change in the UI, save for the performance degradation perhaps (well, clearly automatic creation of VMs to handle various users tasks would be more costly on Hyper-V than with Windows Native Isolation, where VMs are just... processes).Qubes building blocks \u2013 implementation detailsLet\'s have a look now at the repository layout for the latest Qubes OSsources \u2013 every name listed below represents a separate code repository that corresponds to a logical module, or a building block of a Qubes system:core-admincore-admin-linuxcore-agent-linuxcore-agent-windowscore-vchan-xendesktop-linux-kdedesktop-linux-xfce4gui-agent-linuxgui-agent-windowsgui-agent-xen-hvm-stubdomgui-commongui-daemonlinux-dom0-updateslinux-installer-qubes-oslinux-kernellinux-template-builderlinux-utilslinux-yumqubes-app-linux-pdf-converterqubes-app-linux-split-gpgqubes-app-linux-torqubes-app-thunderbirdqubes-builderqubes-managervmm-xenvmm-xen-windows-pvdrivers           Because current Qubes R2 still doesn\'t use HAL layer to support different hypervisors, it can currently be used with only one hypervisor, namely Xen, whose code is provided by the vmm-xenrepository (in an ideal world we would be just using vanilla Xen instead of buildingour own from sources, but in reality we like the ability to build it ourselves, slightly modifying some things).Once we move towards the Qubes Odyssey architecture (essentially by replacing thehardcoded calls to Xen\'s management stack, in the core-adminmodule, with libvirt calls), we could then easily switch Xen for other hypervisors, such as Hyper-V or Virtual Box. In case of Hyper-V we would not have access to the sources of the VMM, of course, so would just be using the stock binaries, although we still might want to maintain thevmm-hyperv repository that could contain various hardening scripts and configuration files for this VMM. Or might not. Also, chances are high that we would be just able to use the stock libvirt driversfor Hyper-V or Virtual Box,so no need for creating core-libvirt-hypervor core-libvirt-virtualboxbackends.What we will need to provide, is ourcustom inter-domaincommunication library for each hypervisor supported.This means we will need to write core-vchan-hypervor core-vchan-virtualbox. Most (all?) VMMs do provide some kind of API for inter-VM communication (or at least VM-host communication), so the main task of such component is to wrap the VMM-custom mechanism with Qubes-standarizedAPI for vchan (and this standardization is one thing we\'re currently working on). All in all, in most cases this will be asimple task.If we, on the other hand, wanted to support an exotic VMM, such as the previously mentioned Windows Native Isolation, which is not really a true VMM, then we will need to write our own libvirt backend to support is:core-libvirt-windows... as well as the corresponding vchan module (which should be especially trivial to write in this case):core-vchan-windowsAdditionally, if we\'re building a system where the Admin domain is not based on Linux, which would likely be the case if we used Hyper-V, or Virtual Box for Windows, or, especially, Windows Native Isolation, then we should also provide core-admin-windowsmodule, that, among other things, should provide Qubes qrexecimplementation, something that is highly OS-dependent.As can be seen above, we currently only have core-admin-linux, which is understandable as we currently use Linux in Dom0. But the good news is that we only need to write core-admin-XXXonce for each OS that is to be supported as an Admin domain, asthis code should not be depend on the actual VMM used (thanks to our smart HAL).Similarly, we also need to assure that our gui-daemoncan run on the OS that is to be used as a GUI domain (again, in most cases GUI domain would be the same as Admin domain, but not always). Here the situation is generally much easier because with just a few #ifdefs our current GUIdaemon should compile and run on most OSes, from Linux/Xorg to Windows and Macs (which is the reason we only have one gui-daemonrepository, instead of several gui-daemon-XXX).Finally we should provide some code that will gather all the components neededfor our specific product and package this all into either an installable ISO, if Qubes is to be a standalone OS, like current Qubes,or into an executable, in case Qubes is to be an application. The installer, depending on the product, might do some cool things, such as e.g. take current user system and automatically move it into one of Qubes domains.To summary, these would be the components needed to build Qubes for Windows product:core-admincore-admin-windowscore-agent-windowscore-vchan-windowscore-libvirt-windows desktop-windowsgui-agent-windowsgui-commongui-daemonwindows-installer-qubes-for-windowsqubes-builderqubes-managerAdditionally we will likely need a few qubes-app-*modules that would implement some "addons", such as perhaps automatic links and documents opening in specific VMs, e.g.:qubes-app-windows-mime-handlersHere, again, the sky\'s the limit and this is specifically the area where each vendor can go to great lenghts and build killer apps using our Qubes framework.Now, if we wanted to create "Qubes for Hyper-V" we would need the following components:core-admincore-admin-windowscore-agent-linuxcore-agent-windowscore-vchan-hypervdesktop-windowsgui-agent-linuxgui-agent-windowsgui-commongui-daemonwindows-installer-qubes-hypervqubes-app-XXXqubes-builderqubes-managervmm-hypervHere, as an example, I also left optional core-agent-linux and gui-agent-linux components (the same that are to be used with Xen-based Qubes OS) to allow support for also Linux-based VMs \u2013 if we can get those for free, then why not!  It should be striking how many of those components are the same in both of those two cases \u2013 essentially the only differences are made by the use of different vmm-* components and, of course, the different installerIt should be also clear now how this framework now enables seamless upgrades from one product (say Qubes for Windows) to another (say Qubes for Hyper-V).LicensingOur business model assumes working with vendors, as opposed to end users, and licensing to them various code modules needed to create products based on Qubes.All the code that comprises the base foundation needed for creation of any Qubes variant (so core-admin, gui-common, gui-daemon, qubes-builderand qubes-manager) will be kept open source, GPL specifically. Additionally all the code needed for building of Xen-based Qubes OS with Linux-based AppVMs and Linux-based GUI and Admin domains, will continue to be available as open source. This is to ensure Qubes OS R3 that will be based on this framework, can remain fully open source (GPL).Additionally we plan to double-license this core open source code to vendors who would like to use it in proprietary products and who would not like to be forced, by the GPL license, to share the (modified) sources.All the other modules, especially those developed to support other VMMs (Hyper-V, Virtual Box, Windows Native Isolation), as well as those to support Windows OS (gui-agent-windows, core-agent-windows, core-admin-windows, etc) will most likely be proprietary and will be available only to vendors who decide to work with us and buy a license.So, if you want to develop an open source product that uses Qubes framework, then you can freely do that as all the required core components for this will be open sourced. But if you would like to make a proprietary product, then you should buy a license from us. I think this is a pretty fair deal.  Current status and roadmapWe\'re currently working on two fronts: one is rewriting current Qubes code to support Qubes HAL, while the other one is adding a backend for Windows Native Isolation (which also involves doing things such as GUI isolation right on Windows).We believe that by implementing two such extreme backends: Xen and Windows Native Isolation we can best show the flexibility of the framework (plus our customer is especially interested in this backend;)We should be able to publish some code, i.e. the framework together with early Qubes OS R3 that will be based on it, sometime in fall or maybe earlier.We obviously are determined to further develop Xen-based Qubes OS, because we believe this is the most practically secure OS available today, and we believe such OS should be open source.Qubes R2 will still be based on the Xen-hardcoded code, because it\'s close to the final release and we don\'t want to introduce such drastic changes at this stage. The only thing that Qubes R2 will get in common with Qubes Odyssey is this new source code layout as presented above (but still with hardcoded xl calls and xen-vchan).So, this is all really exciting and a big thing, let\'s see if we can change the industry with this :)Oh, and BTW, some readers might be wondering why the framework was codenamed Odyssey -- this is obviously because of the HAL which plays a central role here, and which, of course, also brings to mind the famous Kubrick\'s movie.', 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Introducing Qubes Odyssey Framework', 'language': None}, 'updated': u'2014-11-27T13:26:11.508+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'link': u'http://theinvisiblethings.blogspot.com/2013/03/introducing-qubes-odyssey-framework.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://3.bp.blogspot.com/-x0nnYdPBMWY/UUsxEwJCxhI/AAAAAAAAAKs/_jpzGFGXT4k/s72-c/Qubes+Odyssey+Diagrams+1.png', 'width': u'72', 'height': u'72'}], 'summary': u'<br /><div style="margin-bottom: 0.12in;">Qubes OS is becoming <a href="http://theinvisiblethings.blogspot.com/2013/02/qubes-2-beta-2-has-been-released.html">more and more</a> advanced, polished, and user friendly OS.</div><div style="margin-bottom: 0.12in;">But Qubes OS, even as advanced as it is now, surely have its limitations. Limitations, that for some users might be difficult to accept, and might discourage them from even trying out the OS. One such limitation is lack of 3D graphics support for applications running in AppVMs. Another one is still-far-from-ideal hardware compatibility \u2013 a somehow inherent problem for most (all?) Linux-based systems.</div><div style="margin-bottom: 0.12in;">There is also one more \u201climitation\u201d of Qubes OS, particularly difficult to overcome... Namely that it is a standalone Operating System, not an <i>application</i> that could be installed inside the user\'s <i>existing</i><span style="font-style: normal;"> OS. While installing a new application that increases system\'s security is a no-brianer for most people, switching to a new, exotic OS, is quite a different story...</span></div><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">Before I discuss how we plan to address those limitations, let\'s first make a quick digression about what Qubes </span><i>really</i><span style="font-style: normal;"></span><span style="font-style: normal;">is</span><span style="font-style: normal;">, </span><span style="font-style: normal;">as many people often get that wrong...</span></div><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">           </span></div><div style="margin-bottom: 0.12in;"><b><span style="font-style: normal;">What Qubes IS, and what </span><span style="font-style: normal;">Qubes </span><span style="font-style: normal;">IS NOT?</span></b></div><div style="margin-bottom: 0.12in;"><span style="font-style: normal;">Qubes surely is not Xen! Qubes only </span><i>uses</i><span style="font-style: normal;">Xen to create isolat</span><span style="font-style: normal;">ed</span><span style="font-style: normal;">containers \u2013 security domains </span><span style="font-style: normal;">(</span><span style="font-style: normal;">or zones</span><span style="font-style: normal;">)</span><span style="font-style: normal;">. Qubes also is not a Linux distribution! </span><span style="font-style: normal;">S</span><span style="font-style: normal;">ure, we currently use Fedora 18 as the default template for AppVMs, but </span><span style="font-style: normal;">at the same time </span><span style="font-style: normal;">we also support Windows VMs. </span><span style="font-style: normal;">A</span><span style="font-style: normal;">nd while we also use </span><span style="font-style: normal;">Linux </span><span style="font-style: normal;">as GUI and admin domain, we could really use something different \u2013 e.g. Windows as GUI domain.</span></div><div style="margin-bottom: 0.12in;"><span style="font-style: normal;">So, what is Qubes then? Qubes (note how I\'ve suddenly dropped the OS suffix) is several things:</span></div><ul><li><div style="margin-bottom: 0.12in;"><span style="font-style: normal;">The  </span><span style="font-style: normal;"><b>way how to configure,  </b></span><span style="font-style: normal;"><b>harden, </b></span><span style="font-style: normal;"><b>and  </b></span><span style="font-style: normal;"><b>use</b></span><span style="font-style: normal;"><b> </b></span><span style="font-style: normal;"><b>the </b></span><span style="font-style: normal;"><b>VMM</b></span><span style="font-style: normal;"> </span><span style="font-style: normal;">(e.g. Xen) to create  isolated security domains, and to minimize </span><span style="font-style: normal;">overall  </span><span style="font-style: normal;">system TC</span><span style="font-style: normal;">B</span><span style="font-style: normal;">.</span></div></li><li><div style="margin-bottom: 0.12in;"><span style="font-style: normal;">Secure</span><span style="font-style: normal;"> </span><span style="font-style: normal;"><b>GUI virtualization</b></span><span style="font-style: normal;"> </span><span style="font-style: normal;">that provides strong gui isolation, while at the same time, provides also seamless  integration of all applications running in different VMs onto one common  desktop. Plus a</span><span style="font-style: normal;"> </span><span style="font-style: normal;">customized  GUI environment, </span><span style="font-style: normal;">including  </span><span style="font-style: normal;">trusted Window Manager that  provide</span><span style="font-style: normal;">s</span><span style="font-style: normal;"> unspoofable decorations for </span><span style="font-style: normal;">the  </span><span style="font-style: normal;">applications\'</span><span style="font-style: normal;"> windows.</span></div></li><li><div style="margin-bottom: 0.12in;"><span style="font-style: normal;">Secure  </span><span style="font-style: normal;"><b>inter-domain  </b></span><span style="font-style: normal;"><b>communication and  services </b></span><span style="font-style: normal;"><b>infrastructure</b></span><span style="font-style: normal;"> </span><span style="font-style: normal;">with </span><span style="font-style: normal;">centr</span><span style="font-style: normal;">ally  enforced</span><span style="font-style: normal;"> policy </span><span style="font-style: normal;">engine.  </span><span style="font-style: normal;">Plus some \u201ccore\u201d  services built on top of this, such as secure file exchange between  domains.</span></div></li><li><div style="margin-bottom: 0.12in;"><span style="font-style: normal;">Various  </span><span style="font-style: normal;"><b>additional services</b></span><span style="font-style: normal;">,  or \u201caddons\u201d, built on top of Qubes infrastructure, such as  Disposable VMs, Split GPG, TorVM, Trusted PDF converter, etc. These  are just few examples, as basically the sky is the limit here.</span></div></li><li><div style="margin-bottom: 0.12in;"><span style="font-style: normal;"><b>Various  </b></span><span style="font-style: normal;"><b>additional  </b></span><span style="font-style: normal;"><b>customizations</b></span><span style="font-style: normal;"> to </span><span style="font-style: normal;">all the guest OSes that  run in various domains: GUI, Admin, ServiceVMs, and AppVMs.</span></div></li></ul><div style="font-weight: normal; margin-bottom: 0.12in;">  </div><div style="margin-bottom: 0.12in;"><b><span style="font-style: normal;">Introducing </span><span style="font-style: normal;">Qubes HAL: Hypervisor Abstraction Layer</span></b></div><div style="margin-bottom: 0.12in;"><span style="font-style: normal;"><span style="font-weight: normal;">Because Qubes is a bunch of technologies and approaches that are mostly independent from the underlying hypervisor, </span></span><span style="font-style: normal;"><span style="font-weight: normal;">as discussed above, </span></span><span style="font-style: normal;"><span style="font-weight: normal;">it\'s quite natural to consider if we could easily build an abstraction layer </span></span><span style="font-style: normal;"><span style="font-weight: normal;">to </span></span><span style="font-style: normal;"><span style="font-weight: normal;">allow </span></span><span style="font-style: normal;"><span style="font-weight: normal;">the </span></span><span style="font-style: normal;"><span style="font-weight: normal;">use </span></span><span style="font-style: normal;"><span style="font-weight: normal;">of </span></span><span style="font-style: normal;"><span style="font-weight: normal;">different VMMs with Qubes, instead </span></span><span style="font-style: normal;"><span style="font-weight: normal;">of </span></span><span style="font-style: normal;"><span style="font-weight: normal;">j</span></span><span style="font-style: normal;"><span style="font-weight: normal;">ust Xen? </span></span><span style="font-style: normal;"><span style="font-weight: normal;">Turns out this is not as difficult as we originally though</span></span><span style="font-style: normal;"><span style="font-weight: normal;">t, </span></span><span style="font-style: normal;"><span style="font-weight: normal;">a</span></span><span style="font-style: normal;"><span style="font-weight: normal;">nd this is exactly the direction we\'re taking right now </span></span><span style="font-style: normal;"><span style="font-weight: normal;">with Qubes Odyssey</span></span><span style="font-style: normal;"><span style="font-weight: normal;">! </span></span><span style="font-style: normal;"><span style="font-weight: normal;">To make this possible we\'re going to use the <a href="http://libvirt.org/">libvirt</a></span></span><a href="http://libvirt.org/"> project</a>.</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0.12in;">So, we might imagine Qubes that is based on Hyper-V or even Virtual Box or VMWare Workstation. In the case of the last two Qubes would no longer be a standalone OS, but rather an \u201capplication\u201d that one installs on top of an existing OS, such as Windows. The obvious advantage  we\'re gaining here is improved hardware compatibility, and ease of deployment.</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0.12in;">And we can go even further and ask: why not use Windows Native Isolation, i.e. mechanisms such as user account separation, process isolation, and ACLs, to implement domain isolation? In other words why not use Windows OS as a kind of \u201cVMM\u201d? This would further dramatically improve  then lightness of the system...</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0.12in;">Of course the price we pay for all this is progressively degraded security, as e.g. Virtual Box cannot be a match to Xen in terms of security, both architecturally and implementation-wise, and not to mention the quality of isolation provided by the Windows kernel, which is even less.</div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-x0nnYdPBMWY/UUsxEwJCxhI/AAAAAAAAAKs/_jpzGFGXT4k/s1600/Qubes+Odyssey+Diagrams+1.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="300" src="http://3.bp.blogspot.com/-x0nnYdPBMWY/UUsxEwJCxhI/AAAAAAAAAKs/_jpzGFGXT4k/s400/Qubes+Odyssey+Diagrams+1.png" width="400" /></a></div>&nbsp;            <br /><div style="font-style: normal; font-weight: normal; margin-bottom: 0.12in;">But on the other hand, it\'s still better than using \u201cjust Windows\u201d which offers essentially only one \u201czone\u201d, so no domain isolation at all! And if we can get, with minimal effort, most of our Qubes code to work with all those various isolation providers then... why not?</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0.12in;">Being able to seamlessly switch between various hypervisors is only part of the story, of course. The remaining part is the support for different OSes used for various Qubes domains. Currently we use Linux, specifically Fedora 18, in our GUI &amp; Admin domain, but there is no fundamental reason why we couldn\'t use Windows there instead. We discuss this more in-depth in one of the paragraphs below.</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0.12in;">The diagram below tries to illustrate the trade-offs between hardware compatibility and ease of deployment vs. security when using different isolation backends with Qubes. Some variants might also offer additional benefits, such as \u201csuper-lightness\u201d in terms of CPU and memory resources required, as is the case with Windows Native Isolation.</div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-HhDM-aMisq8/UUsxO4o80UI/AAAAAAAAAK0/8sTP4LZIGhg/s1600/Qubes+Odyssey+Diagrams+2.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="300" src="http://4.bp.blogspot.com/-HhDM-aMisq8/UUsxO4o80UI/AAAAAAAAAK0/8sTP4LZIGhg/s400/Qubes+Odyssey+Diagrams+2.png" width="400" /></a></div>&nbsp;            <br /><div style="margin-bottom: 0.12in;"><b><span style="font-style: normal;">Some example configurations</span></b></div><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">Let\'s now discuss two extreme variants of Qubes \u2013 one based on the baremetal Xen hypervisor and the other one based on Windows Native Isolation, so a variant from the </span><span style="font-style: normal;">opposite </span><span style="font-style: normal;">end</span><span style="font-style: normal;">of the spectrum </span><span style="font-style: normal;">(as shown on the illustration above).</span></div><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">The diagram below shows </span><span style="font-style: normal;">a </span><span style="font-style: normal;">configuration that uses a </span><span style="font-style: normal;">decent </span><span style="font-style: normal;">baremetal hypervisor, such as Xen, with abilities to securely assign devices to untrusted service </span><span style="font-style: normal;">domains</span><span style="font-style: normal;">(NetVM, UsbVM). So</span><span style="font-style: normal;">, this is very similar to the current Qubes OS.</span></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-rO-XZF5DsFk/UUsxPE-PUXI/AAAAAAAAALA/Xa33gAfmNLQ/s1600/Qubes+Odyssey+Diagrams+3.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="300" src="http://4.bp.blogspot.com/-rO-XZF5DsFk/UUsxPE-PUXI/AAAAAAAAALA/Xa33gAfmNLQ/s400/Qubes+Odyssey+Diagrams+3.png" width="400" /></a></div>&nbsp;            <br /><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">Additionally </span><span style="font-style: normal;">we</span><span style="font-style: normal;"></span><span style="font-style: normal;">see</span><span style="font-style: normal;">separate GUI and </span><span style="font-style: normal;">A</span><span style="font-style: normal;">dmin domain</span><span style="font-style: normal;">s:</span><span style="font-style: normal;"></span><span style="font-style: normal;">t</span><span style="font-style: normal;">he GUI domain might perhaps be based on Windows, to provide users with a familiar UI, while the </span><span style="font-style: normal;">A</span><span style="font-style: normal;">dmin domain, </span><span style="font-style: normal;">tasked with domain management and policy enforcement,</span><span style="font-style: normal;">might be based on some minimal Linux </span><span style="font-style: normal;">distribution.</span></div><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">In </span><span style="font-style: normal;">the </span><span style="font-style: normal;">current Qubes OS </span><span style="font-style: normal;">there is no distinction between a </span><span style="font-style: normal;">GUI and </span><span style="font-style: normal;">an </span><span style="font-style: normal;">Admin domain </span><span style="font-style: normal;">--</span><span style="font-style: normal;">both </span><span style="font-style: normal;">are </span><span style="font-style: normal;">hosted within one domain called \u201cdom0\u201d. But </span><span style="font-style: normal;">in some cases </span><span style="font-style: normal;">there </span><span style="font-style: normal;">are </span><span style="font-style: normal;">benefits of </span><span style="font-style: normal;">separating the GUI domain from the Admin domain. </span><span style="font-style: normal;">I</span><span style="font-style: normal;">n a corporate scenario, </span><span style="font-style: normal;">for example, the Admin domain </span><span style="font-style: normal;">might </span><span style="font-style: normal;">be accessible only </span><span style="font-style: normal;">to the</span><span style="font-style: normal;"> IT department and not to the end user. This way the user w</span><span style="font-style: normal;">ould</span><span style="font-style: normal;">have no way of </span><span style="font-style: normal;">modifying system-wide policies, and e.g. </span><span style="font-style: normal;">allowing their \u201cwork\u201d domain to suddenly talk to the </span><span style="font-style: normal;">wild </span><span style="font-style: normal;">open Internet, </span><span style="font-style: normal;">o</span><span style="font-style: normal;">r to copy </span><span style="font-style: normal;">work</span><span style="font-style: normal;">project files from \u201cwork\u201d to \u201cpersonal\u201d </span><span style="font-style: normal;">domains</span><span style="font-style: normal;">(save for the exotic, </span><span style="font-style: normal;">low-bandwidth</span><span style="font-style: normal;">covert channels, such as through CPU cache).</span></div><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">The ability to deprivilege networking and USB stacks by assigning corresponding devices (NICs, and USB controllers) to untrusted, or semi-trused, domains provides great security benefit</span><span style="font-style: normal;">s</span><span style="font-style: normal;">. </span><span style="font-style: normal;">This automatically prevents various attacks </span><span style="font-style: normal;">against </span><span style="font-style: normal;">the </span><span style="font-style: normal;">bugs in </span><span style="font-style: normal;">WiFi stacks </span><span style="font-style: normal;">or </span><a href="http://theinvisiblethings.blogspot.com/2011/06/usb-security-challenges.html"><span style="font-style: normal;">USB </span><span style="font-style: normal;">stacks</span></a><span style="font-style: normal;">.</span></div><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">What is not seen on the diagram, but what is typical for baremetal hypervisors is that</span><span style="font-style: normal;"> </span><span style="font-style: normal;">they are usually much smaller than hosted hypervisors, </span><span style="font-style: normal;">implementing less services, and </span><span style="font-style: normal;">delegating most tasks, such as </span><span style="font-style: normal;">the infamous </span><span style="font-style: normal;">I/O emulation</span><span style="font-style: normal;"> </span><span style="font-style: normal;">to </span><span style="font-style: normal;">(</span><span style="font-style: normal;">often</span><span style="font-style: normal;">)</span><span style="font-style: normal;">unprivileged VMs.</span></div><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">Let\'s now look at the other extreme example of using Qubes \u2013 the diagram below shows </span><span style="font-style: normal;">an architecture of a \u201cQubized\u201d Windows system that uses either a hosted VMM, such as Virtual Box or VMWare Workstation, or even </span><span style="font-style: normal;">the previously mentioned </span><span style="font-style: normal;">Windows Native Isolation mechanisms, as an isolation provider for domains.</span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-r5BMJgT7h-A/UUsxPRn3RTI/AAAAAAAAALI/WoxyFd59FYI/s1600/Qubes+Odyssey+Diagrams+4.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="300" src="http://1.bp.blogspot.com/-r5BMJgT7h-A/UUsxPRn3RTI/AAAAAAAAALI/WoxyFd59FYI/s400/Qubes+Odyssey+Diagrams+4.png" width="400" /></a></div>&nbsp; <br />  <br /><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">Of course this architecture lacks many benefits discussed above, such as untrusted domains for networking and USB stacks, small hypervisors, etc. But it still can be used to implement multiple security domains, at </span><span style="font-style: normal;">a</span><span style="font-style: normal;">much lower \u201cprice\u201d: better hardware compatibility, easier deployment, and in case of Windows Native Isolation \u2013 excellent performance.</span></div><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">And it really can be made reasonable, although it might require more effort&nbsp; </span><span style="font-style: normal;">than it might seem at first sight</span><span style="font-style: normal;">. Take Windows Native Isolation \u2013 of course just creating different user accounts to represent different domains is not enough, because Windows still doesn\'t implement true GUI-level isolation. Nor network isolation. So, there is a challenge to do it right, and \u201cright\u201d in this case </span><span style="font-style: normal;">means </span><span style="font-style: normal;">to make the isolation as good as the Windows kernel can isolate processes from different users from each other.</span></div><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">Sure, a single kernel exploit destroys this all, but it\'s still better than \u201cone application can (legally) read all my files\u201d policy that 99% of all desktop OSes out there essentially implement </span><span style="font-style: normal;">today.</span></div><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">Now, probably the best thing with all this is that once we implement a product based on, say, Qubes for Windows, together with various cool \u201caddons\u201d that will take advantage of the Qubes services infrastructure, and which shall be product-specific, it should then be really easy to upgrade to another VMM, say Hyper-V to boost security. And the users shall not even notice a change in the UI, save for the performance degradation perhaps (well, clearly automatic creation of VMs to handle various users tasks would be more costly on Hyper-V than with Windows Native Isolation, where \u201cVMs\u201d are just... processes).</span></div><div style="margin-bottom: 0.12in;"><b><span style="font-style: normal;">Qubes building blocks \u2013 </span><span style="font-style: normal;">implementation details</span></b></div><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">Let\'s have a look </span><span style="font-style: normal;">now </span><span style="font-style: normal;">at the repository layout for the latest Qubes </span><span style="font-style: normal;">OS</span><span style="font-style: normal;">sources \u2013 every name listed below represents a separate code repository that corresponds to a logical module, or a building block of a Qubes system:</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-admin</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-admin-linux</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-agent-linux</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-agent-windows</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-vchan-xen</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">desktop-linux-kde</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">desktop-linux-xfce4</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">gui-agent-linux</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">gui-agent-windows</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">gui-agent-xen-hvm-stubdom</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">gui-common</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">gui-daemon</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">linux-dom0-updates</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">linux-installer-qubes-os</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">linux-kernel</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">linux-template-builder</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">linux-utils</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">linux-yum</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">qubes-app-linux-pdf-converter</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">qubes-app-linux-split-gpg</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">qubes-app-linux-tor</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">qubes-app-thunderbird</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">qubes-builder</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">qubes-manager</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">vmm-xen</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">vmm-xen-windows-pvdrivers</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><br /></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">           </span></div><div style="font-weight: normal; margin-bottom: 0.12in;"><span style="font-style: normal;">Because </span><span style="font-style: normal;">current </span><span style="font-style: normal;">Qubes R2 still doesn\'t use HAL layer to support different hypervisors, it can currently </span><span style="font-style: normal;">be </span><span style="font-style: normal;">used </span><span style="font-style: normal;">with </span><span style="font-style: normal;">only one hypervisor, </span><span style="font-style: normal;">namely Xen, whose code is provided by the </span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;">vmm-xen</span></span><span style="font-style: normal;">repository (in an ideal world we would be just using vanilla Xen instead of build</span><span style="font-style: normal;">ing</span><span style="font-style: normal;">our own from sources, </span><span style="font-style: normal;">but i</span><span style="font-style: normal;">n reality we like the ability to build it ourselves, slightly modifying some things).</span></div><div style="margin-bottom: 0.12in;"><span style="font-style: normal;">O</span><span style="font-style: normal;">nce we </span><span style="font-style: normal;">move towards the Qubes Odyssey architecture </span><span style="font-style: normal;">(essentially by replacing </span><span style="font-style: normal;">the</span><span style="font-style: normal;">hardcoded calls </span><span style="font-style: normal;">to Xen\'s management stack, </span><span style="font-style: normal;">in the </span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;">core-admin</span></span><span style="font-style: normal;"></span><span style="font-style: normal;">module, </span><span style="font-style: normal;">with libvirt calls)</span><span style="font-style: normal;">, we could </span><span style="font-style: normal;">then easily switch Xen for other hypervisors, such as Hyper-V or Virtual Box. In case of Hyper-V we would not have access to the sources of the VMM, of course, so would just be using the stock binaries, although we still might want to maintain </span><span style="font-style: normal;">the</span><span style="font-style: normal;"></span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;">vmm-hyperv </span></span><span style="font-style: normal;">repository that could contain various hardening scripts and configuration files </span><span style="font-style: normal;">for this </span><span style="font-style: normal;">VMM. </span><span style="font-style: normal;">Or might not. </span><span style="font-style: normal;">Also, chances are high that we would be just able to use the stock libvirt driver</span><span style="font-style: normal;">s</span><span style="font-style: normal;">for Hyper-V </span><span style="font-style: normal;">or Virtual Box,</span><span style="font-style: normal;">so no need for creating </span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;">core-</span></span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;">libvirt-</span></span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;">hyper</span></span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;">v</span></span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;"></span></span>or <span style="font-family: FreeMono, monospace;"><span style="font-style: normal;">core-</span></span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;"><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;">libvirt-</span></span>virtualbox</span></span><span style="font-style: normal;">backend</span><span style="font-style: normal;">s</span><span style="font-style: normal;">.</span></div><div style="margin-bottom: 0.12in;"><span style="font-style: normal;">What we will need to provide, is our</span><span style="font-style: normal;">custom inter-</span><span style="font-style: normal;">domain</span><span style="font-style: normal;">communication library </span><span style="font-style: normal;">for each hypervisor supported.</span><span style="font-style: normal;"></span><span style="font-style: normal;">This means we will need to write </span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;">core-vchan-hyper</span></span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;">v</span></span><span style="font-style: normal;">or </span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;">core-vchan-virtualbox</span></span><span style="font-style: normal;">. Most (all?) VMMs do provide some kind of API for inter-VM communication (or at least VM-host communication), so the main task of such component is to</span><span style="font-style: normal;"></span><span style="font-style: normal;"> wrap </span><span style="font-style: normal;">the VMM-custom mechanism</span><span style="font-style: normal;"> with Qubes-</span><span style="font-style: normal;">standarized</span><span style="font-style: normal;">API for vchan </span><span style="font-style: normal;">(and this standardization is one thing we\'re currently working on)</span><span style="font-style: normal;">. </span><span style="font-style: normal;">All in all, i</span><span style="font-style: normal;">n most cases </span><span style="font-style: normal;">this will be a</span><span style="font-style: normal;">simple task.</span></div><div style="margin-bottom: 0.12in;">If we, on the other hand, wanted to support an \u201cexotic\u201d VMM, such as the previously mentioned Windows Native Isolation, which is not really a true VMM, then we will need to write our own libvirt backend to support is:</div><div style="margin-bottom: 0.12in;"><span style="font-family: FreeMono, monospace;">core-libvirt-windows</span></div><div style="margin-bottom: 0.12in;">... as well as the corresponding vchan module (which should be especially trivial to write in this case):</div><div style="margin-bottom: 0.12in;"><span style="font-family: FreeMono, monospace;">core-vchan-windows</span></div><div style="margin-bottom: 0.12in;"><span style="font-style: normal;"><span style="font-weight: normal;">Additionally, if we\'re building a system where the Admin domain is not based on Linux, which would </span></span><span style="font-style: normal;"><span style="font-weight: normal;">likely </span></span><span style="font-style: normal;"><span style="font-weight: normal;">be the case if we used Hyper-V, or Virtual Box for Windows, or, especially, Windows Native Isolation, then we should also provide </span></span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;"><span style="font-weight: normal;">core-admin-windows</span></span></span><span style="font-style: normal;"><span style="font-weight: normal;">module, that, among other things, </span></span><span style="font-style: normal;"><span style="font-weight: normal;">should </span></span><span style="font-style: normal;"><span style="font-weight: normal;">provide </span></span><span style="font-style: normal;"><span style="font-weight: normal;">Qubes </span></span><span style="font-style: normal;"><span style="font-weight: normal;"><a href="http://wiki.qubes-os.org/trac/wiki/Qrexec"><i>qrexec</i></a>implementation, something that is highly OS-dependent.</span></span></div><div style="margin-bottom: 0.12in;"><span style="font-style: normal;"><span style="font-weight: normal;">As can be seen above, we currently only have </span></span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;"><span style="font-weight: normal;">core-admin-linux</span></span></span><span style="font-style: normal;"><span style="font-weight: normal;">, which is understandable as we currently use Linux in Dom0. But the good news is that we only </span></span><span style="font-style: normal;"><span style="font-weight: normal;">need to </span></span><span style="font-style: normal;"><span style="font-weight: normal;">write </span></span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;"><span style="font-weight: normal;">core-admin-XXX</span></span></span><span style="font-style: normal;"><span style="font-weight: normal;">once for each OS that is to be supported as an </span></span><span style="font-style: normal;"><span style="font-weight: normal;">A</span></span><span style="font-style: normal;"><span style="font-weight: normal;">dmin domain, a</span></span><span style="font-style: normal;"><span style="font-weight: normal;">s</span></span><span style="font-style: normal;"><span style="font-weight: normal;">this </span></span><span style="font-style: normal;"><span style="font-weight: normal;">code should not be depend on the actual VMM used (thanks to our smart HAL).</span></span></div><div style="margin-bottom: 0.12in;"><span style="font-style: normal;"><span style="font-weight: normal;">Similarly, we also need to assure that our </span></span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;"><span style="font-weight: normal;">gui-daemon</span></span></span><span style="font-style: normal;"><span style="font-weight: normal;">can run on the OS that is </span></span><span style="font-style: normal;"><span style="font-weight: normal;">to be </span></span><span style="font-style: normal;"><span style="font-weight: normal;">used as </span></span><span style="font-style: normal;"><span style="font-weight: normal;">a </span></span><span style="font-style: normal;"><span style="font-weight: normal;">GUI domain (again, in most cases GUI domain would be the same as Admin domain, but not always). Here the situation is generally much easier because \u201cwith just a few #ifdefs\u201d our </span></span><span style="font-style: normal;"><span style="font-weight: normal;">current GUI</span></span><span style="font-style: normal;"><span style="font-weight: normal;">daemon should compile and run on most OSes, from Linux/Xorg to Windows and Macs </span></span><span style="font-style: normal;"><span style="font-weight: normal;">(which is the reason we only have one </span></span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;"><span style="font-weight: normal;">gui-daemon</span></span></span><span style="font-style: normal;"><span style="font-weight: normal;">repository, instead of several </span></span><span style="font-family: FreeMono, monospace;"><span style="font-style: normal;"><span style="font-weight: normal;">gui-daemon-XXX</span></span></span><span style="font-style: normal;"><span style="font-weight: normal;">).</span></span></div><div style="margin-bottom: 0.12in;"><span style="font-style: normal;"><span style="font-weight: normal;">Finally we should provide some code that will gather all the components need</span></span><span style="font-style: normal;"><span style="font-weight: normal;">ed</span></span><span style="font-style: normal;"><span style="font-weight: normal;">for our specific product and package this all into either an installable ISO, </span></span><span style="font-style: normal;"><span style="font-weight: normal;">if Qubes is </span></span><span style="font-style: normal;"><span style="font-weight: normal;">to be </span></span><span style="font-style: normal;"><span style="font-weight: normal;">a standalone OS, </span></span><span style="font-style: normal;"><span style="font-weight: normal;">like current Qubes</span></span><span style="font-style: normal;"><span style="font-weight: normal;">,</span></span><span style="font-style: normal;"><span style="font-weight: normal;">or </span></span><span style="font-style: normal;"><span style="font-weight: normal;">into an </span></span><span style="font-style: normal;"><span style="font-weight: normal;">executable, in case Qubes is </span></span><span style="font-style: normal;"><span style="font-weight: normal;">to be </span></span><span style="font-style: normal;"><span style="font-weight: normal;">an \u201capplication\u201d. The installer, depending on the product, might do some cool things, such as e.g. take current user system and automatically move it into one of Qubes domains.</span></span></div><div style="margin-bottom: 0.12in;"><span style="font-style: normal;"><span style="font-weight: normal;">To summary, these would be the components needed to build \u201cQubes for Windows\u201d product:</span></span></div><span style="font-family: FreeMono, monospace;">core-admin</span><br /><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-admin-windows</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-agent-windows</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-vchan-windows</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-libvirt-windows </span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">desktop-windows</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">gui-agent-windows</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">gui-common</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">gui-daemon</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">windows-installer-qubes-for-windows</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">qubes-builder</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">qubes-manager</span></div><div lang="zxx" style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0.12in;"><span lang="zxx">Additionally we will likely need a few </span><span style="font-family: FreeMono, monospace;"><span lang="zxx">qubes-app-*</span></span><span lang="zxx">modules that would implement some "addons", such as perhaps automatic links and documents opening in specific VMs, e.g.:</span></div><div style="margin-bottom: 0.12in;"><span style="font-family: FreeMono, monospace;"><span lang="zxx">qubes-app-windows-mime-handlers</span></span></div><div lang="zxx" style="margin-bottom: 0.12in;"><span style="font-style: normal;"><span style="font-weight: normal;">Here, again, the sky\'s the limit and this is specifically the area where each vendor can go to great lenghts and build killer apps using our Qubes framework.</span></span></div><div lang="zxx" style="margin-bottom: 0.12in;"><span style="font-style: normal;"><span style="font-weight: normal;">Now</span></span><span style="font-style: normal;"><span style="font-weight: normal;">, if we wanted to create "Qubes for Hyper-V" we would need the following components:</span></span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-admin</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-admin-windows</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-agent-linux</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-agent-windows</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">core-vchan-hyperv</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">desktop-windows</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">gui-agent-linux</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">gui-agent-windows</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">gui-common</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">gui-daemon</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">windows-installer-qubes-hyperv</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">qubes-app-XXX</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">qubes-builder</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">qubes-manager</span></div><div lang="zxx" style="font-weight: normal; margin-bottom: 0in;"><span style="font-family: FreeMono, monospace;">vmm-hyperv</span></div><div lang="zxx" style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0.12in;">Here, as an example, I also left optional <span style="font-family: FreeMono, monospace;">core-agent-linux</span> and <span style="font-family: FreeMono, monospace;">gui-agent-linux</span> components (the same that are to be used with Xen-based Qubes OS) to allow support for also Linux-based VMs \u2013 if we can get those \u201cfor free\u201d, then why not!  </div><div style="margin-bottom: 0.12in;">It should be striking how many of those components are the same in both of those two cases \u2013 essentially the only differences are made by the use of different <span style="font-family: FreeMono, monospace;">vmm-*</span> components and, of course, the different installer</div><div style="margin-bottom: 0.12in;">It should be also clear now how this framework now enables seamless upgrades from one product (say Qubes for Windows) to another (say Qubes for Hyper-V).</div><div style="margin-bottom: 0.12in;"><b>Licensing</b></div><div style="font-weight: normal; margin-bottom: 0.12in;">Our business model assumes working with vendors, as opposed to end users, and licensing to them various code modules needed to create products based on Qubes.</div><div style="font-weight: normal; margin-bottom: 0.12in;">All the code that comprises the base foundation needed for creation of any Qubes variant (so <span style="font-family: FreeMono, monospace;">core-admin</span>, <span style="font-family: FreeMono, monospace;">gui-common</span>, <span style="font-family: FreeMono, monospace;">gui-daemon</span>, <span style="font-family: FreeMono, monospace;">qubes-builder</span>and <span style="font-family: FreeMono, monospace;">qubes-manager</span>) will be kept open source, GPL specifically. Additionally all the code needed for building of Xen-based Qubes OS with Linux-based AppVMs and Linux-based GUI and Admin domains, will continue to be available as open source. This is to ensure Qubes OS R3 that will be based on this framework, can remain fully open source (GPL).</div><div style="font-weight: normal; margin-bottom: 0.12in;">Additionally we plan to double-license this core open source code to vendors who would like to use it in proprietary products and who would not like to be forced, by the GPL license, to share the (modified) sources.</div><div style="font-weight: normal; margin-bottom: 0.12in;">All the other modules, especially those developed to support other VMMs (Hyper-V, Virtual Box, Windows Native Isolation), as well as those to support Windows OS (<span style="font-family: FreeMono, monospace;">gui-agent-windows</span>, <span style="font-family: FreeMono, monospace;">core-agent-windows</span>, <span style="font-family: FreeMono, monospace;">core-admin-windows</span>, etc) will most likely be proprietary and will be available only to vendors who decide to work with us and buy a license.</div><div style="font-weight: normal; margin-bottom: 0.12in;">So, if you want to develop an open source product that uses Qubes framework, then you can freely do that as all the required core components for this will be open sourced. But if you would like to make a proprietary product, then you should buy a license from us. I think this is a pretty fair deal.  </div><div style="font-weight: normal; margin-bottom: 0.12in;"><b>Current status and roadmap</b></div><div style="font-weight: normal; margin-bottom: 0.12in;">We\'re currently working on two fronts: one is rewriting current Qubes code to support Qubes HAL, while the other one is adding a backend for Windows Native Isolation (which also involves doing things such as GUI isolation right on Windows).</div><div style="font-weight: normal; margin-bottom: 0.12in;">We believe that by implementing two such extreme backends: Xen and Windows Native Isolation we can best show the flexibility of the framework (plus our customer is especially interested in this backend;)</div><div style="font-weight: normal; margin-bottom: 0.12in;">We should be able to publish some code, i.e. the framework together with early Qubes OS R3 that will be based on it, sometime in fall or maybe earlier.</div><div style="font-weight: normal; margin-bottom: 0.12in;">We obviously are determined to further develop Xen-based Qubes OS, because we believe this is the most practically secure OS available today, and we believe such OS should be open source.</div><div style="font-weight: normal; margin-bottom: 0.12in;">Qubes R2 will still be based on the Xen-hardcoded code, because it\'s close to the final release and we don\'t want to introduce such drastic changes at this stage. The only thing that Qubes R2 will get in common with Qubes Odyssey is this new source code layout as presented above (but still with hardcoded xl calls and xen-vchan).</div><div style="font-weight: normal; margin-bottom: 0.12in;">So, this is all really exciting and a big thing, let\'s see if we can change the industry with this :)</div><div style="font-weight: normal; margin-bottom: 0.12in;">Oh, and BTW, some readers might be wondering why the framework was codenamed \u201cOdyssey\u201d -- this is obviously because of the \u201cHAL\u201d which plays a central role here, and which, of course, also brings to mind the famous Kubrick\'s movie.</div><div style="font-weight: normal; margin-bottom: 0.12in;"></div>', 'guidislink': True, 'published': u'2013-03-21T17:47:00.001+01:00', u'thr_total': u'17', 'classifier': 'hardcoded'}
{'updated_parsed': time.struct_time(tm_year=2013, tm_mon=2, tm_mday=28, tm_hour=18, tm_min=26, tm_sec=9, tm_wday=3, tm_yday=59, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7559919355447471448/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=7559919355447471448', 'type': u'text/html', 'rel': u'replies', 'title': u'6 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7559919355447471448', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7559919355447471448', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2013/02/qubes-2-beta-2-has-been-released.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes 2 Beta 2 has been released!'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-7559919355447471448', 'published_parsed': time.struct_time(tm_year=2013, tm_mon=2, tm_mday=28, tm_hour=18, tm_min=26, tm_sec=0, tm_wday=3, tm_yday=59, tm_isdst=0), 'title': u'Qubes 2 Beta 2 has been released!', 'pred': u'announcements', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u"Qubes R2 Beta 2 with KDE 4.9 environment (click for more screenshots)   \t \t \t \t  We're progressing fast and today I would like to announce the release of Qubes R2 Beta 2 ISO. The installation and upgrade instructions, as well as the ISO itself, can be found via the our wiki page. As usual, please remember to verify the digital signature of the downloaded ISO.The major changes in this beta release include:      \t \t \t \t  Upgraded Dom0 distribution to the \tlatest Fedora 18 (all previous releases used Fedora 13 for Dom0!)Upgraded default VM template also \tto Fedora 18Upgraded Dom0 kernel to 3.7.6Upgraded KDE environment in Dom0 \t(KDE 4.9)Introduced Xfce 4.10 environment \tfor Dom0 as an alternative to KDEA few other fixes and \timprovements, including the recently discussed Disposable VM-based \tPDF converterThe upgrade of the Dom0 distribution and kernel should significantly improve hardware compatibility \u2013 one of the major problems with Qubes adoption so far, as we hear. Now, with the latest GPU drivers and Xorg packages, I hope we will be able to cover a much boarder range of hardware (especially all the newer GPUs).The upgrade of KDE in Dom0 is mostly an eye-candy type of improvement (but then, who doesn't like eye candies!), as is the introduction of the Xfce4 as its alternative, although, arguably, Xfce4 is considered faster and lighter than KDE. In Qubes the choice of an actual desktop environment that runs in Dom0 is not as important as it is on traditional Linux systems, I think, simply because most of the functionality, typically provided by such environments, such as apps and file management, is simply... disabled, because on Qubes there are no user apps or files in Dom0.  Nevertheless people love and hate particular window managers and environments, and we hope that now, by supporting alternative environments, we could appeal to even more users.I'm glad that we just completed this difficult phase of upgrading Qubes Dom0 distribution (for the first time since Qubes R1 Beta 1!) -- this forced us to clean up the code and prepare for some even bigger and bolder changes in the near future. But those will come only in Release 3. As far as Release 2 is considered, we do have quite a few more tickets scheduled for R2 Beta 3 milestone, but most of those represent various addons, rather than modifications to Qubes core software.So what are those brave changes that are to happen in Release 3? That I will write about in a separate blog post... Stay tuned!So, please enjoy this latest Qubes R2 beta release, and be sure to send all your questions and comments, as well as the HCL info, to the qubes-devel mailing list. I have already upgraded my primary laptop to this release a few days ago and everything seems to be working fine, so fear not!", 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Qubes 2 Beta 2 has been released!', 'language': None}, 'updated': u'2013-02-28T19:26:09.671+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'link': u'http://theinvisiblethings.blogspot.com/2013/02/qubes-2-beta-2-has-been-released.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://4.bp.blogspot.com/-0JE2dw3GsfA/US-a83j442I/AAAAAAAAAKc/peSktYNQeec/s72-c/r2b2-kde-start-menu.png', 'width': u'72', 'height': u'72'}], 'summary': u'<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://wiki.qubes-os.org/trac/wiki/QubesScreenshots" style="margin-left: auto; margin-right: auto;"><img border="0" height="225" src="http://4.bp.blogspot.com/-0JE2dw3GsfA/US-a83j442I/AAAAAAAAAKc/peSktYNQeec/s400/r2b2-kde-start-menu.png" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;"><a href="http://wiki.qubes-os.org/trac/wiki/QubesScreenshots">Qubes R2 Beta 2 with KDE 4.9 environment (click for more screenshots)</a></td></tr></tbody></table><br />   \t \t \t \t<!-- \t\t@page { margin: 0.79in } \t\tP { margin-bottom: 0.08in } \t\tA:link { so-language: zxx } \t-->  <br /><div style="margin-bottom: 0in;">We\'re progressing fast and today I would like to announce the release of Qubes R2 Beta 2 ISO. The installation and upgrade instructions, as well as the ISO itself, can be found via the <a href="http://wiki.qubes-os.org/trac/wiki/QubesDownloads">our wiki page</a>. As usual, please remember to verify the digital signature of the downloaded ISO.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">The major changes in this beta release include:</div><!-- \t\t@page { margin: 0.79in } \t\tP { margin-bottom: 0.08in } \t\tA:link { so-language: zxx } \t-->    <div style="margin-bottom: 0in;">  \t \t \t \t<!-- \t\t@page { margin: 0.79in } \t\tP { margin-bottom: 0.08in } \t\tA:link { so-language: zxx } \t-->  </div><ul><li><div style="margin-bottom: 0in;">Upgraded Dom0 distribution to the \tlatest Fedora 18 (all previous releases used Fedora 13 for Dom0!)</div></li><li><div style="margin-bottom: 0in;">Upgraded default VM template also \tto Fedora 18</div></li><li><div style="margin-bottom: 0in;">Upgraded Dom0 kernel to 3.7.6</div></li><li><div style="margin-bottom: 0in;">Upgraded KDE environment in Dom0 \t(KDE 4.9)</div></li><li><div style="margin-bottom: 0in;">Introduced Xfce 4.10 environment \tfor Dom0 as an alternative to KDE</div></li><li><div style="margin-bottom: 0in;">A few other fixes and \timprovements, including the recently discussed Disposable VM-based \t<a href="http://theinvisiblethings.blogspot.com/2013/02/converting-untrusted-pdfs-into-trusted.html">PDF converter</a></div></li></ul><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">The upgrade of the Dom0 distribution and kernel should significantly improve hardware compatibility \u2013 one of the major problems with Qubes adoption so far, as we hear. Now, with the latest GPU drivers and Xorg packages, I hope we will be able to cover a much boarder range of hardware (especially all the newer GPUs).</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">The upgrade of KDE in Dom0 is mostly an eye-candy type of improvement (but then, who doesn\'t like eye candies!), as is the introduction of the Xfce4 as its alternative, although, arguably, Xfce4 is considered faster and lighter than KDE. In Qubes the choice of an actual desktop environment that runs in Dom0 is not as important as it is on traditional Linux systems, I think, simply because most of the functionality, typically provided by such environments, such as apps and file management, is simply... disabled, because on Qubes there are no user apps or files in Dom0.  </div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Nevertheless people love and hate particular window managers and environments, and we hope that now, by supporting alternative environments, we could appeal to even more users.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">I\'m glad that we just completed this difficult phase of upgrading Qubes Dom0 distribution (for the first time since Qubes R1 Beta 1!) -- this forced us to clean up the code and prepare for some even bigger and bolder changes in the near future. But those will come only in Release 3. As far as Release 2 is considered, we do have quite <a href="http://wiki.qubes-os.org/trac/report/3">a few more tickets</a> scheduled for R2 Beta 3 milestone, but most of those represent various addons, rather than modifications to Qubes core software.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">So what are those brave changes that are to happen in Release 3? That I will write about in a separate blog post... Stay tuned!</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">So, please enjoy this latest Qubes R2 beta release, and be sure to send all your questions and comments, as well as the HCL info, to the <a href="http://wiki.qubes-os.org/trac/wiki/QubesLists">qubes-devel mailing list</a><a href="https://wiki.qubes-os.org/trac/wiki/QubesLists"></a>. I have already upgraded my primary laptop to this release a few days ago and everything seems to be working fine, so fear not!</div>', 'guidislink': True, 'published': u'2013-02-28T19:26:00.002+01:00', u'thr_total': u'6', 'classifier': 'drivers'}
{'updated_parsed': time.struct_time(tm_year=2013, tm_mon=2, tm_mday=21, tm_hour=19, tm_min=7, tm_sec=29, tm_wday=3, tm_yday=52, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/6301918961626950395/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=6301918961626950395', 'type': u'text/html', 'rel': u'replies', 'title': u'23 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/6301918961626950395', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/6301918961626950395', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2013/02/converting-untrusted-pdfs-into-trusted.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Converting untrusted PDFs into trusted ones: The Qubes Way'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-6301918961626950395', 'published_parsed': time.struct_time(tm_year=2013, tm_mon=2, tm_mday=21, tm_hour=19, tm_min=7, tm_sec=0, tm_wday=3, tm_yday=52, tm_isdst=0), 'title': u'Converting untrusted PDFs into trusted ones: The Qubes Way', 'pred': u'announcements', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'', 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Converting untrusted PDFs into trusted ones: The Qubes Way', 'language': None}, 'updated': u'2013-02-21T20:07:29.049+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'link': u'http://theinvisiblethings.blogspot.com/2013/02/converting-untrusted-pdfs-into-trusted.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'paper', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://1.bp.blogspot.com/-dno9bFVAjPk/USY0jfl3-WI/AAAAAAAAAKE/4WzqMREkWSc/s72-c/r2b2-converting-pdf-2.png', 'width': u'72', 'height': u'72'}], 'summary': u'<div class="tr_bq"></span></div><div style="margin-bottom: 0in;"><br /><b><span style="font-style: normal;"></span></b></div><div style="margin-bottom: 0in;"><br /><span style="font-style: normal;"></span></div><div style="margin-bottom: 0in;"><br /><span style="font-style: normal;"></span><br /><br /><span style="font-style: normal;"></span><i></i><br /><br /><span style="font-style: normal;"></span></div><div style="margin-bottom: 0in;"><br /><span style="font-style: normal;"></span><i></i><span style="font-style: normal;"></span></div><div style="margin-bottom: 0in;"><br /><span style="font-style: normal;"></span></div><div style="margin-bottom: 0in;"><br /><span style="font-style: normal;"><span style="font-family: Liberation Serif,serif;"><span style="font-size: small;"></span></span></span><br /></div><div style="margin-bottom: 0in;"><br /><span style="font-style: normal;"></span></div><div style="margin-bottom: 0in;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-88d_FP0IbWE/USY0_MdGnnI/AAAAAAAAAKM/_Irta6lHwcM/s1600/pdf-conversion.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="http://2.bp.blogspot.com/-88d_FP0IbWE/USY0_MdGnnI/AAAAAAAAAKM/_Irta6lHwcM/s320/pdf-conversion.png" width="320" /></a></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b></b></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"></div><ul><li><div style="font-weight: normal; margin-bottom: 0in;"></div></li></ul><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><ul><li><div style="margin-bottom: 0in;"><span style="font-weight: normal;"></span></div></li></ul><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><br /><br /><br /></div><b></b><br /><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><i></i></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><br /><br /><br /><i></i><span style="font-size: small;"></span><br /><br /><br /><span style="font-size: x-small;"><i></i></span></div><div style="margin-bottom: 0in;"></div><div style="margin-bottom: 0in;"></div>', 'guidislink': True, 'published': u'2013-02-21T20:07:00.001+01:00', u'thr_total': u'23', 'classifier': 'PDFs'}
{'updated': u'2012-12-15T12:46:38.198+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'os', 'updated_parsed': time.struct_time(tm_year=2012, tm_mon=12, tm_mday=15, tm_hour=11, tm_min=46, tm_sec=38, tm_wday=5, tm_yday=350, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2012, tm_mon=12, tm_mday=14, tm_hour=12, tm_min=42, tm_sec=0, tm_wday=4, tm_yday=349, tm_isdst=0), 'title': u'Qubes 2 Beta 1 with initial Windows support has been released!', 'pred': u'os', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/4370938576459656069/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=4370938576459656069', 'type': u'text/html', 'rel': u'replies', 'title': u'20 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/4370938576459656069', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/4370938576459656069', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2012/12/qubes-2-beta-1-with-initial-windows.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes 2 Beta 1 with initial Windows support has been released!'}], 'summary': u'', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Qubes 2 Beta 1 with initial Windows support has been released!', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2012/12/qubes-2-beta-1-with-initial-windows.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2012-12-14T13:42:00.001+01:00', u'thr_total': u'20', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-4370938576459656069', 'classifier': 'windows support'}
{'updated_parsed': time.struct_time(tm_year=2012, tm_mon=11, tm_mday=2, tm_hour=17, tm_min=35, tm_sec=40, tm_wday=4, tm_yday=307, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/3647954972953346145/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=3647954972953346145', 'type': u'text/html', 'rel': u'replies', 'title': u'20 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/3647954972953346145', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/3647954972953346145', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2012/09/how-is-qubes-os-different-from.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'How is Qubes OS different from...'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-3647954972953346145', 'published_parsed': time.struct_time(tm_year=2012, tm_mon=9, tm_mday=12, tm_hour=17, tm_min=2, tm_sec=0, tm_wday=2, tm_yday=256, tm_isdst=0), 'title': u'How is Qubes OS different from...', 'pred': u'security', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u"Many people ask how does Qubes OS differ from other approaches to desktop security. Today I'm trying to answer the most popular questions.Why bother with Qubes OS, if any Linux/BSD already allows to setup different user accounts, or some form of light-weight containers or sandboxes, such as chroot, LXC, SELinux?First, if you use Xorg or similar X-based server  as your GUI server, and this is what nearly all Linux, and most of the other non-Windows OSes use, then you don't have any form of GUI-level isolation, which is essential for a desktop system. I wrote more about this surprising problem some time ago. Proper GUI-level isolation was one of the main goals for Qubes.Second, all mainstream desktop OSes, such as Windows, Linux, BSD, even OSX, are all based on a monolithic kernels, which present a significant security problem. This is because a typical monolithic kernel of a contemporary desktop OS contains tens of millions of lines of code, and to make it worse, most of this code is reachable from (untrusted) applications via all sorts of APIs, making the attack surface on the kernel huge. And it requires just one successful kernel exploit to own the whole system, bypassing any security mechanisms that might have been built on top of it, such as SELinux, LXC, etc.Additionally, all the various drivers, networking and USB stacks, are also hosted in the kernel, making attacks via buggy networking (e.g. via buggy 802.11 stacksor buggy firmware) or USB stacks a practical possibility. And there is essentially nothing one can do about it, when using an OS based on a monolithic kernel.In Qubes, on the other hand, we use Xen hypervisor to provide security isolation between domains, and Xen is just a few hundred of thousands lines of code. It also doesn't need to provide all sorts of APIs to applications, because the Xen hypervisor is essentially only interested in CPU scheduling, memory management and power management, and very few things beyond that. Most notably, the Xen hypervisor knows nothing about networking, disk storage, filesystems, USB stacks, etc, as all those tasks are delegated to (often untrusted) service VMs.How is Qubes better than just  running a bunch of VMs in VMWare or Virtual Box?First, products such as VMWare Workstation or Fusion, or Virtual Box, are all examples of type II hypervisors (sometimes called hosted VMMs), which means that they run inside a normal OS, such as Windows, as ordinary processes and/or kernel modules. This means that they use the OS-provided services for all sorts of things, from networking, USB stacks, to graphics output and keyboard and mouse input, which in turn implies they can be only as secure as the hosting OS is. If the hosting OS got compromised, perhaps via a bug in its DHCP client, or USB driver, then it is a game over, also for all your VMs.Second, those popular consumer type II VMM systems have not been designed with security as a primary goal. Instead, their main focus has been on easy of use, performance, and providing seamless integration of the guest OS(es) with the host OS. Especially the latter, which involves lack of good method to identify which domain a given application belongs to (so, lack of trusted Window Manager), support for shared clipboards which every other VM can steal, insecure file sharing methods, and others, all make it not a very desirable solution when strong domain isolation is important. (This is not to imply that Qubes doesn't support clipboard or file sharing between domains, it does \u2013 it's just that we do it in a secure way, at least so we believe). On the other hand, there are many usability improvements in Qubes that are specific to multi-domain system, and which you won't find in the above mentioned products, such as trusted Window Manager that, while maintaining great seamless integration of all the applications onto a common desktop, still allows the user to always know which domain owns which window, support for advanced networking setups, per-domain policies, the just mentioned secure mechanisms for clipboard and filesystem sharing, and many other. Qubes also focuses on making the VMs light-weight so that it was possible to run really a lot of them at the same time, and also on mechanism to allow for secure filesystem sharing between domains (templates).Finally, the commercial hosted VMMs are really bloated pieces of code. They support everything and the kitchen sink (e.g. Open GL exposed to VMs, and various additional interfaces to allow e.g. drag and drop of files to/from the VM), and so, the attack surface on such a VMM system is orders of magnitude bigger than in case of Qubes OS.How does Qubes compare to [your favourite academic microkernel]?&nbsp;While the Xen hypervisor can indeed be considered a microkernel if you're not a strict terminology freak, Qubes itself is much more than just the hypervisor. Qubes is everything that is needed to build a reasonably secure desktop OS on top ofa baremetal hypervisor (or microkernel). Theoretically, with just a few cosmetic changes (at least architecture-wise), Qubes could perhaps swap the Xen hypervisor for some other hypervisor or microkernel, such as perhaps Hyper-V, KVM, or some more exotic one. Thus, it makes little sense to compare Qubes with a hypervisor or microkernel project. What makes sense is to compare the Xen hypervisor, as used in Qubes, with some other hypervisor or microkernel.Ok, so how does Xen compare with other hypervisors or microkernels out there? We think Xen is unique because it combines an elegant architecture (type I, baremetal, hypervisor) with a number of practical features, such as power management, support for Intel VT-d and driver domains, support for both para-virtualizaed, and fully-virtualized VMs, and many more, not found in e.g. academic microkernels/hypervisor projects, that otherwise seem attractive from the architecture point of view.How is Qubes better than Google  Chrome OS?&nbsp;First, Chrome OS is not a general purpose OS. Second, it's based on Linux with all its security limitation that are a result of using a monolithic kernel described above (e.g. all the networking and USB stacks in the kernel without a possibility to deprivilige them). Not being a traditional general purpose OS, Chrome is able to avoid many of the challenges of desktop computing, such as the need to define security domains, inter-domain file exchange (as there is essentially no filesystem visible to the user), and others, which is good, of course. But then again, Chrome OS is essentially just an environment to run the Chrome Browser, so the comparison to Qubes is a bit of a misunderstanding.Technical aspects aside, there is always the privacy concern associated with running everything in a browser \u2013 why would all my private data be managed and accessible to some 3rd party organizations and their administrators?How is Qubes better than [your  favorite commercial military-grade certified secure OS]?You must have heard about the super secure military-grade, formally verified, 100% certified, and generally unbreakable operating systems made by companies such as Green Hills, Lynx Works, and others. How do they compare to Qubes OS?Really, I have no idea. For a mere mortal like myself (and perhaps not a US citizen), it seems impossible to get any more technical documentation of those systems (anything beyond the marketing pseudo-technical gibberish), not to mention a trial copy to play with...Thus, from my point of view, those systems are just a vaporware. If  you, my dear reader, are privileged enough to have access to such system, then good for you, but don't expect me to treat seriously a security product that is not available for a wider audience to touch and play with... (And the Chineese surely have the copies already to play with ;)How is Qubes different than  Bromium's micro virtualization solution?Many people asked recently about the Bromium's upcoming product and how it differs from Qubes OS. Unfortunately there are few public information available on this product  \u2013 essentially there is one not-very-technical whitepaperand there are Ian Pratt's presentation slides from the recent XenSummit about u-Xen, apparently a hypervisor that is to be ultimately used in their upcoming product.The whitepaper suggests that Bromium is based on a hosted (type II) hypervisor running within a normal Window OS, and that this hypervisor is used to spawn a new micro VM for each new task, where apparently the task might be something as granular as opening a new tab in a Web browser, which makes it somehow similar to Google Chrome's approach. Clearly, the Bromium's main goal seem to be to automate the process of creating separation domains, which is in contrast with what we do on Qubes OS, where the user is required to define the domains explicitly.The Pratt's slides provide also some technical insight into how Bromium intends to secure their hypervisor. As just discussed above, a hosted hypervisor must normally trust the hosting OS, in this case Windows, which, for obvious reasons, is not a good idea from the security standpoint. Pratt, however, clearly states that host (...) can not interfere with the privacy or integrity of the hypervisor or other guests (slide #8). This is a strong statement, so let's take a closer look at their approach to this problem.The Bromium's idea of how to make their hypervisor (and the VMs) protected from a potentially malicious host OS is not really breakthrough: the slides suggest to deprivilege the host into a VT-container (I think the verb to bluepillis now an accepted term for such action ;), and to remove the host's access to the hypervisor pages (via EPT), as well as protect DMA access from devices via VT-d, plus to make this all sensible, use DRTM scheme such as Intel TXT, to load such a hypervisor from within a potentially untrusted OS.So, what's wrong with the idea of a load-on-the-fly-secure-VMM-system? Isn't Ian Pratt correct that one could protect its memory and execution from the interference of the host? Actually that is possible \u2013 Intel TXT, VT-x, VT-d, and EPT give us means to achieve that (although there are a number of catches here). But he's missing one important point: it's the untrusted OS that still owns and manages the input devices (e.g. via USB stacks and drivers) and, most importantly, the output (via the GUI subsystem and drivers). Ensuring that the host OS cannot interfere (e.g. sniff the screen of trusted applications) might be very difficult, or even impossible, in practice.If I ever was to break the security of such a system, I would just follow the simple way:1) Infect the host e.g. via one of the many USB attacks (remember they cannot have sandboxed USB driver domain, as they have only a type II hosted hypervisor),2) Hook somewhere into the GUI subsystem and keep recoding all the interesting data from the screen...... or something like that ;)There are also many other things that needs to be answered and which the publicly available documents are silent about, such as e.g. how does the system handle installation of new applications? How is clipboard and file exchange between (micro)VMs handled? How large are the interfaces exposed to each (micro)VM? For now, without a solid documentation available, and without any code to play with, it is just another vaporware for me.  (Interestingly there seem to be Bromium's Beta program, which however doesn't seem to be working, at least not for me -- I tried to signup twice, but never got any confirmation or response...?)How is Qubes different from Xen  Client?In many aspects, Xen Clientmight be the most similar product to Qubes OS. Like Qubes, it is based on the Xen hypervisor and so it is also a standalone OS, that one must install instead of one's favorite system, and also, like Qubes, it is targeted for desktop systems, and also offers a possibility to run a few VMs at a time.However, XenClient has been designed with a different goal in mind, namely as a Virtual Desktops To Go solution, while Qubes has been designed to provide seamless experience for secure multi-domain desktop system. As a result, lots of focus in Qubes has been put on creating trusted GUI subsystem, support for advanced networking configurations, secure inter-VM clipboard and file sharing, secure method to reuse the same filesystem as a basis for the AppVMs, and also to optimize the AppVMs so they start almost instantly and take little memory, so that one could easily run many of them at the same time. All those things seem to be missing from Xen Client (as well as solid technical documentation about its design).***I surely have missed a few other products or approaches -- feel free to point them out in the comments, and I might write a continuation post one day.", 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'How is Qubes OS different from...', 'language': None}, 'updated': u'2012-11-02T18:35:40.451+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'os security', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2012/09/how-is-qubes-os-different-from.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'os', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'Many people ask how does Qubes OS differ from other approaches to desktop security. Today I\'m trying to answer the most popular questions.<br /><ul><b><li><b>Why bother with Qubes OS, if any Linux/BSD already allows to setup different user accounts, or some form of light-weight containers or sandboxes, such as chroot, LXC, SELinux?</b></li></b></ul><b></b>First, if you use Xorg or similar X-based server  as your GUI server, and this is what nearly all Linux, and most of the other non-Windows OSes use, then you don\'t have any form of GUI-level isolation, which is essential for a desktop system. I wrote more about this surprising problem <a href="http://theinvisiblethings.blogspot.com/2011/04/linux-security-circus-on-gui-isolation.html">some time ago</a>. Proper GUI-level isolation was one of the main goals for Qubes.<br /><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Second, all mainstream desktop OSes, such as Windows, Linux, BSD, even OSX, are all based on a monolithic kernels, which present a significant security problem. This is because a typical monolithic kernel of a contemporary desktop OS contains tens of millions of lines of code, and to make it worse, most of this code is reachable from (untrusted) applications via all sorts of APIs, making the attack surface on the kernel huge. And it requires just one successful kernel exploit to own the whole system, bypassing any security mechanisms that might have been built on top of it, such as SELinux, LXC, etc.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Additionally, all the various drivers, networking and USB stacks, are also hosted in the kernel, making attacks via buggy networking (e.g. via <a href="https://www.blackhat.com/presentations/bh-usa-07/Eriksson_Oberg_Nyberg_and_Jammar/Whitepaper/bh-usa-07-eriksson_oberg_nyberg_and_jammar-WP.pdf">buggy 802.11 stacks</a>or <a href="http://theinvisiblethings.blogspot.com/2010/04/remotely-attacking-network-cards-or-why.html">buggy firmware</a>) or <a href="http://theinvisiblethings.blogspot.com/2011/06/usb-security-challenges.html">USB stacks</a> a practical possibility. And there is essentially nothing one can do about it, when using an OS based on a monolithic kernel.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">In Qubes, on the other hand, we use Xen hypervisor to provide security isolation between domains, and Xen is just a few hundred of thousands lines of code. It also doesn\'t need to provide all sorts of APIs to applications, because the Xen hypervisor is essentially only interested in CPU scheduling, memory management and power management, and very few things beyond that. Most notably, the Xen hypervisor knows nothing about networking, disk storage, filesystems, USB stacks, etc, as all those tasks are delegated to (often untrusted) service VMs.</div><ul><b><li><b>How is Qubes better than just  running a bunch of VMs in VMWare or Virtual Box?</b></li></b></ul><b></b><br /><div style="margin-bottom: 0in;">First, products such as VMWare Workstation or Fusion, or Virtual Box, are all examples of type II hypervisors (sometimes called \u201chosted VMMs\u201d), which means that they run inside a normal OS, such as Windows, as ordinary processes and/or kernel modules. This means that they use the OS-provided services for all sorts of things, from networking, USB stacks, to graphics output and keyboard and mouse input, which in turn implies they can be only as secure as the hosting OS is. If the hosting OS got compromised, perhaps via a bug in its DHCP client, or USB driver, then it is a game over, also for all your VMs.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Second, those popular consumer type II VMM systems have not been designed with security as a primary goal. Instead, their main focus has been on easy of use, performance, and providing seamless integration of the guest OS(es) with the host OS. Especially the latter, which involves lack of good method to identify which domain a given application belongs to (so, lack of trusted Window Manager), support for shared clipboards which every other VM can steal, insecure file sharing methods, and others, all make it not a very desirable solution when strong domain isolation is important. (This is not to imply that Qubes doesn\'t support clipboard or file sharing between domains, it does \u2013 it\'s just that we do it in a secure way, at least so we believe). On the other hand, there are many usability improvements in Qubes that are specific to multi-domain system, and which you won\'t find in the above mentioned products, such as <a href="http://qubes-os.org/Screenshots.html">trusted Window Manager</a> that, while maintaining great seamless integration of all the applications onto a common desktop, still allows the user to always know which domain owns which window, support for <a href="http://theinvisiblethings.blogspot.com/2011/09/playing-with-qubes-networking-for-fun.html">advanced networking setups</a>, per-domain policies, the just mentioned secure mechanisms for clipboard and filesystem sharing, and many other. Qubes also focuses on making the VMs light-weight so that it was possible to run really a lot of them at the same time, and also on mechanism to allow for secure filesystem sharing between domains (templates).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Finally, the commercial hosted VMMs are really bloated pieces of code. They support everything and the kitchen sink (e.g. Open GL exposed to VMs, and various additional interfaces to allow e.g. drag and drop of files to/from the VM), and so, the attack surface on such a VMM system is orders of magnitude bigger than in case of Qubes OS.</div><ul><li><b>How does Qubes compare to [your favourite academic microkernel]?&nbsp;</b></li></ul><div style="font-weight: normal; margin-bottom: 0in;">While the Xen hypervisor can indeed be considered a microkernel if you\'re not a strict terminology freak, Qubes itself is much more than just the hypervisor. Qubes is everything that is needed to build a reasonably secure desktop OS <i>on top </i><span style="font-style: normal;">of</span>a baremetal hypervisor (or microkernel). Theoretically, with just a few cosmetic changes (at least architecture-wise), Qubes could perhaps swap the Xen hypervisor for some other hypervisor or microkernel, such as perhaps Hyper-V, KVM, or some more exotic one. Thus, it makes little sense to compare Qubes with a hypervisor or microkernel project. What makes sense is to compare the Xen hypervisor, as used in Qubes, with some other hypervisor or microkernel.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Ok, so how does Xen compare with other hypervisors or microkernels out there? We think Xen is unique because it combines an elegant architecture (type I, baremetal, hypervisor) with a number of practical features, such as power management, support for Intel VT-d and driver domains, support for both para-virtualizaed, and fully-virtualized VMs, and many more, not found in e.g. academic microkernels/hypervisor projects, that otherwise seem attractive from the architecture point of view.</div><ul><li><b>How is Qubes better than Google  Chrome OS?</b></li></ul><div style="margin-bottom: 0in;"></div>&nbsp;First, Chrome OS is not a general purpose OS. Second, it\'s based on Linux with all its security limitation that are a result of using a monolithic kernel described above (e.g. all the networking and USB stacks in the kernel without a possibility to deprivilige them). Not being a traditional general purpose OS, Chrome is able to avoid many of the challenges of desktop computing, such as the need to define security domains, inter-domain file exchange (as there is essentially no filesystem visible to the user), and others, which is good, of course. But then again, Chrome OS is essentially just an environment to run the Chrome Browser, so the comparison to Qubes is a bit of a misunderstanding.<br /><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Technical aspects aside, there is always the privacy concern associated with running everything in a browser \u2013 why would all my private data be managed and accessible to some 3rd party organizations and <a href="http://gawker.com/5637234/gcreep-google-engineer-stalked-teens-spied-on-chats?skyline=true&amp;s=i">their administrators</a>?</div><ul><li><b>How is Qubes better than [your  favorite commercial military-grade certified secure OS]?</b></li></ul><div style="margin-bottom: 0in;"></div>You must have heard about the super secure military-grade, formally verified, 100% certified, and generally \u201cunbreakable\u201d operating systems made by companies such as <a href="http://www.ghs.com/products/rtos/integrity.html">Green Hills</a>, <a href="http://www.lynuxworks.com/virtualization/secure-client-virtualization.php">Lynx Works</a>, and others. How do they compare to Qubes OS?<br /><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Really, I have no idea. For a mere mortal like myself (and perhaps not a US citizen), it seems impossible to get any more technical documentation of those systems (anything beyond the marketing pseudo-technical gibberish), not to mention a trial copy to play with...</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Thus, from my point of view, those systems are just a vaporware. If  you, my dear reader, are privileged enough to have access to such system, then good for you, but don\'t expect me to treat seriously a security product that is not available for a wider audience to touch and play with... (And the Chineese surely have the copies already to play with ;)</div><ul><li><b>How is Qubes different than  Bromium\'s \u201cmicro virtualization\u201d solution?</b></li></ul><div style="margin-bottom: 0in;"></div>Many people asked recently about the Bromium\'s upcoming product and how it differs from Qubes OS. Unfortunately there are few public information available on this product  \u2013 essentially there is one not-very-technical <a href="http://www.bromium.com/misc/BromiumMicrovirtualization.pdf">whitepaper</a>and there are Ian Pratt\'s presentation <a href="http://www.slideshare.net/xen_com_mgr/xen-14203926">slides from the recent XenSummit about u-Xen</a>, apparently a hypervisor that is to be ultimately used in their upcoming product.<br /><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">The whitepaper suggests that Bromium is based on a hosted (type II) hypervisor running within a normal Window OS, and that this hypervisor is used to spawn a new \u201cmicro VM\u201d for each new \u201ctask\u201d, where apparently the task might be something as granular as opening a new tab in a Web browser, which makes it somehow similar to Google Chrome\'s approach. Clearly, the Bromium\'s main goal seem to be to automate<span style="font-style: normal;"> the process of creating separation domains, which is in contrast with what we do on Qubes OS, where the user is required to define the domains explicitly.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">The Pratt\'s slides provide also some technical insight into how Bromium intends to secure their hypervisor. As just discussed above, a hosted hypervisor must normally trust the hosting OS, in this case Windows, which, for obvious reasons, is not a good idea from the security standpoint. Pratt, however, clearly states that \u201chost (...) can not interfere with the privacy or integrity of the hypervisor or other guests\u201d (slide #8). This is a strong statement, so let\'s take a closer look at their approach to this problem.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">The Bromium\'s idea of how to make their hypervisor (and the VMs) protected from a potentially malicious host OS is not really breakthrough: the slides suggest to \u201cdeprivilege the host into a VT-container\u201d (I think the verb </span><i>to bluepill</i><span style="font-style: normal;">is now an accepted term for such action ;), and to remove the host\'s access to the hypervisor pages (via EPT), as well as protect DMA access from devices via VT-d, plus to make this all sensible, use DRTM scheme such as Intel TXT, to load such a hypervisor from within a potentially untrusted OS.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">So, what\'s wrong with the idea of a load-on-the-fly-secure-VMM-system? Isn\'t Ian Pratt correct that one could protect its memory and execution from the interference of the host? Actually that is possible \u2013 Intel TXT, VT-x, VT-d, and EPT give us means to achieve that (although there are a number of catches here). But he\'s missing one important point: it\'s the untrusted OS that still owns and manages the input devices (e.g. via USB stacks and drivers) and, most importantly, the output (via the GUI subsystem and drivers). Ensuring that the host OS cannot interfere (e.g. sniff the screen of trusted applications) might be very difficult, or even impossible, in practice.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">If I ever was to break the security of such a system, I would just follow the simple way:</span></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">1) Infect the host e.g. via one of the many <a href="http://www.slideshare.net/xen_com_mgr/xen-14203926">USB attacks</a> (remember they cannot have sandboxed USB driver domain, as they have only a type II hosted hypervisor),</span></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">2) Hook somewhere into the GUI subsystem and keep recoding all the interesting data from the screen...</span></div><div style="margin-bottom: 0in;">... or something like that ;)</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">There are also many other things that needs to be answered and which the publicly available documents are silent about, such as e.g. how does the system handle installation of new applications? How is clipboard and file exchange between (micro)VMs handled? How large are the interfaces exposed to each (micro)VM? For now, without a solid documentation available, and without any code to play with, it is just another vaporware for me.  (Interestingly there seem to be Bromium\'s Beta program, which however doesn\'t seem to be working, at least not for me -- I tried to signup twice, but never got any confirmation or response...?)</span></div><ul><li><b>How is Qubes different from Xen  Client?</b></li></ul><div style="margin-bottom: 0in;"></div>In many aspects, <a href="http://www.citrix.com/English/ps2/products/feature.asp?contentID=2300345">Xen Client</a>might be the most similar product to Qubes OS. Like Qubes, it is based on the Xen hypervisor and so it is also a standalone OS, that one must install instead of one\'s favorite system, and also, like Qubes, it is targeted for desktop systems, and also offers a possibility to run a few VMs at a time.<br /><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">However, XenClient has been designed with a different goal in mind, namely as a \u201cVirtual Desktops To Go\u201d solution, while Qubes has been designed to provide seamless experience for secure multi-domain desktop system. As a result, lots of focus in Qubes has been put on creating trusted GUI subsystem, support for advanced networking configurations, secure inter-VM clipboard and file sharing, secure method to reuse the same filesystem as a basis for the AppVMs, and also to optimize the AppVMs so they start almost instantly and take little memory, so that one could easily run many of them at the same time. All those things seem to be missing from Xen Client (as well as solid technical documentation about its design).</div><br /><div style="text-align: center;"><b>***</b></div>I surely have missed a few other products or approaches -- feel free to point them out in the comments, and I might write a continuation post one day.<br /><div style="margin-bottom: 0in;"></div>', 'guidislink': True, 'published': u'2012-09-12T19:02:00.000+02:00', u'thr_total': u'20', 'classifier': 'linux BSD'}
{'updated': u'2012-11-02T18:27:09.610+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'announcements', 'updated_parsed': time.struct_time(tm_year=2012, tm_mon=11, tm_mday=2, tm_hour=17, tm_min=27, tm_sec=9, tm_wday=4, tm_yday=307, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2012, tm_mon=9, tm_mday=3, tm_hour=9, tm_min=28, tm_sec=0, tm_wday=0, tm_yday=247, tm_isdst=0), 'title': u'Introducing Qubes 1.0!', 'pred': u'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7517388891109415425/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=7517388891109415425', 'type': u'text/html', 'rel': u'replies', 'title': u'52 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7517388891109415425', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7517388891109415425', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2012/09/introducing-qubes-10.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Introducing Qubes 1.0!'}], 'summary': u'', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Introducing Qubes 1.0!', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2012/09/introducing-qubes-10.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2012-09-03T11:28:00.000+02:00', u'thr_total': u'52', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-7517388891109415425', 'classifier': 'introducing Qubes'}
{'updated_parsed': time.struct_time(tm_year=2012, tm_mon=11, tm_mday=2, tm_hour=17, tm_min=27, tm_sec=23, tm_wday=4, tm_yday=307, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/8104324851973297050/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=8104324851973297050', 'type': u'text/html', 'rel': u'replies', 'title': u'15 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/8104324851973297050', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/8104324851973297050', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2012/07/qubes-10-release-candidate-1.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes 1.0 Release Candidate 1!'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-8104324851973297050', 'published_parsed': time.struct_time(tm_year=2012, tm_mon=7, tm_mday=21, tm_hour=14, tm_min=12, tm_sec=0, tm_wday=5, tm_yday=203, tm_isdst=0), 'title': u'Qubes 1.0 Release Candidate 1!', 'pred': u'announcements', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'', 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Qubes 1.0 Release Candidate 1!', 'language': None}, 'updated': u'2012-11-02T18:27:23.368+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'link': u'http://theinvisiblethings.blogspot.com/2012/07/qubes-10-release-candidate-1.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://2.bp.blogspot.com/-zJFn81JdryI/UAqu7H9KSHI/AAAAAAAAAJ0/q_vVqkoEDTY/s72-c/snapshot9.png', 'width': u'72', 'height': u'72'}], 'summary': u'', 'guidislink': True, 'published': u'2012-07-21T16:12:00.001+02:00', u'thr_total': u'15', 'classifier': 'release candidate'}
{'updated': u'2012-11-02T18:06:08.839+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'security', 'updated_parsed': time.struct_time(tm_year=2012, tm_mon=11, tm_mday=2, tm_hour=17, tm_min=6, tm_sec=8, tm_wday=4, tm_yday=307, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2012, tm_mon=6, tm_mday=27, tm_hour=14, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=179, tm_isdst=0), 'title': u'Some comments on "Operation High Roller"', 'pred': u'security', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7366669906499592065/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=7366669906499592065', 'type': u'text/html', 'rel': u'replies', 'title': u'8 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7366669906499592065', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7366669906499592065', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2012/06/some-comments-on-operation-high-roller.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Some comments on "Operation High Roller"'}], 'summary': u'About a year ago I wrote about <a href="http://theinvisiblethings.blogspot.com/2011/04/why-us-password-revolution-wont-work.html">Why the US "password revolution" won\'t work</a>, where I pointed out that a massive move towards two-factor authentication will <i>not</i> solve any of the identity theft problems that users experience today. Specifically, I wrote:<br /><blockquote class="tr_bq">[People] don\'t understand that the [compromised] <i>operating system can impersonate the user at will</i>! </blockquote><blockquote class="tr_bq">The compromised OS could have saved your PIN to this [smart] card when you used  it previously (even if you configured it not to do so!) and now,&nbsp;  immediately, it could use the inserted card to authenticate <i>as you</i> to the bank and start issuing transactions on your behalf. And you  won\'t even notice this all, because in the meantime it will show you a  faked screen of your banking account. After all, it fully controls the  screen.</blockquote><blockquote class="tr_bq">The bottom line is that <b>we cannot secure our digital lives, if our client operating systems could not be secured first</b>. </blockquote><blockquote class="tr_bq"><b>But introduction of tokens won\'t make our  operating systems any more secure</b>!</blockquote><br />This article sparked lots of controversy with many people, who considered it a fallacy to criticize two factor authentication...<br /><br />Today, I came across the news about <i>Operation High Roller</i>, discovered recently by McAfee and Guardian Analytics. They <a href="http://www.mcafee.com/us/resources/reports/rp-operation-high-roller.pdf">released a paper</a> with some details about the attacks and the malware deployed. Some interesting quotes:<br /><blockquote class="tr_bq"><b>All of the instances that involved High Roller malware could bypass complex multi-stage authentication.</b> Unlike recent attacks that collect simple form authentication data\u2014a security challenge question, a one-time token, or PIN\u2014this attack can get past the extensive physical (\u201csomething you have\u201d) authentication required by swiping a card in a reader and typing the input into a field (see Two-factor Authentication sidebar).</blockquote><blockquote class="tr_bq">The attack asks the victim to supply the information required to get around the physical controls of smartcard reader plus pin pad entry to generate a one-time password (or digital token). </blockquote><blockquote class="tr_bq">Having collected all the information it requires for the entire transfer, the malware stalls the user and executes its transaction in the background using the legitimate digital token.</blockquote><blockquote class="tr_bq">Multiple after-the-theft behaviors hide evidence of the transaction from the user. For example, the client-side malware kills the links to printable statements. It also searches for and erases confirmation<br />emails and email copies of the statement. Finally, it also changes the transactions, transaction values, and account balance in the statement displayed on the victim\u2019s screen so the amounts are what the account holder expects to see.</blockquote><br />Defensive security is a difficult game, because one doesn\'t immediately see whether a given solution works or not. This is in stark contrast to other engineering disciplines (and to offensive security) where one usually have immediate feedback on whether something works well or not.<br /><br />Say you want to build a redundant long-range video downlink for your unmanned, remotely operated helicopter -- you can throw in lots of money buying various high-gain antennas, circular antennas, antenna trackers, diversity systems, etc., but then ultimately you can verify your creation immediately by going into a field and trying to fly a few miles away, and see whether you loose the vision (usually in the middle of some life-threatening manoeuvre) or not. At least you can draw some lines of how good your solution is ("I can fly up to one mile away, but not more, unless there aren\'t that many trees around and the air is dry enough").<br /><br />With security, especially with computer security, it is so different, because there is no immediate feedback. This results in various vendors pitching their products as wonderful solutions that just solve all the worlds problems, even though what they\'re saying <a href="http://www.bromium.com/misc/BromiumMicrovirtualization.pdf">in those marketing materials</a> might be pure nonsense... (BTW, congrats to Simon Crosby for <a href="http://www.wired.com/wiredenterprise/2012/06/crosby-bromium-microvisor/all/">apparently creating a Windows-hosted VMM in below 10k LOC!</a> ;)<br /><br />The often made mistake is to say: "Perhaps there is a way to attack this solution, but then again, how much of the malware <i>in the wild</i> implements such attacks?" This is a classical thinking in our industry, and in my opinion, an inexcusable mistake! Let me say it clearly:<br /><br /><div style="text-align: center;"><b>It doesn\'t matter whether what the malware in the wild does -- it matters what it <i>could </i>potentially do!</b></div><br />So, if we can do a quick brainstorming session and point out potential attacks within 1 hour against some technology/product X, then, if we don\'t see a solution how to prevent them generically, we should not bother and implement product X, because it <i>will</i> be defeated, sooner or later. Let\'s not waste time on useless solutions, life\'s too short!', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'About a year ago I wrote about Why the US "password revolution" won\'t work, where I pointed out that a massive move towards two-factor authentication will not solve any of the identity theft problems that users experience today. Specifically, I wrote:[People] don\'t understand that the [compromised] operating system can impersonate the user at will! The compromised OS could have saved your PIN to this [smart] card when you used  it previously (even if you configured it not to do so!) and now,&nbsp;  immediately, it could use the inserted card to authenticate as you to the bank and start issuing transactions on your behalf. And you  won\'t even notice this all, because in the meantime it will show you a  faked screen of your banking account. After all, it fully controls the  screen.The bottom line is that we cannot secure our digital lives, if our client operating systems could not be secured first. But introduction of tokens won\'t make our  operating systems any more secure!This article sparked lots of controversy with many people, who considered it a fallacy to criticize two factor authentication...Today, I came across the news about Operation High Roller, discovered recently by McAfee and Guardian Analytics. They released a paper with some details about the attacks and the malware deployed. Some interesting quotes:All of the instances that involved High Roller malware could bypass complex multi-stage authentication. Unlike recent attacks that collect simple form authentication data\u2014a security challenge question, a one-time token, or PIN\u2014this attack can get past the extensive physical (something you have) authentication required by swiping a card in a reader and typing the input into a field (see Two-factor Authentication sidebar).The attack asks the victim to supply the information required to get around the physical controls of smartcard reader plus pin pad entry to generate a one-time password (or digital token). Having collected all the information it requires for the entire transfer, the malware stalls the user and executes its transaction in the background using the legitimate digital token.Multiple after-the-theft behaviors hide evidence of the transaction from the user. For example, the client-side malware kills the links to printable statements. It also searches for and erases confirmationemails and email copies of the statement. Finally, it also changes the transactions, transaction values, and account balance in the statement displayed on the victim\'s screen so the amounts are what the account holder expects to see.Defensive security is a difficult game, because one doesn\'t immediately see whether a given solution works or not. This is in stark contrast to other engineering disciplines (and to offensive security) where one usually have immediate feedback on whether something works well or not.Say you want to build a redundant long-range video downlink for your unmanned, remotely operated helicopter -- you can throw in lots of money buying various high-gain antennas, circular antennas, antenna trackers, diversity systems, etc., but then ultimately you can verify your creation immediately by going into a field and trying to fly a few miles away, and see whether you loose the vision (usually in the middle of some life-threatening manoeuvre) or not. At least you can draw some lines of how good your solution is ("I can fly up to one mile away, but not more, unless there aren\'t that many trees around and the air is dry enough").With security, especially with computer security, it is so different, because there is no immediate feedback. This results in various vendors pitching their products as wonderful solutions that just solve all the worlds problems, even though what they\'re saying in those marketing materials might be pure nonsense... (BTW, congrats to Simon Crosby for apparently creating a Windows-hosted VMM in below 10k LOC! ;)The often made mistake is to say: "Perhaps there is a way to attack this solution, but then again, how much of the malware in the wild implements such attacks?" This is a classical thinking in our industry, and in my opinion, an inexcusable mistake! Let me say it clearly:It doesn\'t matter whether what the malware in the wild does -- it matters what it could potentially do!So, if we can do a quick brainstorming session and point out potential attacks within 1 hour against some technology/product X, then, if we don\'t see a solution how to prevent them generically, we should not bother and implement product X, because it will be defeated, sooner or later. Let\'s not waste time on useless solutions, life\'s too short!', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Some comments on "Operation High Roller"', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2012/06/some-comments-on-operation-high-roller.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2012-06-27T16:00:00.003+02:00', u'thr_total': u'8', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-7366669906499592065', 'classifier': 'two-factor authentication'}
{'updated_parsed': time.struct_time(tm_year=2012, tm_mon=12, tm_mday=15, tm_hour=11, tm_min=48, tm_sec=18, tm_wday=5, tm_yday=350, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/2536319280775711164/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=2536319280775711164', 'type': u'text/html', 'rel': u'replies', 'title': u'34 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/2536319280775711164', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/2536319280775711164', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2012/03/windows-support-coming-to-qubes.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Windows support coming to Qubes!'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-2536319280775711164', 'published_parsed': time.struct_time(tm_year=2012, tm_mon=3, tm_mday=3, tm_hour=11, tm_min=43, tm_sec=0, tm_wday=5, tm_yday=63, tm_isdst=0), 'title': u'Windows support coming to Qubes!', 'pred': u'os', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'', 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Windows support coming to Qubes!', 'language': None}, 'updated': u'2012-12-15T12:48:18.912+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2012/03/windows-support-coming-to-qubes.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://3.bp.blogspot.com/-UFnn-9m1pO0/T1IBP9dvJ8I/AAAAAAAAAJs/E41NvH8MQKM/s72-c/qubes-hvm-windows.png', 'width': u'72', 'height': u'72'}], 'summary': u'', 'guidislink': True, 'published': u'2012-03-03T12:43:00.000+01:00', u'thr_total': u'34', 'classifier': 'coming to'}
{'updated_parsed': time.struct_time(tm_year=2012, tm_mon=11, tm_mday=2, tm_hour=17, tm_min=6, tm_sec=34, tm_wday=4, tm_yday=307, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7272088205765369134/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=7272088205765369134', 'type': u'text/html', 'rel': u'replies', 'title': u'13 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7272088205765369134', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7272088205765369134', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2012/02/qubes-beta-3.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes Beta 3!'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-7272088205765369134', 'published_parsed': time.struct_time(tm_year=2012, tm_mon=2, tm_mday=6, tm_hour=10, tm_min=45, tm_sec=0, tm_wday=0, tm_yday=37, tm_isdst=0), 'title': u'Qubes Beta 3!', 'pred': u'announcements', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'', 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Qubes Beta 3!', 'language': None}, 'updated': u'2012-11-02T18:06:34.499+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2012/02/qubes-beta-3.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'<div style="margin-bottom: 0in;"><a href="http://wiki.qubes-os.org/trac/wiki/InstallationGuide"></a></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><a href="http://wiki.qubes-os.org/trac/wiki/StickMounting"><span></span></a><a href="http://theinvisiblethings.blogspot.com/2011/06/usb-security-challenges.html"></a></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><a href="http://wiki.qubes-os.org/trac/wiki/QubesBuilder"></a></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"></div><ul><li></li></ul><ul><li></li></ul><a href="http://wiki.qubes-os.org/trac/wiki/Qrexec"></a><br /><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><i></i><span style="font-style: normal;"></span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;"></span></div><div style="margin-bottom: 0in;"></div>', 'guidislink': True, 'published': u'2012-02-06T11:45:00.002+01:00', u'thr_total': u'13', 'classifier': 'installation guide'}
{'updated_parsed': time.struct_time(tm_year=2012, tm_mon=3, tm_mday=28, tm_hour=9, tm_min=10, tm_sec=27, tm_wday=2, tm_yday=88, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/6804689402512253967/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=6804689402512253967', 'type': u'text/html', 'rel': u'replies', 'title': u'9 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/6804689402512253967', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/6804689402512253967', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2012/01/thoughts-on-deepsafe.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Thoughts on DeepSafe'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-6804689402512253967', 'published_parsed': time.struct_time(tm_year=2012, tm_mon=1, tm_mday=21, tm_hour=17, tm_min=1, tm_sec=0, tm_wday=5, tm_yday=21, tm_isdst=0), 'title': u'Thoughts on DeepSafe', 'pred': u'security', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'Several people asked me recently what I though about DeepSafe. So, below I present my opinion... First, for any AV system (or Host IPS, or Personal Firewall, etc) to work effectively, there are three problems that must be addressed:How to protect the AV agent (code  and data) from tampering (from the rest of the OS)?How can the AV agent get reliable  access to (sensitive pieces of) the system memory and registers,  and/or provide reliable memory protection for the (sensitive pieces  of) the OS.What are those "sensitive  pieces of memory that should be monitored or protected?From reading various PR materials, it seems like the #1 above is the primary differentiation factor for DeepSafe (DS). So, let\'s consider this problem in the context of e.g. a Windows OS. In order to protect its code and data, DS uses, as it is heavily advertised, Intel VT-x virtualization technology. Now, that sounds really secure -- after all what can be more secure than a hardware virtualization, right? ;) But VT-x (including EPT) is only about CPU virtualization, which in our case translates to protecting the DS memory and registers from CPU-originating accesses. But, as every regular to this blog knows, there is also another method of accessing memory on any PC system, and this is through DMA transactions from devices. The OS (so also the kernel malware) is free to program one of the many devices in the system to issue DMA reads or writes to any physical memory it wants...Now, in order to protect some portion of the system memory (DRAM, cache) against DMA accesses, we have the Intel VT-d technology... So, one would think that DS must be also using VT-d in order to protect itself.Very well, let\'s assume then that the DeepSafe is not a total ripoff, and that it implements also VT-d protection for its agent, although I haven\'t found this mentioned in any of the public papers or press materials I found on the web...This, however, would be a bit complex to do correctly, because the OS (so, also the kernel malware) still has a full control over the chipset (MCH), which is the entity... that controls the VT-d.Now, in order to prevent the OS (or the kernel malware) from playing with the chipset for fun and profit, and e.g. disabling VT-d protection, DS would have to virtualize the chipset.If you look at some consumer VMMs, such as VMware or Xen/Qemu, you would see that they all virtualize the chipset for their guests (of course), but that the chipset they provide this way is some kind of an ancient Pentium MCH. I don\'t think any of the consumers would be especially happy if they found out that after installing DS on their brand new 2012 laptop, Windows suddenly see a Pentium-era chipset... And this is not without a reason \u2013 chipsets, specifically MCHs, are one of the most complex devices, perhaps only beaten by GPUs in this category. There are virtually hundreds of configuration registers exposed by the chipset, some of them control the VT-d, some other control system memory maps and permissions, PCIe configuration, and many other things that I even have no idea about, and this all makes virtualizing the chipset a very challenging task.So, it\'s either that McAfee and Intel found some interesting way of how to securely virtualize the chipset while preserving all of its (very rich) functionality, or that they... don\'t bother with VT-d protection and chipset virtualization at all, assuming that even without VT-d, DeepSafe is good enough and rises the bar anyway (sarcasm intended).(Can somebody from McAfee or Intel confirm in the comments below what does DP really do?)Anyway, let\'s assume they dohave VT-d protection and they do virtualize the chipset somehow...Now, we\'re moving on to the #2 point from the list of tasks above -- about the reliablememory access or reliable protection.So, let say that the DS agent decided that some part of the system memory, e.g. the IDT table, is sensitiveand should be monitored/protected. So it sets up EPT traps to trigger an VT-x/EPT intercept on any access to that memory (or IDT base register), in order to find kernel malware that tried to modify IDT. That sounds really nice, but what if the malware uses DMA to modify IDT? DS would not be able to catch such access! (So far we considered the, hypothetical, use of VT-d only to protect the DS agent code).One might think that DS is programming VT-d to sandbox each and every device in the system (so including GPU, USB controllers, NICs, SATA, etc) so they never be allowed to touch any of those sensitive parts of the system, such as IDT. Let\'s assume they do it this way...And here we\'ve arrived to the last point from the list at the beginning: which of the system memory constitutes those "sensitive pieces" that should be protected/monitored? IDT? Sure. What about all the code sections of the all the kernel modules? Yes. Are we fine now? Well, no, because the malware can hook some pointers other than the well known IDT. Some public NDIS data structure? Ok, we can add those to the protected areas. But, what about some undocumented NDIS structures? And this is just NDIS subsystem, one of the many subsystems in the Windows kernel... When we think about it, it should be intuitively obvious that in a general purpose Operating System like Windows, it is not possible (at least for 3rd party) to make a satisfactory list of all the sensitive pieces of memory that should be monitored/protected, in order to detect all the system compromises.Greg Hoglund, Jamie Butler, Alex Tereshkin, and myself, have been researching this area actively in the early years of this millennium. In addition to the Alex\'s paper linked above, you might also check out one of my last slides from this period.I don\'t think anything has changed since that time. It was also the reason why I gave up on writing Windows compromise detectors, or forensic tools, and moved on to researching other ways to secure OSes, which finally gave birth to Qubes OS, many years later.So, back to DS -- in order to provide a somehow satisfactory protection level for your general purpose OS, such as Windows, it would need to:Use VT-d to protect its own  memory,Virtualize the chipset, at least  some (sensitive) parts of it,Program VT-d permissions for each  device to exclude all the sensitive areas in the system that should  be protected, and also protect one device from DMAing into/from  another device memory (e.g. NIC stealing GPU framebuffer, or  inserting instructions to the GPU instruction buffer, or keystrokes  to USB controller buffer). Ideally, this could be done by  programming VT-d to grant each device only access to its own DMA  buffer, but as far as I know, this would be very hard to implement,  if not impossible for a 3rd party, on a Windows OS (in contrast to  Linux, which mostly support this model). Please correct me, if the  recent Windows version allows for such use of VT-d.Finally, and the most hard thing  to solve, how to define all the "sensitive pieces of memory"  in the system that should be protected and/or monitored? Although  this is a somehow more generic problem, not specific to DS, but  applying to any A/V, HIPS, or forensic tool.So, is DeepSafe another piece of crap not worth any special attention, or has McAfee and Intel came up with some novel methods, e.g. for chipset virtualization, and other problems? Unless I see some technical info to backup the latter, I would have to assume, unfortunately, the former. But I would like to be mistaken \u2013 after all DeepSafe seems to be just a new incarnation of my Bluepill ;)', 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Thoughts on DeepSafe', 'language': None}, 'updated': u'2012-03-28T11:10:27.715+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'attack', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'chipset', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'exploit', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'rootkits', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2012/01/thoughts-on-deepsafe.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'<!--   @page { margin: 0.79in }   P { margin-bottom: 0.08in }   A:link { so-language: zxx }  -->  <br /><div style="margin-bottom: 0in;">Several people asked me recently what I though about <a href="http://www.mcafee.com/us/solutions/mcafee-deepsafe.aspx">DeepSafe</a>. So, below I present my opinion... </div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">First, for any AV system (or Host IPS, or Personal Firewall, etc) to work effectively, there are three problems that must be addressed:</div><ol><li><div style="margin-bottom: 0in;">How to protect the AV agent (code  and data) from tampering (from the rest of the OS)?</div></li><li><div style="margin-bottom: 0in;">How can the AV agent get reliable  access to (sensitive pieces of) the system memory and registers,  and/or provide reliable memory protection for the (sensitive pieces  of) the OS.</div></li><li><div style="margin-bottom: 0in;">What are those "sensitive  pieces of\u201d memory that should be monitored or protected?</div></li></ol><div style="margin-bottom: 0in;">From reading various PR materials, it seems like the #1 above is the primary differentiation factor for DeepSafe (DS). So, let\'s consider this problem in the context of e.g. a Windows OS. In order to protect its code and data, DS uses, as it is heavily advertised, Intel VT-x virtualization technology. Now, that sounds really secure -- after all what can be more secure than a hardware virtualization, right? ;) </div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">But VT-x (including EPT) is only about CPU virtualization, which in our case translates to protecting the DS memory and registers from CPU-originating accesses. But, as every regular to this blog knows, there is also another method of accessing memory on any PC system, and this is through DMA transactions from devices. The OS (so also the kernel malware) is free to program one of the many devices in the system to issue DMA reads or writes to <i>any </i><span style="font-style: normal;">physical </span>memory it wants...</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Now, in order to protect some portion of the system memory (DRAM, cache) against DMA accesses, we have the Intel VT-d technology... So, one would think that DS must be also using VT-d in order to protect itself.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Very well, let\'s assume then that the DeepSafe is not a <span style="font-style: normal;">total </span>ripoff, and that it implements also VT-d protection for its agent, although I haven\'t found this mentioned in any of the public papers or press materials I found on the web...</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">This, however, would be a bit complex to do correctly, because the OS (so, also the kernel malware) still has a full control over the chipset (MCH), which is the entity... that controls the VT-d.</div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Now, in order to prevent the OS (or the kernel malware) from playing with the chipset for fun and profit, and e.g. disabling VT-d protection, DS would have to virtualize the chipset.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">If you look at some consumer VMMs, such as VMware or Xen/Qemu, you would see that they all virtualize the chipset for their guests (of course), but that the chipset they provide this way is some kind of an ancient Pentium MCH. I don\'t think any of the consumers would be especially happy if they found out that after installing DS on their brand new 2012 laptop, Windows suddenly see a Pentium-era chipset... And this is not without a reason \u2013 chipsets, specifically MCHs, are one of the most complex devices, perhaps only beaten by GPUs in this category. There are virtually hundreds of configuration registers exposed by the chipset, some of them control the VT-d, some other control system memory maps and permissions, PCIe configuration, and many other things that I even have no idea about, and this all makes virtualizing the chipset a very challenging task.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">So, it\'s either that McAfee and Intel found some interesting way of how to securely virtualize the chipset while preserving all of its (very rich) functionality, or that they... don\'t bother with VT-d protection and chipset virtualization at all, assuming that even without VT-d, DeepSafe is good enough and \u201crises the bar\u201d anyway (sarcasm intended).</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">(Can somebody from McAfee or Intel confirm in the comments below what does DP really do?)</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Anyway, let\'s assume they <i>do</i>have VT-d protection and they <i>do </i>virtualize the chipset somehow...</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Now, we\'re moving on to the #2 point from the list of tasks above -- about the reliable</div><div style="margin-bottom: 0in;">memory access or reliable protection.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">So, let say that the DS agent decided that some part of the system memory, e.g. the IDT table, is <i>sensitive</i>and should be monitored/protected. So it sets up EPT traps to trigger an VT-x/EPT intercept on any access to that memory (or IDT base register), in order to find kernel malware that tried to modify IDT. That sounds really nice, but what if the malware uses DMA to modify IDT? DS would not be able to catch such access! (So far we considered the, hypothetical, use of VT-d only to protect the DS agent code).</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">One might think that DS is programming VT-d to sandbox each and every device in the system (so including GPU, USB controllers, NICs, SATA, etc) so they <i>never </i>be allowed to touch any of those sensitive parts of the system, such as IDT. Let\'s assume they do it this way...</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">And here we\'ve arrived to the last point from the list at the beginning: which of the system memory constitutes those "sensitive pieces" that should be protected/monitored? IDT? Sure. What about all the code sections of the all the kernel modules? Yes. Are we fine now? Well, no, because the malware can hook some pointers other than the well known IDT. Some public NDIS data structure? Ok, we can add those to the protected areas. But, what about some <a href="https://www.blackhat.com/presentations/bh-usa-06/BH-US-06-Tereshkin.pdf">undocumented NDIS structures</a>? And this is just NDIS subsystem, one of the many subsystems in the Windows kernel... When we think about it, it should be intuitively obvious that in a general purpose Operating System like Windows, it is not possible (at least for 3<sup>rd</sup> party) to make a satisfactory list of all the sensitive pieces of memory that should be monitored/protected, in order to detect all the system compromises.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Greg Hoglund, Jamie Butler, Alex Tereshkin, and myself, have been researching this area actively in the early years of this millennium. In addition to the Alex\'s paper linked above, you might also check out one of my <a href="https://www.blackhat.com/presentations/bh-europe-06/bh-eu-06-Rutkowska.pdf">last slides</a> from this period.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">I don\'t think anything has changed since that time. It was also the reason why I gave up on writing Windows compromise detectors, or forensic tools, and moved on to researching other ways to secure OSes, which finally gave birth to Qubes OS, many years later.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">So, back to DS -- in order to provide a somehow satisfactory protection level for your general purpose OS, such as Windows, it would need to:</div><ol><li><div style="margin-bottom: 0in;">Use VT-d to protect its own  memory,</div></li></ol><ol start="2"><li><div style="margin-bottom: 0in;">Virtualize the chipset, at least  some (sensitive) parts of it,</div></li></ol><ol start="3"><li><div style="margin-bottom: 0in;">Program VT-d permissions for each  device to exclude all the sensitive areas in the system that should  be protected, and also protect one device from DMAing into/from  another device memory (e.g. NIC stealing GPU framebuffer, or  inserting instructions to the GPU instruction buffer, or keystrokes  to USB controller buffer). Ideally, this could be done by  programming VT-d to grant each device only access to its own DMA  buffer, but as far as I know, this would be very hard to implement,  if not impossible for a 3rd party, on a Windows OS (in contrast to  Linux, which mostly support this model). Please correct me, if the  recent Windows version allows for such use of VT-d.</div></li></ol><ol start="4"><li><div style="margin-bottom: 0in;">Finally, and the most hard thing  to solve, how to define all the "sensitive pieces of memory"  in the system that should be protected and/or monitored? Although  this is a somehow more generic problem, not specific to DS, but  applying to any A/V, HIPS, or forensic tool.</div></li></ol><div style="margin-bottom: 0in;">So, is DeepSafe another piece of crap not worth any special attention, or has McAfee and Intel came up with some novel methods, e.g. for chipset virtualization, and other problems? Unless I see some technical info to backup the latter, I would have to assume, unfortunately, the former. But I would like to be mistaken \u2013 after all DeepSafe seems to be just a new incarnation of my Bluepill ;)  </div>', 'guidislink': True, 'published': u'2012-01-21T18:01:00.002+01:00', u'thr_total': u'9', 'classifier': 'firewall'}
{'updated_parsed': time.struct_time(tm_year=2012, tm_mon=3, tm_mday=28, tm_hour=9, tm_min=10, tm_sec=17, tm_wday=2, tm_yday=88, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/6975144072797589166/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=6975144072797589166', 'type': u'text/html', 'rel': u'replies', 'title': u'17 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/6975144072797589166', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/6975144072797589166', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/12/trusted-execution-in-untrusted-cloud.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Trusted Execution In Untrusted Cloud'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-6975144072797589166', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=12, tm_mday=13, tm_hour=19, tm_min=25, tm_sec=0, tm_wday=1, tm_yday=347, tm_isdst=0), 'title': u'Trusted Execution In Untrusted Cloud', 'pred': u'security', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u"Wouldn't it be nice if we could actually own our data and programs in the cloud? By owning here I mean to have control over their confidentiality and integrity. When it comes to confidentiality and integrity for the data,it's not much of a rocket since, as the classic crypto (and secure client systems) is all that we need. I have already wrote about it in an earlier post.  But it would also be nice, if we could somehow get the same confidentiality and integrity assurance for our programsthat we upload for the execution in the cloud...For example, a company might want take their database application, that deal with all sorts of corporate critical sensitive data, and then upload and safely run this application on e.g. Amazon's EC2, or maybe even to some China-based EC2-clone. Currently there is really nothing that could stop the provider, who has a full control over the kernel or the hypervisor under which our application (or our VM) executes, from reading the contents of our process' memory and stealing the secrets from there. This is all easy stuff to do from the technical point of view, and this is also not just my own paranoia... Plus, there are the usual concerns, such as: is the infrastructure of the cloud provider really that safe and secure, as it is advertised? How do we know nobody found an exploitable bug in the hypervisor  and was not able to compromise other customer's VMs from within the attacker-hired VM? Perhaps the same question applies if we didn't decided to outsource the apps to a 3rdparty cloud, but in case of a 3rdparty clouds we really don't know about what measures have been applied. E.g. does the physical server on which my VMs are hosted also used to host some foreign customers? From China maybe? You get the point.Sometimes all we really need is just integrity, e.g. if we wanted to host an open source code revision system, e.g. a git repository or a file server. Remember the kernel.org incident? On a side note, I find the Jonathan Corbet's self-comforting remarks on how there was really nothing to worry about, to be strikingly naive... I could easily think of a few examples of how the attacker(s) could have exploited this incident, so that Linus &amp; co. would never (not soon) find out. But that's another story...But, how can one protect a running process, or a VM, from a potentially compromised OS, or a hypervisor/VMM?To some extent, at least theoretically, Intel Trusted Execution Technology (TXT), could be used to implement such protection. Intel TXT can attest to a remote entity, in that case this would be the cloud customer, about the hash of the hypervisor (or kernel) that has been loaded on the platform. This means it should be possible for the user to know that the cloud provider uses the unmodified Xen 4.1.1 binary as the hypervisor and not some modified version, with a built-in FBI backdoor for memory inspection. Ok, it's a poor example, because the Xen architecture (and any other commercially used VMM) allow the administrator who controls Dom0 (or equivalent) to essentially inspect and modify all the memory in the system, also that belonging to other VMs, and no special backdoors in the hypervisor are needed for this.But let's assume hypothetically that Xen 5.0 would change that architecture, and so the Dom0 would not be able to access any other VM's memory anymore. Additionally, if we also assumed that the Xen hypervisor was secure, so that it was not possible to exploit any flaw in the hypervior, then we should be fine. Of course, assuming also there were also no flaws in the TXT implementation,  and that the SMM was properly sandboxed, or that we trusted (some parts of) the BIOS (these are really complex problems to solve in practice, but I know there is some work going on in this area, so there is some hope).Such a TXT-bases solution, although a step forward, still requires us to trust the cloud provider a bit... First, TXT doesn't protect against bus-level physical attacks \u2013 think of an attacker who replaces the DRAM dies with some kind of DRAM emulator \u2013 a device that looks like DRAM to the host, but on the other end allows full inspection/modification of its contents (well, ok, this is still a bit tricky, because of the lack of synchronization, but doable).Additionally for Remote Attestation to make any sense, we must somehow know that we talk to a real TPM, and not to some software-emulated TPM. The idea here is that only a real TPM would have access to a private key, called Endorsement Key, used for signing during Remote Attestation procedure (or used during the generation of the AIK key, that can be used alternatively for Remote Attestation). But then again who generates (and so: owns) the private endorsement keys? Well, the TPM manufacturer, that can be... some Asian company that we not necessarily want to trust that much...Now we see it would really be advantageous for customers, if Intel decided to return to the practice of implementing TPM internally inside the chipset, as they did in the past for their Series 4 chipsets (e.g. Q45). This would also protect against the LCP bus-level attacks against TPM (although somebody told me recently that TPM in current systems cannot be so easily attacked from LCP bus, because of some authentication protocol being used there \u2013 I really don't know, as physical attacks have not been the area we ever looked at extensively; any comments on that?).But then again, the problem of DRAM content sniffing always remains, although I would consider this to be a complex and expensive attack. So, it seems to me that most governments would be able to bypass such TXT-ensured guarantees in order to tap the user's programs executing in the cloud provides that operate within their jurisdictions. But at least this could stop malicious companies from staring up fake cloud services with an intent to easily harvest some sensitive data from unsuspecting users.It seems that the only way to solve the above problem of DRAM sniffing attacks is to add some protection at the processor level. We can imagine two solutions that processor vendors could implement:First, they could opt for adding an in-processor hardware mechanism for encrypting all the data that leave the processor, to ensure that everything the is kept in the DRAM is encrypted (and, of course, also integrity-protected), with some private key that never leave the processor. This could be seen as an&nbsp; extension to the Intel TXT.This would mean, however, we still needed to relay on: 1) the hypervisor to not contain bugs, 2) the whole VMM architecture to properly protect VM's memory, specifically against the Dom0, 3) Intel TXT to not be buggy either, 4) SMM being properly sandboxed, or alternatively to trust (some parts of) the BIOS and SMI handler, 5) TPM's EK key to be non-compromised and verifiable as genuine, and 6) TPM bus attacks made impossible (those two could be achieved by moving the TPM back onto the chipset, as mentioned above), and finally, 7) on the encryption key used by the processor for data encryption to be safely kept in the processor.That's still quite a lot of things to trust, and it requires quite a lot of work to make it practically really secure...The other option is a bit more crazy, but also more powerful. The idea is that the processor might allow to create untrusted supervisors (or hypervisors). Bringing this down to x86 nomenclature, it would mean that kernel mode (or VT-x root) code cannot sniff or inject code into (crypto-protected) memory of the usermode processes (or VT-x guests). This idea is not as crazy as you might think, and there has even been some academic work done in this area. Of course, there are many catches here, as this would require specifically written and designed applications. And if we ever considered to use this technology also for client systems (how nice it would be if we could just get rid of some 200-300 kLOC of the Xen hypervisor from the TCB in Qubes OS!), the challenges are even bigger, mostly relating to safe and secure trusted output (screen) and, especially, input (keyboard, mouse).If this worked out, then we would need to trust just one element: the processor. But we need to trust it anyway. Of course, we also need to trust some software stack, e.g. the compilers we use at home to build our application, and the libraries it uses, but that's somehow an unrelated issue. What is important is that we now would be able to choose that (important) software stack ourselves, and don't care about all the other software used by the cloud provider.As I wrote above, the processor is this final element we always need to rust. In practice this comes down to also trusting the US government :) But we might imagine users consciously choosing e.g. China-based, or Russia-based cloud providers and require (cryptographically) to run their hosted programs on US-made processors. I guess this could provide reasonable politically-based safety.  And there is also ARM, with its licensable processor cores, where, I can imagine, the licensee (e.g. an EU state) would be able to put their own private key, not known to any other government (here I assume the licensee also audits the processor RTL for any signs of backdoors). I'm not sure if it would be possible to hide such a private key from a foundry in Hong Kong, or somewhere, but luckily there are also some foundries within the EU.In any case, it seems like we could make our cloud computing orders of magnitude safer and more secure than what is now. Let's see whether the industry will follow this path...", 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Trusted Execution In Untrusted Cloud', 'language': None}, 'updated': u'2012-03-28T11:10:17.874+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'cloud', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted execution technology', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/12/trusted-execution-in-untrusted-cloud.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'<br /><div style="margin-bottom: 0in;">Wouldn\'t it be nice if we could actually own our data and programs in the cloud? By \u201cowning\u201d here I mean to have control over their confidentiality and integrity. When it comes to confidentiality and integrity for the <i>data,</i><span style="font-style: normal;">it\'s</span> not much of a rocket since, as the classic crypto (and secure client systems) is all that we need. <span style="font-style: normal;">I have already wrote about it in an <a href="http://theinvisiblethings.blogspot.com/2011/05/untrusting-cloud.html">earlier post</a>.</span></div><div style="margin-bottom: 0in;"><span style="font-style: normal;"> </span></div><div style="margin-bottom: 0in;"> </div><div style="margin-bottom: 0in;"><span style="font-style: normal;">But it would also be nice, if we could somehow get the same confidentiality and integrity assurance for our </span><i>programs</i><span style="font-style: normal;">that we upload for the execution in the cloud...</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">For example, a company might want take their database application, that deal with all sorts of corporate critical sensitive data, and then upload and <i>safely </i>run this application on e.g. Amazon\'s EC2, or maybe even to some China-based EC2-clone. Currently t</span>here is really nothing that could stop the provider, who has a full control over the kernel or the hypervisor under which our application (or our VM) executes, from reading the contents of our process\' memory and stealing the secrets from there. This is all easy stuff to do from the technical point of view, and this is also <a href="http://www.schneier.com/blog/archives/2011/12/security_proble_2.html">not just my own paranoia</a>... </div><span style="font-style: normal;"></span><br /><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">Plus, there are the usual concerns, such as: is the infrastructure of the cloud provider really that safe and secure, as it is advertised? How do we know nobody found an exploitable bug in the hypervisor  and was not able to compromise other customer\'s VMs from within the attacker-hired VM? Perhaps the same question applies if we didn\'t decided to outsource the apps to a 3</span><sup><span style="font-style: normal;">rd</span></sup><span style="font-style: normal;">party cloud, but in case of a 3</span><sup><span style="font-style: normal;">rd</span></sup><span style="font-style: normal;">party clouds we really don\'t know about what measures have been applied. E.g. does the physical server on which my VMs are hosted also used to host some foreign customers? From China maybe? You get the point.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">Sometimes all we really need is just integrity, e.g. if we wanted to host an open source code revision system, e.g. a git repository or a file server. Remember the <a href="http://www.linuxfoundation.org/news-media/blogs/browse/2011/08/cracking-kernelorg">kernel.org incident</a>? On a side note, I find the Jonathan Corbet\'s self-comforting remarks on how there was really nothing to worry about, to be strikingly naive... I could easily think of a few examples of how the attacker(s) could have exploited this incident, so that Linus &amp; co. would never (not soon) find out. But that\'s another story...</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">But, h</span><span style="font-style: normal;">ow can one protect a <i>running</i> process, or a VM, from a potentially compromised OS, or a hypervisor/VMM?</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">To some extent, at least theoretically, Intel Trusted Execution Technology (TXT), could be used to implement such protection. Intel TXT can attest to a remote entity, in that case this would be the cloud customer, about the hash of the hypervisor (or kernel) that has been loaded on the platform. This means it should be possible for the user to know that the cloud provider uses the unmodified Xen 4.1.1 binary as the hypervisor and not some modified version, with a built-in FBI backdoor for memory inspection. Ok, it\'s a poor example, because the Xen architecture (and any other commercially used VMM) allow the administrator who controls Dom0 (or equivalent) to essentially inspect and modify all the memory in the system, also that belonging to other VMs, and no special backdoors in the hypervisor are needed for this.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">But let\'s assume hypothetically that Xen 5.0 would change that architecture, and so the Dom0 would not be able to access any other VM\'s memory anymore. Additionally, if we also assumed that the Xen hypervisor was <i>secure</i>, so that it was not possible to exploit any flaw in the hypervior, then we should be fine. Of course, assuming also there were also no flaws in the TXT implementation,  and that the SMM was properly sandboxed, or that we trusted (some parts of) the BIOS (these are really complex problems to solve in practice, but I know there is some work going on in this area, so there is some hope).</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">Such a TXT-bases solution, although a step forward, still requires us to trust the cloud provider a bit... First, TXT doesn\'t protect against bus-level physical attacks \u2013 think of an attacker who replaces the DRAM dies with some kind of DRAM emulator \u2013 a device that looks like DRAM to the host, but on the other end allows full inspection/modification of its contents (well, ok, this is still a bit tricky, because of the lack of synchronization, but doable).</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">Additionally for Remote Attestation to make any sense, we must somehow know that we \u201ctalk to\u201d a real TPM, and not to some software-emulated TPM. The idea here is that only a \u201creal\u201d TPM would have access to a private key, called Endorsement Key, used for signing during Remote Attestation procedure (or used during the generation of the AIK key, that can be used alternatively for Remote Attestation). But then again who generates (and so: owns) the private endorsement keys? Well, the TPM manufacturer, that can be... some Asian company that we not necessarily want to trust that much...</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">Now we see it would really be advantageous for customers, if Intel decided to return to the practice of implementing TPM internally inside the chipset, as they did in the past for their Series 4 chipsets (e.g. Q45). This would also protect against the LCP bus-level attacks against TPM (although somebody told me recently that TPM in current systems cannot be so easily attacked from LCP bus, because of some authentication protocol being used there \u2013 I really don\'t know, as physical attacks have not been the area we ever looked at extensively; any comments on that?).</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">But then again, the problem of DRAM content sniffing always remains, although I would consider this to be a complex and expensive attack. So, it seems to me that most governments would be able to bypass such TXT-ensured guarantees in order to \u201ctap\u201d the user\'s programs executing in the cloud provides that operate within their jurisdictions. But at least this could stop malicious companies from staring up fake cloud services with an intent to easily harvest some sensitive data from unsuspecting users.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">It seems that the only way to solve the above problem of DRAM sniffing attacks is to add some protection at the processor level. We can imagine two solutions that processor vendors could implement:</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">First, they could opt for adding an in-processor hardware mechanism for encrypting all the data that leave the processor, to ensure that everything the is kept in the DRAM is encrypted (and, of course, also integrity-protected), with some private key that never leave the processor. This could be seen as an&nbsp; extension to the Intel TXT.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">This would mean, however, we still needed to relay on: 1) the hypervisor to not contain bugs, 2) the whole VMM architecture to properly protect VM\'s memory, specifically against the Dom0, 3) Intel TXT to not be buggy either, 4) SMM being properly sandboxed, or alternatively to trust (some parts of) the BIOS and SMI handler, 5) TPM\'s EK key to be non-compromised and verifiable as genuine, and 6) TPM bus attacks made impossible (those two could be achieved by moving the TPM back onto the chipset, as mentioned above), and finally, 7) on the encryption key used by the processor for data encryption to be safely kept in the processor.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">That\'s still quite a lot of things to trust, and it requires quite a lot of work to make it practically really secure...</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">The other option is a bit more crazy, but also more powerful. The idea is that the processor might allow to create </span><i>untrusted supervisors</i><span style="font-style: normal;"> (or hypervisors). Bringing this down to x86 nomenclature, it would mean that kernel mode (or VT-x root) code cannot sniff or inject code into (crypto-protected) memory of the usermode processes (or VT-x guests). This idea is not as crazy as you might think, and there has even been <a href="http://www.eecg.toronto.edu/%7Elie/papers/lie-sosp2003.pdf">some academic work</a> done in this area. Of course, there are many catches here, as this would require specifically written and designed applications. And if we ever considered to use this technology also for client systems (how nice it would be if we could just get rid of some 200-300 kLOC of the Xen hypervisor from the TCB in Qubes OS!), the challenges are even bigger, mostly relating to safe and secure trusted output (screen) and, especially, input (keyboard, mouse).</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">If this worked out, then we would need to trust just one element: the processor. But we need to trust it <a href="http://theinvisiblethings.blogspot.com/2009/06/more-thoughts-on-cpu-backdoors.html">anyway</a>. Of course, we also need to trust some software stack, e.g. the compilers we use at home to build our application, and the libraries it uses, but that\'s somehow an unrelated issue. What is important is that we now would be able to choose that (important) software stack ourselves, and don\'t care about all the other software used by the cloud provider.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">As I wrote above, the processor is this final element we always need to rust. In practice this comes down to also trusting the US government :) But we might imagine users consciously choosing e.g. China-based, or Russia-based cloud providers and require (cryptographically) to run their hosted programs on US-made processors. I guess this could provide reasonable politically-based safety.  And there is also ARM, with its licensable processor cores, where, I can imagine, the licensee (e.g. an EU state) would be able to put their own private key, not known to any other government (here I assume the licensee also audits the processor RTL for any signs of backdoors). I\'m not sure if it would be possible to hide such a private key from a foundry in Hong Kong, or somewhere, but luckily there are also some foundries within the EU.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">In any case, it seems like we could make our cloud computing orders of magnitude safer and more secure than what is now. Let\'s see whether the industry will follow this path...</span></div><span style="font-style: normal;"> </span>', 'guidislink': True, 'published': u'2011-12-13T20:25:00.000+01:00', u'thr_total': u'17', 'classifier': 'confidentiality'}
{'updated': u'2012-03-28T11:10:07.825+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'hardware', 'updated_parsed': time.struct_time(tm_year=2012, tm_mon=3, tm_mday=28, tm_hour=9, tm_min=10, tm_sec=7, tm_wday=2, tm_yday=88, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2011, tm_mon=12, tm_mday=6, tm_hour=9, tm_min=48, tm_sec=0, tm_wday=1, tm_yday=340, tm_isdst=0), 'title': u'Exploring new lands on Intel CPUs (SINIT code execution hijacking)', 'pred': u'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7845092546778053242/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=7845092546778053242', 'type': u'text/html', 'rel': u'replies', 'title': u'6 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7845092546778053242', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/7845092546778053242', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/12/exploring-new-lands-on-intel-cpus-sinit.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Exploring new lands on Intel CPUs (SINIT code execution hijacking)'}], 'summary': u'Today we\'re releasing a new paper where we describe exploiting a bug in Intel SINIT authenticated code module that allows for arbitrary code execution in what we call an \u201cSINIT mode\u201d. So, to the already pretty-well explored \u201clands\u201d on Intel processors, that include ring 3 (usermode), ring 0 (kernelmode), ring \u201c-1\u201d (VT-x root), and ring \u201c-2\u201d (SMM), we\'re now adding a new \u201cisland\u201d, the SINIT mode, a previously unexplored territory inhabited so far only by the Intel-blessed opcodes. <br /><br />What is really interesting about the attack are the consequences of SINIT mode hijacking, which include ability to bypass Intel TXT, LCP, and also compromise system SMRAM.<br /><br />It\'s also interesting how difficult was this vulnerability for Intel to patch, as they had to release not only updated SINIT modules, but also updated microcode for all the affected processors, and also work with the BIOS vendors so they release updated BIOSes that would be unconditionally loading this updated microcode (plus provide anti-rollback mechanisms for both the BIOS and microcode). Quite an undertaking...<br /><br />You can get the paper <a href="http://www.invisiblethingslab.com/resources/2011/Attacking_Intel_TXT_via_SINIT_hijacking.pdf">here</a>.<br /><br />Intel also published an advisory yesterday, which can be downloaded from their website <a href="http://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00030&amp;languageid=en-fr">here</a>. The advisory is peculiar in a few ways, however...<br /><br />First, the advisory (I\'m referring to the revision 1.0) never explicitly mentions that the attack allows to bypass TXT launch itself, only that the attack \u201cmay compromise certain SINIT ACM functionality, including launch control policy and additionally lead to compromise of System Management Mode (SMM). Intel also recommend to disable TXT altogether in the BIOS, as a preventive measure, in case the user doesn\'t \u201cactively running Intel\xae TXT\u201d... This reminds me how various vendors started actively disabling Intel VT-x after certain virtualization rootkits have been demonstrated some 5 years ago, and how many laptops still ship with this technology disabled today (or VT-d at least) to the questionable delight of many users.<br /><br />Second, the advisory assigns only an \u201cImportant\u201d rating to this vulnerability, even though <a href="http://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00021&amp;languageid=en-fr">another Intel advisory</a>, published some two years ago for a problem also reported by us, and which which was strictly a <i>subset</i> of the current vulnerability in terms of powers that it gave to the attacker (in other words the current vulnerability provides the attacker with everything that the previous one did, plus much more), was given a \u201cCritical\u201d rating... This is called evolution, I guess, and I wonder what would be considered critical by Intel these days?<br /><br /><b>UPDATE (Dec 7th, 2011):</b> Intel has just released <a href="http://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00030&amp;languageid=en-fr">an updated advisory</a> (release 1.1) that now explicitly states that the vulnerability also bypasses Intel TXT.<br /><br />This is the last paper co-authored with Rafal Wojtczuk, who recently decided to try some new things and to leave ITL. Rafal has been the most talented exploit writer I have worked with, and I will surely miss his ingenious insights, such as e.g. how to practically win an absolutely hopeless race condition with ICMP-delivered MSI! But then again, how many times can one break Intel technologies, before getting bored? At the same time ITL is really transforming now into a development company, with all our efforts around Qubes and architecting, rather than on breaking. I wish Rafal all the best with his new endeavors, and thank him for all the excellent contributions he made while working for ITL over the past 3+ years.', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u"Today we're releasing a new paper where we describe exploiting a bug in Intel SINIT authenticated code module that allows for arbitrary code execution in what we call an SINIT mode. So, to the already pretty-well explored lands on Intel processors, that include ring 3 (usermode), ring 0 (kernelmode), ring -1 (VT-x root), and ring -2 (SMM), we're now adding a new island, the SINIT mode, a previously unexplored territory inhabited so far only by the Intel-blessed opcodes. What is really interesting about the attack are the consequences of SINIT mode hijacking, which include ability to bypass Intel TXT, LCP, and also compromise system SMRAM.It's also interesting how difficult was this vulnerability for Intel to patch, as they had to release not only updated SINIT modules, but also updated microcode for all the affected processors, and also work with the BIOS vendors so they release updated BIOSes that would be unconditionally loading this updated microcode (plus provide anti-rollback mechanisms for both the BIOS and microcode). Quite an undertaking...You can get the paper here.Intel also published an advisory yesterday, which can be downloaded from their website here. The advisory is peculiar in a few ways, however...First, the advisory (I'm referring to the revision 1.0) never explicitly mentions that the attack allows to bypass TXT launch itself, only that the attack may compromise certain SINIT ACM functionality, including launch control policy and additionally lead to compromise of System Management Mode (SMM). Intel also recommend to disable TXT altogether in the BIOS, as a preventive measure, in case the user doesn't actively running Intel  TXT... This reminds me how various vendors started actively disabling Intel VT-x after certain virtualization rootkits have been demonstrated some 5 years ago, and how many laptops still ship with this technology disabled today (or VT-d at least) to the questionable delight of many users.Second, the advisory assigns only an Important rating to this vulnerability, even though another Intel advisory, published some two years ago for a problem also reported by us, and which which was strictly a subset of the current vulnerability in terms of powers that it gave to the attacker (in other words the current vulnerability provides the attacker with everything that the previous one did, plus much more), was given a Critical rating... This is called evolution, I guess, and I wonder what would be considered critical by Intel these days?UPDATE (Dec 7th, 2011): Intel has just released an updated advisory (release 1.1) that now explicitly states that the vulnerability also bypasses Intel TXT.This is the last paper co-authored with Rafal Wojtczuk, who recently decided to try some new things and to leave ITL. Rafal has been the most talented exploit writer I have worked with, and I will surely miss his ingenious insights, such as e.g. how to practically win an absolutely hopeless race condition with ICMP-delivered MSI! But then again, how many times can one break Intel technologies, before getting bored? At the same time ITL is really transforming now into a development company, with all our efforts around Qubes and architecting, rather than on breaking. I wish Rafal all the best with his new endeavors, and thank him for all the excellent contributions he made while working for ITL over the past 3+ years.", 'language': None}], 'guidislink': True, 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Exploring new lands on Intel CPUs (SINIT code execution hijacking)', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2011/12/exploring-new-lands-on-intel-cpus-sinit.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2011-12-06T10:48:00.001+01:00', u'thr_total': u'6', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-7845092546778053242', 'classifier': 'processors'}
{'updated_parsed': time.struct_time(tm_year=2013, tm_mon=2, tm_mday=21, tm_hour=14, tm_min=48, tm_sec=49, tm_wday=3, tm_yday=52, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/2682693250711953422/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'http://www.blogger.com/comment.g?blogID=24586388&postID=2682693250711953422', 'type': u'text/html', 'rel': u'replies', 'title': u'10 Comments'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/2682693250711953422', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'http://www.blogger.com/feeds/24586388/posts/default/2682693250711953422', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/09/playing-with-qubes-networking-for-fun.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Playing with Qubes Networking for Fun and Profit'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-2682693250711953422', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=9, tm_mday=28, tm_hour=14, tm_min=36, tm_sec=0, tm_wday=2, tm_yday=271, tm_isdst=0), 'title': u'Playing with Qubes Networking for Fun and Profit', 'pred': u'announcements', 'content': [{'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/html', 'value': u'Today, I would like to showcase some of the cool things that one can do with the Qubes networking infrastructure, specifically with all the new features that have been brought by the just released Qubes Beta 2. This will cover the use of multiple Net VMs for creating isolated networks,  the use of a Proxy VM for creating a transparent Tor Proxy VM, as well as demonstration of how to use a Standalone VM with manually assigned devices, to create a WiFi pen-testing VM, which surely represents the for fun aspect of this post.Qubes Networking IntroFrom the networking point of view there are three types of VMs in Qubes:            Net VMs, that have networking  devices assigned to them, such as e.g. a WiFi or Ethernet card. Each  Net VM contains a Xen network backend that is used to provide  networking to all VMs that are connected to this Net VM.Regular VMs (AppVMs) that use the  networking provided by Net VMs (so they have Xen network frontends  that provide virtual interfaces that are backed by the backend in  the corresponding Net VM.Proxy VMs that combine both of the  above: to Net VMs they look like regular AppVMs, because they are  consumers of the networking they provide, but to other AppVMs they  act as if they were Net VMs themselves, allowing other VMs to  connect to them. Of course the Proxy VMs do not have directly  assigned networking devices \u2013 they use the networking provided by  the Net VM that they connect to. One can chain many Proxy VMs, as we  will see below.            The virtual interfaces in client VMs are called ethX, and are provided by the xen_netfront kernel module, and the corresponding interfaces in the Net/Proxy VM are called vifX.Y and are created by the xen_netback module.Each Net and Proxy VM implements NAT, specifically masquerading, for all the connected VMs. Additionally to this SNAT, each Net or Proxy VM provides also DNAT redirection for DNS resolutions, so that each VM behind a Proxy or Net VM thinks that it uses a DNS in the Net/Proxy VM, but in fact all the DNS request are DNAT-ed by all the Proxy and Net VMs down the original DNS that is provided to the final Net VM. This smart trick allows us to avoid running a DNS caching server in Proxy/Net VMs. Also, any VM-to-VM traffic, among the VMs connected to the same Net/Proxy VM is blocked by default.Additionally, each Proxy VM enforces system-wide firewaling rules, specifically the rules for all the directly connected VMs. Those firewalling rules are centrally managed in Dom0 and exposed to each Proxy VM through Xen store. One useful application of this firewalling mechanism is to limit certain VMs to only specific type of white-listed traffic to minimize likelihood of user mistakes. A good example could be a work VM that might be limited to network connectivity only with the select corporate servers and denied all other traffic. This way, when the user receives an email message with an embedded http link (possibly leading to a malicious website) and accidentally clicks on it, nothing wrong happens.The current infrastructure doesn\'t support IPv6 routing, but we will likely add this support in the upcoming Beta 3.  The default networking topology in Qubes OSWhen you proceed with the default installation of Qubes Beta 2, then your initial networking topology looks like on the diagram below:The default network configuration in Qubes. So, by default there is one Net VM, called \'netvm\', that is automatically assigned all the networking devices in the system. There is also one Proxy VM, called \'firewallvm\' that is directly connected to the default Net VM, and which provides networking to all other VMs in the system. This  Proxy VM is used for firewall rules enforcement. Each such service VM consumes 200MB of RAM by default.  Network-isolated VMs  For some VMs it might be desirable to completely disconnect them from any kind of networking access. This can be easy done using the following command (issued from Dom0\'s konsole):[dom0]$ qvm-prefs -s  netvm noneFor example I have a \'vault\' VM that I use for keeping my master PGP keys, and other secrets, and this machine is not connected to any network.    Using multiple Net VMs for physically isolated networks&nbsp;In some scenarios the machine might be connected to two or more physically separate networks (e.g. safe corporate intranet, reachable via ethernet cable on the user\'s desk, and the unsafe and evil Internet, reachable via WiFi card).It is easy to use more than one Net VMs in Qubes, and assign different networking devices to different Net VMs, and also decide which VMs are connected to which Net VMs. The diagram below presents an exemplary such setup:A simple setup with two isolated networks, and one fully isolated domain (\'vault\').&nbsp;            We could created such a setup using the following commands (issued in Dom0):[dom0]$ qvm-create netvm1 --net --label red[dom0]$ qvm-create netvm2 --net --label yellowCurrently qvm-create when used with the --net option automatically assigns all networking devices to the just created VM, so in the example above you would want to remove extra devices from each Net VM using qvm-pci -d, leaving only those you really want, e.g.:&nbsp;[dom0]$ qvm-pci -l netvm1 # to get a list of currently assigned devices            [dom0]$ qvm-pci -d netvm1 02:00.0Now we should create the Firewall VMs:[dom0]$ qvm-create firewallvm1 --proxy --label green[dom0]$ qvm-create firewallvm2 --proxy --label green... and connect them to proper Net VMs:[dom0]$ qvm-prefs -s firewallvm1 netvm netvm1[dom0]$ qvm-prefs -s firewallvm2 netvm netvm2And now, for any other VM, just set the appropriate Net VM (either firewallvm1 or firewallvm2, or \'none), to get it assigned to either of the isolated networks, e.g.:[dom0]$ qvm-prefs -s banking netvm firewallvm1[dom0]$ qvm-prefs -s xfiles netvm firewallvm2[dom0]$ qvm-prefs -s vault netvm none...  This configuration provides very strong isolation between the VMs belonging to network #1, and the VMs belonging to network #2. Specifically, this becomes significant if we fear about potential remotely exploitable bugs in the client code of the core TCP/IP stack (in this case the Net VM could potentially compromise all the connected VMs -- but the same problem applies to even physically separated machines that use the same network).  Setting up Tor Proxy using a Proxy VMLet\'s now play a bit with Proxy VMs and see how we can use it to create a simple Tor proxy VM. Such a VM would provide anonymized networking to all its clients, so would allow to easily create VMs for anonymous Internet access. The simple setup we would like to prepare is depicted on the figure below:The \'torvm\' Proxy VM provides anonymized networking to \'anon-web\' and \'anon-bitcoin\' VMs. All the traffic generated by the VMs behind \'torvm\' is either fed into the Tor network, or discarded. Furthermore, any app running in those VMs is not able to read any global system identifiers, such as the external IP, external MAC address, etc. Our Tor proxy would forward only the Tor traffic, so we don\'t have to fear about some Tor-not-aware applications, or even intentionally malicious ones to compromise the privacy of our connection. This is because such applications have no way to generate traffic to the outside world without going through our Tor proxy (unless they could exploit a hypothetical vulnerability in the Tor process running in the Tor VM). Also, the applications running in any VM behind the Tor proxy are not able to determine any globally identifiable IDs, such as the user\'s external IP address, the real MAC address used by real NICs, etc.Interestingly just after writing the above paragraph, I discovered that one of our xenstore keys had wrong permissions and, as a result, any VM could read it and get to know the actual external IP (the key is used by a Net VM to communicate the external IP configuration to the connected Proxy VMs, so they could know when to update the firewall configuration). The fix for this problem is here, and the update (qubes-core-dom0-1.6.32) is now available for Dom0 (just do qvm-dom0-updateto get it installed).&nbsp;           So, this represents a rather strong setup for use with Tor. Let\'s now have a look at how to practically  create such a configuration, step by step.First, let\'s create the VM that will become our Tor proxy:[dom0]$ qvm-create torvm --proxy --label greenThis will create a Proxy VM named \'torvm\', based on the default template. We will need to now start the template VM and install the Tor client there:[dom0]$ qvm-run -a fedora-14-x64 gnome-terminalAlternatively, if we didn\'t trust the Tor client rpm package to be non-malicious, specifically for its installation scripts to be non malicious, we could have based this on a different template, e.g. one used for less trusted VMs, or we could installed the Tor client in /usr/local, that is backed by the VM\'s private storage, but this would require compiling Tor from sources.Now, in the just started template VM, lets install the Tor client and (optionally) the Vidalia graphical frontend:[fedora-14-x64]$ sudo yum install tor vidaliaAnd then power off the template VM. Now, every VM based on this template, started after the template shutdown, will also see the Tor binary in its filesystem.Let\'s now configure our torvm to properly start Tor proxying at boot:[dom0]$ qvm-run -a torvm gnome-terminalNow, we will create the following script for starting up the Tor transparent proxy and setting up traffic redirection using iptables:[torvm]$ vim /rw/config/start_tor_proxy.sh...and now paste the following into this file:#!/bin/shkillall torQUBES_IP=$(xenstore-read qubes_ip)TOR_TRANS_PORT=9040if [ X$QUBES_IP == X ]; thenecho "Error getting QUBES IP!"echo "Not starting Tor, but setting the traffic redirection anyway to prevent leaks."QUBES_IP="127.0.0.1"else/usr/bin/tor \\--SocksPort 0 \\--TransListenAddress $QUBES_IP --TransPort $TOR_TRANS_PORT \\--DNSListenAddress $QUBES_IP --DNSPort 53 \\--RunAsDaemon 1 --ControlPort 9051 \\|| echo "Error starting Tor!"fiecho 0 &gt; /proc/sys/net/ipv4/ip_forward /sbin/iptables -t nat -F/sbin/iptables -t nat -A PREROUTING -i vif+ -p udp --dport 53 -j DNAT --to-destination $QUBES_IP:53/sbin/iptables -t nat -A PREROUTING -i vif+ -p tcp -j DNAT --to-destination $QUBES_IP:$TOR_TRANS_PORT/sbin/iptables -I INPUT 1 -i vif+ -p udp --dport 53 -j ACCEPT/sbin/iptables -I INPUT 2 -i vif+ -p tcp --dport 9040 -j ACCEPT/sbin/iptables -F FORWARDecho 1 &gt; /proc/sys/net/ipv4/ip_forward Except for the QUBES_IP=$(xenstore-read qubes_ip) line that reads the torvm\'s IP address, there is nothing Qubes-specific in the above listing. It\'s just a standard way of setting up transparent Tor proxy.It is important that this file be located in the /rwdirectory, as this directory is backed by the VM\'s private storage and will survive VM reboots. The VM\'s root file-system is read-only and all the changes to it are lost on VM shutdown (VM gets an illusion of the root fs being writeable thanks to Copy-On-Write mechanism, but the actual COW backing device is cleared upon each VM shutdown).We should also modify the /rw/config/rc.localscript, to ensure that our Tor proxy is automatically started -- just paste the following into this script:#!/bin/sh# Uncomment this if you would like to use a custom torrc file:#rm -f /rw/config/log#ln -sf /rw/config/torrc /etc/tor/torrcchkconfig qubes_netwatcher offchkconfig qubes_firewall off/rw/config/start_tor_proxy.shFinally we should also provide a script that would restart our proxy in case the user dynamically switched the NetVM, which would result in the completely different routing. This could be done by creating a script with predefined name qubes_ip_change_hookwithin /rw/config/directory:#!/bin/sh/rw/config/start_tor_proxy.shMake sure that all the scripts are executable (chmod +x). And that\'s all. Now, shutdown the torvm:[dom0]$ qvm-run --shutdown --wait torvmFrom now on, every time you start the torvm (or when Qubes starts it in response to start of some other VM that uses torvm as its Net VM), the Tor transparent proxy should be automatically started.Let\'s test this by creating a VM that would be using the just created Tor proxy:[dom0]$ qvm-create anon-web --label black[dom0]$ qvm-prefs -s  anon-web netvm torvmNow, every time you start the anon-web VM (e.g. by clicking on the Web browser icon in the anon-web\'s start menu), Qubes will also ensure that torvm is up and running, and this in turn would configure all the Tor proxying for this VM.Fo additional control one might want to use Vidalia, the graphical front end for Tor (this should be installed within the template VM that has been used for torvm). We could easily start Vidalia by just typing:[dom0]$ qvm-run -a torvm vidaliaWe should however make sure to disable "Start the Tor software when vidalia starts" option in Settings/General in Vidalia. Otherwise, Vidalia might kill your original Tor (that has transparent proxy open) and start own without transparent proxy enabled.The web browser runs in the \'anon-web\' VM that uses \'torvm\' for networking access, and thus all the traffic generated by \'anon-web\' is routed through the Tor network, or discarded if it\'s a different traffic than TCP or DNS. Of course one case easily create more VMs that would be using torvm as their Net VM, as so would have anonymized network access. The beauty of this solution is that in case one of my anonymized VM gets compromised, others do not. Plus, the already mentioned benefit, that no matter whether apps in those VMs are buggy, or even intentionally malicious, they would not be able to leak out the user\'s external IP address.Creating a WiFi pen-testing VMFinally let\'s have some fun and create a WiFi pen-testing VM. The desired config is depicted below: Because we would like to use all sorts of l33t h4x0r t00lzpen-testing security software in this VM, it would make sense to create it as a Standalone VM, which means that it would get its own copy of the whole file-system (as opposed to just the home directory, /rwand /usr/local, as it is the case with regular Qubes VMs). This would ease the installation of all the extra software we would need there, and also ensure that even if the install/build scripts were malicious, the damages would be contained only to this very VM and nothing else. Also, for some reason the standard Linux WiFi stack and drivers still don\'t support injection on (all?) most of the WiFi cards out of the box, so we would need to patch the actual kernel drivers -- yet another reason to use a Standalone VM in this case.So, let\'s create the VM first, and assign a WiFi card to it:[dom0]$ qvm-create wififun --standalone --label yellow[dom0]$ qvm-prefs -s wififun memory 800 # ensure at least this mem at startup[dom0]$ qvm-prefs -s wififun kernel none # use own copy of kernel and modules[dom0]$ qvm-pci -a wififun You can easily find the BDF address of any device using the lspcicommand in Dom0 -- this would be something like e.g. 02:00.0. You should make sure that this WiFi card is not used by any other VM, specifically by your default Net VM (called \'netvm\' in a standard Qubes installation). Ideally you could just use a dedicated Express Card-based WiFi card, leaving the built in WiFi assigned to your default Net VM.Because it\'s a Standalone VM, Qubes will make a copy of the whole root filesystem, and thus it would eat about 5GB of your disk (normal VMs would take only as much space as their private fs takes up).Let\'s now start the VM...[dom0]$ qvm-run -a wififun gnome-terminal... and then install the prerequisite software there, starting with downloading the reasonably new compat-wireless sources, together with the required injection patches, and then building and installing the new kernel modules. All actions below are now executed within the VM. This stuff here is really nothing Qubes- or Xen-specific -- one would do more or less the same on any Linux in order to get injection working (so, treat this as a free bonus WiFi hacking tutorial on Linux).[wififun]$ wget http://linuxwireless.org/download/compat-wireless-2.6/compat-wireless-2011-07-14.tar.bz2[wififun]$ wget http://patches.aircrack-ng.org/channel-negative-one-maxim.patch[wififun]$ wget http://patches.aircrack-ng.org/mac80211-2.6.29-fix-tx-ctl-no-ack-retry-count.patch[wififun]$ wget http://patches.aircrack-ng.org/mac80211.compat08082009.wl_frag+ack_v1.patch[wififun]$ sudo yum install kernel-devel patch gcc[wififun]$ tar xjf compat-wireless-2011-07-14.tar.bz2[wififun]$ cd compat-wireless-2011-07-14[wififun]$ patch -p1 &lt; ../channel-negative-one-maxim.patch[wififun]$ patch -p1 &lt; ../mac80211-2.6.29-fix-tx-ctl-no-ack-retry-count.patch[wififun]$ patch -p1 &lt; ../mac80211.compat08082009.wl_frag+ack_v1.patch[wififun]$ make[wififun]$ sudo make unload[wififun]$ sudo make installNow, lets reboot the VM to ensure that all the patched drivers will get properly loaded on each VM boot:[dom0]$ qvm-run --shutdown --wait wififun[dom0]$ qvm-run -a wififun gnome-terminalLet\'s first see if the WiFi driver got properly loaded and if the interface has been created (look for wlanXinterface):[wififun]$ ifconfig -aIf yes, then proceed with the steps below (if not, then have a look into dmesg and see what was the problem):[wififun]$ sudo bash[wififun]# yum install aircrack-ng dnsmasq[wififun]# airmon-ng start wlan0 [wififun]# iptables -F INPUT[wififun]# iptables -F FORWARD[wififun]# echo 1 &gt; /proc/sys/net/ipv4/ip_forwardNote that you don\'t need to add any explicit masquerading rules, as they are applied by default on Qubes VMs (you can take a look at the nat table in the VM if you want to see by yourself).Edit the /etc/dnsmasq.conf, so that it contains at least the following:interface=at0dhcp-range=192.168.0.50,192.168.0.150,12hand then start the dnsmasq daemon -- we will use it for providing DHCP to our fake AP (the at0 interface will be created by airbase-ng and emulates the uplink of a traditional AP):[wififun]# /etc/init.d/dnsmasq startAnd finally the fake AP:[wififun]# airbase-ng -e free_wifi mon0and on another console (before any client connects, but after airbase-nggot started), configure the at0interface (make sure it matches what you wrote into dnsmasq.conf):[wififun]# ifconfig at0 192.168.0.1 up(you can also add an udev rule to that automatically).and just to verify it really is working:[wififun]# tcpdump -i at0... and now, just wait for a client to connect to your AP. What you do next is only limited by your imagination... But hey, this article is about Qubes networking and not about 0wning client systems ;)Here\'s an innocent example using Moxie\'s sslstrip (amazing this attack still works so well at the end of 2011...):My \'wififun\' VM in action using a simple sslstrip attack, that surprisingly still works pretty nice... Please note that as your wififun VM is a regular Qubes VM, it is automatically connected to the default Net VM, which in turn provides networking to it. That\'s why it is so easy to create a fully functioning fake AP.When using custom driver domains, there are currently some catches you should be aware:Catch #1: When you start a driver domain lateafter system boot, so after some days of uptime and extensive use of VMs, Xen might not be able to allocate enough continues (in terms of MFNs) memory for a driver domain. And PV driver domains, unlike normal domains or HVM driver domains, do require MFN-continuous  memory for their DMA buffers (HVM domains do not need that, because IOMMU can create an illusion of this; even though IOMMU is also used for PV driver domains, for protection, it doesn\'t actively translate bus addresses into GMFNs).This is usually not a big problem in practice, because in most cases all the driver domains are started early at system boot, when there is still plenty of non-fragmented memory available. However it might become a problem when one wishes to start e.g. the WiFi pen-testing at some later time. The work around is to close as many VMs as possible before starting such driver domain, and then also reducing, for a moment, the amount of memory assigned to Dom0:[dom0]$ xm mem-set 0 1600mand then starting the driver domain should be fine. Now we can start all other domains, and that should no longer be problematic for the already running driver domain.Catch #2: Some network cards, notably Express Cards, might not work well with the 3.0.4 pvops kernel that we use in all VMs by default. In that case you might want to try to use the 2.6.38.3 xenlinux kernel in your WiFi fun VM -- to do that, follow these steps:[dom0]$ sudo qvm-dom0-update kernel-qubes-vm-2.6.38.3-10.xenlinux.qubes[dom0]$ cp /var/lib/qubes/vm-kernels/2.6.38.3/* /var/lib/qubes/appvms/wififun/kernels/[dom0]$ qvm-prefs wififun -s kernelopts "swiotlb=force"And then, in the VM:[wififun]$ sudo yum install kernel-devel-2.6.38.3-10.xenlinux.qubesAnd rebuild the compat-wireless, unload, install modules, and then load drivers again.SummaryAs you can see, Qubes Beta 2 now offers a very advanced networking infrastructure that allows more advanced users to create very sophisticated configurations, allowing for pretty good isolation between various domains and networks. Qubes leaves it up to the user (or admin) to figure out what would be the best configuration -- most users would be happy with the default simple setup with just one Net VM and one Firewall VM, while others would go for much more advanced setups.A bit more advanced networking setup. The usbvm has a 3G modem assigned, and it is possible to dynamically switch between the Net VMs without restarting any other VMs.', 'language': None}], 'title_detail': {'base': u'http://theinvisiblethings.blogspot.com//feeds/posts/default?alt=atom', 'type': u'text/plain', 'value': u'Playing with Qubes Networking for Fun and Profit', 'language': None}, 'updated': u'2013-02-21T15:48:49.775+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/09/playing-with-qubes-networking-for-fun.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'os', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://3.bp.blogspot.com/-HGvCszJ422w/ToMeJm16CMI/AAAAAAAAAJA/CdX1Y-Ct_uc/s72-c/qubes-default-net-config.png', 'width': u'72', 'height': u'72'}], 'summary': u'Today, I would like to showcase some of the cool things that one can do with the Qubes networking infrastructure, specifically with all the new features that have been brought by the just released Qubes Beta 2. This will cover the use of multiple Net VMs for creating isolated networks,  the use of a Proxy VM for creating a transparent Tor Proxy VM, as well as demonstration of how to use a Standalone VM with manually assigned devices, to create a \u201cWiFi pen-testing\u201d VM, which surely represents the \u201cfor fun\u201d aspect of this post.<br /><br /><b>Qubes Networking Intro</b><br /><br />From the networking point of view there are three types of VMs in Qubes:<br />            <br /><ul><li><div style="margin-bottom: 0in;">Net VMs, that have networking  devices assigned to them, such as e.g. a WiFi or Ethernet card. Each  Net VM contains a Xen network backend that is used to provide  networking to all VMs that are connected to this Net VM.</div></li><li><div style="margin-bottom: 0in;">Regular VMs (AppVMs) that use the  networking provided by Net VMs (so they have Xen network frontends  that provide virtual interfaces that are backed by the backend in  the corresponding Net VM.</div></li><li><div style="margin-bottom: 0in;">Proxy VMs that combine both of the  above: to Net VMs they look like regular AppVMs, because they are  consumers of the networking they provide, but to other AppVMs they  act as if they were Net VMs themselves, allowing other VMs to  connect to them. Of course the Proxy VMs do not have directly  assigned networking devices \u2013 they use the networking provided by  the Net VM that they connect to. One can chain many Proxy VMs, as we  will see below.</div></li></ul>            <br /><div style="margin-bottom: 0in;"><span style="font-style: normal;">The virtual interfaces in client VMs are called </span><span style="font-family: Liberation Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">ethX</span></span></span></span><span style="font-style: normal;">, and are provided by the </span>xen_netfront<span style="font-style: normal;"> kernel module, and the corresponding interfaces in the Net/Proxy VM are called </span><span style="font-family: Liberation Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">vifX.Y</span></span></span></span> and are created by the xen_netback module.</div><br />Each Net and Proxy VM implements NAT, specifically masquerading, for all the connected VMs. Additionally to this SNAT, each Net or Proxy VM provides also DNAT redirection for DNS resolutions, so that each VM behind a Proxy or Net VM thinks that it uses a DNS in the Net/Proxy VM, but in fact all the DNS request are DNAT-ed by all the Proxy and Net VMs down the original DNS that is provided to the final Net VM. This smart trick allows us to avoid running a DNS caching server in Proxy/Net VMs. <br /><div style="margin-bottom: 0in;"><br />Also, any VM-to-VM traffic, among the VMs connected to the same Net/Proxy VM is blocked by default.</div><div style="margin-bottom: 0in;"><br />Additionally, each Proxy VM enforces system-wide firewaling rules, specifically the rules for all the directly connected VMs. Those firewalling rules are centrally managed in Dom0 and exposed to each Proxy VM through Xen store. One useful application of this firewalling mechanism is to limit certain VMs to only specific type of white-listed traffic to minimize likelihood of user mistakes. A good example could be a work VM that might be limited to network connectivity only with the select corporate servers and denied all other traffic. This way, when the user receives an email message with an embedded http link (possibly leading to a malicious website) and accidentally clicks on it, nothing wrong happens.</div><div style="margin-bottom: 0in;"><br />The current infrastructure doesn\'t support IPv6 routing, but we will likely add this support in the upcoming Beta 3.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">  </div><div style="font-style: normal; margin-bottom: 0in;"><b>The default networking topology in Qubes OS</b><br /><br />When you proceed with the default installation of Qubes Beta 2, then your initial networking topology looks like on the diagram below:</div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-HGvCszJ422w/ToMeJm16CMI/AAAAAAAAAJA/CdX1Y-Ct_uc/s1600/qubes-default-net-config.png" style="margin-left: auto; margin-right: auto;"><img border="0" height="272" src="http://3.bp.blogspot.com/-HGvCszJ422w/ToMeJm16CMI/AAAAAAAAAJA/CdX1Y-Ct_uc/s400/qubes-default-net-config.png" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">The default network configuration in Qubes.</td></tr></tbody></table><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"> So, by default there is one Net VM, called \'netvm\', that is automatically assigned all the networking devices in the system. There is also one Proxy VM, called \'firewallvm\' that is directly connected to the default Net VM, and which provides networking to all other VMs in the system. This  Proxy VM is used for firewall rules enforcement. Each such service VM consumes 200MB of RAM by default.</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">  </div><div style="font-style: normal; margin-bottom: 0in;"><b>Network-isolated VMs</b></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">  </div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br />For some VMs it might be desirable to completely disconnect them from any kind of networking access. This can be easy done using the following command (issued from Dom0\'s konsole):</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;">[dom0]$ qvm-prefs -s </span><i></i><span style="font-style: normal;"> netvm none</span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br />For example I have a \'vault\' VM that I use for keeping my master PGP keys, and other secrets, and this machine is not connected to any network.</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">  </div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">  </div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><b>Using multiple Net VMs for physically isolated networks</b>&nbsp;</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">In some scenarios the machine might be connected to two or more physically separate networks (e.g. safe corporate intranet, reachable via ethernet cable on the user\'s desk, and the unsafe and evil Internet, reachable via WiFi card).</div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; margin-bottom: 0in;">It is easy to use more than one Net VMs in Qubes, and assign different networking devices to different Net VMs, and also decide which VMs are connected to which Net VMs. The diagram below presents an exemplary such setup:</div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-_04df-F5fW0/ToMe2QX_K8I/AAAAAAAAAJE/azWeNG5R5qc/s1600/qubes-multi-netvm-config.png" style="margin-left: auto; margin-right: auto;"><img border="0" height="348" src="http://3.bp.blogspot.com/-_04df-F5fW0/ToMe2QX_K8I/AAAAAAAAAJE/azWeNG5R5qc/s400/qubes-multi-netvm-config.png" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">A simple setup with two isolated networks, and one fully isolated domain (\'vault\').</td></tr></tbody></table><div style="font-style: normal; margin-bottom: 0in;">&nbsp;            </div><div style="font-style: normal; margin-bottom: 0in;">We could created such a setup using the following commands (issued in Dom0):</div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-create netvm1 --net --label red</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-create netvm2 --net --label yellow</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Currently <span style="font-family: Liberation Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">qvm-create</span></span></span></span> when used with the <span style="font-family: Liberation Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">--net</span></span></span></span> option automatically assigns all networking devices to the just created VM, so in the example above you would want to remove extra devices from each Net VM using <span style="font-family: Liberation Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">qvm-pci -d</span></span></span></span>, leaving only those you really want, e.g.:<span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">&nbsp;</span></span><br /><br /><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-pci -l netvm1 <span style="font-family: DejaVu Serif,serif;"># to get a list of currently assigned devices</span></span></span></div>            <br /><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-pci -d netvm1 02:00.0</span></span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Now we should create the Firewall VMs:</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-create firewallvm1 --proxy --label green</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-create firewallvm2 --proxy --label green</span></span></div><div style="margin-bottom: 0in;"><br />... and connect them to proper Net VMs:</div><div style="margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-prefs -s firewallvm1 netvm netvm1</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-prefs -s firewallvm2 netvm netvm2</span></span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">And now, for any other VM, just set the appropriate Net VM (either firewallvm1 or firewallvm2, or \'none), to get it assigned to either of the isolated networks, e.g.:</div><div style="margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-prefs -s banking netvm firewallvm1</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-prefs -s xfiles netvm firewallvm2</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-prefs -s vault netvm none</span></span></div><div style="margin-bottom: 0in;">...</div><div style="font-style: normal; margin-bottom: 0in;">  </div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; margin-bottom: 0in;">This configuration provides very strong isolation between the VMs belonging to network #1, and the VMs belonging to network #2. Specifically, this becomes significant if we fear about potential remotely exploitable bugs in the client code of the core TCP/IP stack (in this case the Net VM could potentially compromise all the connected VMs -- but the same problem applies to even physically separated machines that use the same network).</div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; margin-bottom: 0in;">  </div><div style="font-style: normal; margin-bottom: 0in;"><b>Setting up Tor Proxy using a Proxy VM</b></div><div style="font-style: normal; margin-bottom: 0in;"><br />Let\'s now play a bit with Proxy VMs and see how we can use it to create a simple Tor proxy VM. Such a VM would provide anonymized networking to all its clients, so would allow to easily create VMs for anonymous Internet access. The simple setup we would like to prepare is depicted on the figure below:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-eG2Y4_xJxD0/ToMgWVNiEjI/AAAAAAAAAJI/pWNCiXq-qKs/s1600/qubes-torproxy-config.png" style="margin-left: auto; margin-right: auto;"><img border="0" height="225" src="http://1.bp.blogspot.com/-eG2Y4_xJxD0/ToMgWVNiEjI/AAAAAAAAAJI/pWNCiXq-qKs/s400/qubes-torproxy-config.png" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">The \'torvm\' Proxy VM provides anonymized networking to \'anon-web\' and \'anon-bitcoin\' VMs. All the traffic generated by the VMs behind \'torvm\' is either fed into the Tor network, or discarded. Furthermore, any app running in those VMs is not able to read any global system identifiers, such as the external IP, external MAC address, etc.</td></tr></tbody></table> <br /><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">Our Tor proxy would forward only the Tor traffic, so we don\'t have to fear about some Tor-not-aware applications, or even intentionally malicious ones to compromise the privacy of our connection. This is because such applications have no way to generate traffic to the outside world without going through our Tor proxy (unless they could exploit a hypothetical vulnerability in the Tor process running in the Tor VM). Also, the applications running in any VM behind the Tor proxy are not able to determine any globally identifiable IDs, such as the user\'s external IP address, the real MAC address used by real NICs, etc.</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">Interestingly just after writing the above paragraph, I discovered that one of our xenstore keys had wrong permissions and, as a result, any VM could read it and get to know the actual external IP (the key is used by a Net VM to communicate the external IP configuration to the connected Proxy VMs, so they could know when to update the firewall configuration). The fix for this problem is <a href="http://git.qubes-os.org/?p=mainstream/core.git;a=commitdiff;h=59f71f634af596c8fe2ef507509bf1ae850286c7">here</a>, and the update (qubes-core-dom0-1.6.32) is now available for Dom0 (just do <a href="http://wiki.qubes-os.org/trac/wiki/SoftwareUpdateDom0">qvm-dom0-update</a>to get it installed).</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">&nbsp;           </div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">So, this represents a rather strong setup for use with Tor. Let\'s now have a look at how to practically  create such a configuration, step by step.</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">First, let\'s create the VM that will become our Tor proxy:</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-create torvm --proxy --label green</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">This will create a Proxy VM named \'torvm\', based on the default template. We will need to now start the template VM and install the Tor client there:</div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-run -a fedora-14-x64 gnome-terminal</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">Alternatively, if we didn\'t trust the Tor client rpm package to be non-malicious, specifically for its installation scripts to be non malicious, we could have based this on a different template, e.g. one used for less trusted VMs, or we could installed the Tor client in <span style="font-family: Liberation Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">/usr/local</span></span></span></span>, that is backed by the VM\'s private storage, but this would require compiling Tor from sources.</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Now, in the just started template VM, lets install the Tor client and (optionally) the Vidalia graphical frontend:</div><div style="margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[fedora-14-x64]$ sudo yum install tor vidalia</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;">And then power off the template VM. Now, every VM based on this template, started after the template shutdown, will also see the Tor binary in its filesystem.</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;">Let\'s now configure our torvm to properly start Tor proxying at boot:</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-run -a torvm gnome-terminal</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;">Now, we will create the following script for starting up the Tor transparent proxy and setting up traffic redirection using iptables:</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[torvm]$ vim /rw/config/start_tor_proxy.sh</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: Liberation Serif,serif;">...</span></span>and now paste the following into this file:</span></span></div><blockquote><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">#!/bin/sh</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">killall tor</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">QUBES_IP=$(xenstore-read qubes_ip)</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">TOR_TRANS_PORT=9040</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">if [ X$QUBES_IP == X ]; then</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">echo "Error getting QUBES IP!"</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">echo "Not starting Tor, but setting the traffic redirection anyway to prevent leaks."</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">QUBES_IP="127.0.0.1"</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">else</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">/usr/bin/tor \\</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">--SocksPort 0 \\</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">--TransListenAddress $QUBES_IP --TransPort $TOR_TRANS_PORT \\</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">--DNSListenAddress $QUBES_IP --DNSPort 53 \\</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">--RunAsDaemon 1 --ControlPort 9051 \\</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">|| echo "Error starting Tor!"</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">fi</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">echo \u201c0\u201d &gt; /proc/sys/net/ipv4/ip_forward </span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">/sbin/iptables -t nat -F</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">/sbin/iptables -t nat -A PREROUTING -i vif+ -p udp --dport 53 -j DNAT --to-destination $QUBES_IP:53</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">/sbin/iptables -t nat -A PREROUTING -i vif+ -p tcp -j DNAT --to-destination $QUBES_IP:$TOR_TRANS_PORT</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">/sbin/iptables -I INPUT 1 -i vif+ -p udp --dport 53 -j ACCEPT</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">/sbin/iptables -I INPUT 2 -i vif+ -p tcp --dport 9040 -j ACCEPT</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">/sbin/iptables -F FORWARD</span></span></div></blockquote><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"></div><br /><blockquote><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">echo \u201c1\u201d &gt; /proc/sys/net/ipv4/ip_forward </span></span></blockquote><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;">Except for the \u201c<span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">QUBES_IP=$(xenstore-read qubes_ip)</span></span></span>\u201d line that reads the torvm\'s IP address, there is nothing Qubes-specific in the above listing. It\'s just a standard way of setting up transparent Tor proxy.</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;">It is important that this file be located in the <span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">/rw</span></span></span>directory, as this directory is backed by the VM\'s private storage and will survive VM reboots. The VM\'s root file-system is read-only and all the changes to it are lost on VM shutdown (VM gets an illusion of the root fs being writeable thanks to Copy-On-Write mechanism, but the actual COW backing device is cleared upon each VM shutdown).</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;">We should also modify the<span style="font-family: inherit;"> <span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">/rw/config/rc.local</span></span></span></span>script, to ensure that our Tor proxy is automatically started -- just paste the following into this script:</span></span></div><blockquote><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">#!/bin/sh</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;"># Uncomment this if you would like to use a custom torrc file:</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">#rm -f /rw/config/log</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">#ln -sf /rw/config/torrc /etc/tor/torrc</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">chkconfig qubes_netwatcher off</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">chkconfig qubes_firewall off</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">/rw/config/start_tor_proxy.sh</span></span></div></blockquote><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;">Finally we should also provide a script that would restart our proxy in case the user dynamically switched the NetVM, which would result in the completely different routing. This could be done by creating a script with predefined name <span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">qubes_ip_change_hook</span></span></span>within <span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">/rw/config/</span></span></span>directory:</span></span></div><blockquote><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">#!/bin/sh</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">/rw/config/start_tor_proxy.sh</span></span></div></blockquote><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;">Make sure that all the scripts are executable (chmod +x). And that\'s all. Now, shutdown the torvm:</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-run --shutdown --wait torvm</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;">From now on, every time you start the torvm (or when Qubes starts it in response to start of some other VM that uses torvm as its Net VM), the Tor transparent proxy should be automatically started.</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;">Let\'s test this by creating a VM that would be using the just created Tor proxy:</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-create anon-web --label black</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-prefs -s  anon-web netvm torvm</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;">Now, every time you start the anon-web VM (e.g. by clicking on the Web browser icon in the anon-web\'s start menu), Qubes will also ensure that torvm is up and running, and this in turn would configure all the Tor proxying for this VM.</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;">Fo additional control one might want to use Vidalia, the graphical front end for Tor (this should be installed within the template VM that has been used for torvm). We could easily start Vidalia by just typing:</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-run -a torvm vidalia</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;"><span style="font-size: small;">We should however make sure to disable "Start the Tor software when vidalia starts" option in Settings/General in Vidalia. Otherwise, Vidalia might kill your original Tor (that has transparent proxy open) and start own without transparent proxy enabled.</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-DUPCtbu3svY/ToQpDggfR0I/AAAAAAAAAJc/xRTJYPZusqI/s1600/tor.png" style="margin-left: auto; margin-right: auto;"><img border="0" height="225" src="http://1.bp.blogspot.com/-DUPCtbu3svY/ToQpDggfR0I/AAAAAAAAAJc/xRTJYPZusqI/s400/tor.png" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">The web browser runs in the \'anon-web\' VM that uses \'torvm\' for networking access, and thus all the traffic generated by \'anon-web\' is routed through the Tor network, or discarded if it\'s a different traffic than TCP or DNS.</td></tr></tbody></table><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><br /><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"> </div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: inherit;">Of course one case easily create more VMs that would be using torvm as their Net VM, as so would have anonymized network access. The beauty of this solution is that in case one of my anonymized VM gets compromised, others do not. Plus, the already mentioned benefit, that no matter whether apps in those VMs are buggy, or even intentionally malicious, they would not be able to leak out the user\'s external IP address.</span></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; margin-bottom: 0in;"><b>Creating a WiFi pen-testing VM</b></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">Finally let\'s have some fun and create a WiFi pen-testing VM. The desired config is depicted below:</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-6tMmKe1J2T0/ToQpS-gKzGI/AAAAAAAAAJg/gnrYrarQuMI/s1600/qubes-wififun.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="239" src="http://3.bp.blogspot.com/-6tMmKe1J2T0/ToQpS-gKzGI/AAAAAAAAAJg/gnrYrarQuMI/s320/qubes-wififun.png" width="320" /></a></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"> </div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">Because we would like to use all sorts of <strike>l33t h4x0r t00lz</strike><span style="text-decoration: none;">pen-testing security software in this VM, it would make sense to create it as a </span><span style="text-decoration: none;"><i>Standalone VM</i></span><span style="text-decoration: none;">, which means that it would get its own copy of the whole file-system (as opposed to just the home directory, </span><span style="font-family: Liberation Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;"><span style="text-decoration: none;">/rw</span></span></span></span></span><span style="text-decoration: none;">and </span><span style="font-family: Liberation Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;"><span style="text-decoration: none;">/usr/local</span></span></span></span></span><span style="text-decoration: none;">, as it is the case with regular Qubes VMs). This would ease the installation of all the extra software we would need there, and also ensure that even if the install/build scripts were malicious, the damages would be contained only to this very VM and nothing else. Also, for some reason the standard Linux WiFi stack and drivers still don\'t support injection on (all?) most of the WiFi cards out of the box, so we would need to patch the actual kernel drivers -- yet another reason to use a Standalone VM in this case.</span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;">So, let\'s create the VM first, and assign a WiFi card to it:</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-create wififun --standalone --label yellow</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-prefs -s wififun memory 800 <span style="font-family: DejaVu Serif,serif;"># ensure at least this mem at startup</span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-prefs -s wififun kernel none <span style="font-family: DejaVu Serif,serif;"># use own copy of kernel and modules</span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-pci -a wififun </span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="margin-bottom: 0in;"><span style="text-decoration: none;">You can easily find the BDF address of any device using the </span><span style="font-family: Liberation Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;"><span style="text-decoration: none;">lspci</span></span></span></span></span><span style="text-decoration: none;">command in Dom0 -- this would be something like e.g. \u201c02:00.0\u201d. You should make sure that this WiFi card is not used by any other VM, specifically by your default Net VM (called \'netvm\' in a standard Qubes installation). Ideally you could just use a dedicated Express Card-based WiFi card, leaving the built in WiFi assigned to your default Net VM.</span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="margin-bottom: 0in; text-decoration: none;">Because it\'s a Standalone VM, Qubes will make a copy of the whole root filesystem, and thus it would eat about 5GB of your disk (normal VMs would take only as much space as their private fs takes up).</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;">Let\'s now start the VM...</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-run -a wififun gnome-terminal</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;">... and then install the prerequisite software there, starting with downloading the reasonably new compat-wireless sources, together with the required injection patches, and then building and installing the new kernel modules. All actions below are now executed within the VM. This stuff here is really nothing Qubes- or Xen-specific -- one would do more or less the same on any Linux in order to get injection working (so, treat this as a free bonus WiFi hacking tutorial on Linux).</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]$ wget http://linuxwireless.org/download/compat-wireless-2.6/compat-wireless-2011-07-14.tar.bz2</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]$ wget http://patches.aircrack-ng.org/channel-negative-one-maxim.patch</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;"><span>[wififun]$ wget http://patches.aircrack-ng.org/mac80211-2.6.29-fix-tx-ctl-no-ack-retry-count.patch</span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;"><span>[wififun]$ wget http://patches.aircrack-ng.org/mac80211.compat08082009.wl_frag+ack_v1.patch</span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]$ sudo yum install kernel-devel patch gcc</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]$ tar xjf compat-wireless-2011-07-14.tar.bz2</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]$ cd compat-wireless-2011-07-14</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]$ patch -p1 &lt; ../channel-negative-one-maxim.patch</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;"><span>[wififun]$ patch -p1 &lt; ../mac80211-2.6.29-fix-tx-ctl-no-ack-retry-count.patch</span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;"><span>[wififun]$ patch -p1 &lt; ../mac80211.compat08082009.wl_frag+ack_v1.patch</span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]$ make</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]$ sudo make unload</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]$ sudo make install</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="margin-bottom: 0in;">Now, lets reboot the VM to ensure that all the patched drivers will get properly loaded on each VM boot:</div><div style="margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-run --shutdown --wait wififun</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[dom0]$ qvm-run -a wififun gnome-terminal</span></span></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">Let\'s first see if the WiFi driver got properly loaded and if the interface has been created (look for <span style="font-family: Liberation Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">wlanX</span></span></span></span>interface):</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]$ ifconfig -a</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">If yes, then proceed with the steps below (if not, then have a look into dmesg and see what was the problem):</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]$ sudo bash</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]# yum install aircrack-ng dnsmasq</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]# airmon-ng start wlan0 </span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]# iptables -F INPUT</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]# iptables -F FORWARD</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]# echo \u201c1\u201d &gt; /proc/sys/net/ipv4/ip_forward</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="margin-bottom: 0in;">Note that you don\'t need to add any explicit masquerading rules, as they are applied by default on Qubes VMs (you can take a look at the <i>nat</i> table in the VM if you want to see by yourself).</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="margin-bottom: 0in;">Edit the <span style="font-family: Liberation Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">/etc/dnsmasq.conf</span></span></span></span>, so that it contains at least the following:</div><div style="margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">interface=at0</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">dhcp-range=192.168.0.50,192.168.0.150,12h</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">and then start the dnsmasq daemon -- we will use it for providing DHCP to our fake AP (the at0 interface will be created by airbase-ng and emulates the \u201cuplink\u201d of a traditional AP):</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]# /etc/init.d/dnsmasq start</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="margin-bottom: 0in;">And finally the fake AP:</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in; text-decoration: none;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]# airbase-ng -e free_wifi mon0</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">and on another console (before any client connects, but after <span style="font-family: Liberation Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">airbase-ng</span></span></span></span>got started), configure the <span style="font-family: Liberation Mono,monospace;"><span style="font-size: x-small;"><span style="font-style: normal;"><span style="font-weight: normal;">at0</span></span></span></span>interface (make sure it matches what you wrote into dnsmasq.conf):</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;"><span style="text-decoration: none;"><span style="font-style: normal;"><span style="font-weight: normal;">[wififun]# </span></span></span>ifconfig at0 192.168.0.1 up</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">(you can also add an udev rule to that automatically).</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">and just to verify it really is working:</div><div style="margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;"><span style="text-decoration: none;"><span style="font-style: normal;"><span style="font-weight: normal;">[wififun]# </span></span></span>tcpdump -i at0</span></span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">... and now, just wait for a client to connect to your AP. What you do next is only limited by your imagination... But hey, this article is about Qubes networking and not about 0wning client systems ;)</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Here\'s an innocent example using Moxie\'s sslstrip (amazing this attack still works so well at the end of 2011...):</div><div style="margin-bottom: 0in;"><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-3StOOvmJ1YI/ToQpdFycIAI/AAAAAAAAAJk/KnOvneQZDjU/s1600/wififun.png" style="margin-left: auto; margin-right: auto;"><img border="0" height="225" src="http://1.bp.blogspot.com/-3StOOvmJ1YI/ToQpdFycIAI/AAAAAAAAAJk/KnOvneQZDjU/s400/wififun.png" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">My \'wififun\' VM in action using a simple sslstrip attack, that surprisingly still works pretty nice...</td></tr></tbody></table><div style="margin-bottom: 0in;"> </div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">Please note that as your wififun VM is a regular Qubes VM, it is automatically connected to the default Net VM, which in turn provides networking to it. That\'s why it is so easy to create a fully functioning fake AP.</div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">When using custom driver domains, there are currently some catches you should be aware:</div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; margin-bottom: 0in;"><b>Catch #1: </b><span style="font-weight: normal;"><span>When you start a driver domain </span></span><i><span style="font-weight: normal;"><span>late</span></span></i><span style="font-weight: normal;"><span>after system boot, so after some days of uptime and extensive use of VMs, Xen might not be able to allocate enough continues (in terms of MFNs) memory for a driver domain. And PV driver domains, unlike normal domains or HVM driver domains, do require MFN-continuous  memory for their DMA buffers (HVM domains do not need that, because IOMMU can create an illusion of this; even though IOMMU is also used for PV driver domains, for protection, it doesn\'t actively translate bus addresses into GMFNs).</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span>This is usually not a big problem in practice, because in most cases all the driver domains are started early at system boot, when there is still plenty of non-fragmented memory available. However it might become a problem when one wishes to start e.g. the WiFi pen-testing at some later time. The work around is to close as many VMs as possible before starting such driver domain, and then also reducing, for a moment, the amount of memory assigned to Dom0:</span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;"><span>[dom0]$ xm mem-set 0 1600m</span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span>and then starting the driver domain should be fine. Now we can start all other domains, and that should no longer be problematic for the already running driver domain.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; margin-bottom: 0in;"><b>Catch #2: </b><span style="font-weight: normal;">Some network cards, notably Express Cards, might not work well with the 3.0.4 pvops kernel that we use in all VMs by default. In that case you might want to try to use the 2.6.38.3 xenlinux kernel in your WiFi fun VM -- to do that, follow these steps:</span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;"><span>[dom0]$ sudo qvm-dom0-update kernel-qubes-vm-2.6.38.3-10.xenlinux.qubes</span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;"><span style="font-weight: normal;"><span>[dom0]$ </span></span>cp /var/lib/qubes/vm-kernels/2.6.38.3/* /var/lib/qubes/appvms/wififun/kernels/</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;"><span style="font-weight: normal;"><span>[dom0]$ </span></span>qvm-prefs wififun -s kernelopts "swiotlb=force"</span></span></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">And then, in the VM:</div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><span style="font-family: DejaVu Sans Mono,monospace;"><span style="font-size: x-small;">[wififun]$ sudo yum install kernel-devel-2.6.38.3-10.xenlinux.qubes</span></span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">And rebuild the compat-wireless, unload, install modules, and then load drivers again.</div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; margin-bottom: 0in;"><b>Summary</b></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">As you can see, Qubes Beta 2 now offers a very advanced networking infrastructure that allows more advanced users to create very sophisticated configurations, allowing for pretty good isolation between various domains and networks. Qubes leaves it up to the user (or admin) to figure out what would be the best configuration -- most users would be happy with the default simple setup with just one Net VM and one Firewall VM, while others would go for much more advanced setups.</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-llpRcqX8oBw/ToQpuLMy_HI/AAAAAAAAAJo/3pZ1S-qHupA/s1600/qubes-adv-config.png" style="margin-left: auto; margin-right: auto;"><img border="0" height="291" src="http://2.bp.blogspot.com/-llpRcqX8oBw/ToQpuLMy_HI/AAAAAAAAAJo/3pZ1S-qHupA/s400/qubes-adv-config.png" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">A bit more advanced networking setup. The usbvm has a 3G modem assigned, and it is possible to dynamically switch between the Net VMs without restarting any other VMs.</td></tr></tbody></table><br /></div>', 'guidislink': True, 'published': u'2011-09-28T16:36:00.002+02:00', u'thr_total': u'10', 'classifier': 'infrastructure'}
{'updated_parsed': time.struct_time(tm_year=2012, tm_mon=3, tm_mday=28, tm_hour=9, tm_min=9, tm_sec=4, tm_wday=2, tm_yday=88, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/8898720712342300501/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=8898720712342300501', 'type': u'text/html', 'rel': u'replies', 'title': u'10 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8898720712342300501', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8898720712342300501', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/09/qubes-beta-2-released.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes Beta 2 Released!'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-8898720712342300501', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=9, tm_mday=19, tm_hour=10, tm_min=52, tm_sec=0, tm_wday=0, tm_yday=262, tm_isdst=0), 'title': u'Qubes Beta 2 Released!', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u"I'm proud to announce that we have just released Qubes Beta 2! You can view installation instructions and download the ISO here.We faced quite a few serious problems with this release that were caused by an upgrade to Xen 4.1 (from Xen 3.4) that we used in Beta 1. But finally we managed to solve all those problems and all in all I'm very happy with this release. It includes many performance optimizations compared to Beta 1 (CPU- and memory-wise) and also many bugfixes.We also introduced a couple of new features:Generic mechanism for inter-domain services with a centralized policy enforcement (more)Network-less update mechanism for Dom0 (more) VM management improvements: easy device assignment for driver domains, dynamic netvm switching, flexible VM kernel configuration, etc (see the new qvm-prefs utility)Easy management of appmenus (shortcuts in the Start Menu)Update to Xen 4.1 that offers, among other things, better VT-d support and more lightweight management stack (we have ported Qubes to use the new xl now, instead of the slow and heavy xend), and also to 2.6.38-xenlinux kernel for Dom0, and to 3.0.4 pvops kernel for VMs (better hardware compatibility, better power management)I will write some more posts shortly that would present in detail some of the new features and what cool things one could do with them.We have also created a dedicated wiki page that enumerates all the security-critical code for Qubes OS. We hope this page would be useful for security researchers that might attempt to find weaknesses in Qubes OS either in our code or in the 3rd party code that we rely on (Xen hypervisor, select Xen backends). Whether your motives are noble (gaining immortal fame, helping create a secure client OS), or not (proving ITL wrong), we would appreciate your efforts! And you might even get a job at ITL.Speaking of which, I'm happy to announce that Marek Marczykowski, who has effectively become the key Qubes developer over the past few months, has now officially joined ITL :)", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'Qubes Beta 2 Released!', 'language': None}, 'updated': u'2012-03-28T11:09:04.941+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/09/qubes-beta-2-released.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'I\'m proud to announce that we have just released Qubes Beta 2! You can view installation instructions and download the ISO <a href="http://wiki.qubes-os.org/trac/wiki/InstallationGuide">here</a>.<br /><br />We faced quite a few serious problems with this release that were caused by an upgrade to Xen 4.1 (from Xen 3.4) that we used in Beta 1. But finally we managed to solve all those problems and all in all I\'m very happy with this release. It includes many performance optimizations compared to Beta 1 (CPU- and memory-wise) and also many bugfixes.<br /><br />We also introduced a couple of new features:<br /><ul><li>Generic mechanism for inter-domain services with a centralized policy enforcement (<a href="http://wiki.qubes-os.org/trac/wiki/Qrexec">more</a>)</li></ul><ul><li>Network-less update mechanism for Dom0 (<a href="http://wiki.qubes-os.org/trac/wiki/Dom0SecureUpdates">more</a>) </li></ul><ul><li>VM management improvements: easy device assignment for driver domains, dynamic netvm switching, flexible VM kernel configuration, etc (see the new qvm-prefs utility)</li></ul><ul><li>Easy management of appmenus (shortcuts in the Start Menu)</li></ul><ul><li>Update to Xen 4.1 that offers, among other things, better VT-d support and more lightweight management stack (we have ported Qubes to use the new xl now, instead of the slow and heavy xend), and also to 2.6.38-xenlinux kernel for Dom0, and to 3.0.4 pvops kernel for VMs (better hardware compatibility, better power management)</li></ul>I will write some more posts shortly that would present in detail some of the new features and what cool things one could do with them.<br /><br />We have also created a <a href="http://wiki.qubes-os.org/trac/wiki/SecurityCriticalCode">dedicated wiki page</a> that enumerates all the security-critical code for Qubes OS. We hope this page would be useful for security researchers that might attempt to find weaknesses in Qubes OS either in our code or in the 3rd party code that we rely on (Xen hypervisor, select Xen backends). Whether your motives are noble (gaining immortal fame, helping create a secure client OS), or not (proving ITL wrong), we would appreciate your efforts! And you might even get a job at ITL.<br /><br />Speaking of which, I\'m happy to announce that Marek Marczykowski, who has effectively become the key Qubes developer over the past few months, has now officially joined ITL :)', 'guidislink': True, 'published': u'2011-09-19T12:52:00.000+02:00', u'thr_total': u'10', 'classifier': 'proud to announce'}
{'updated_parsed': time.struct_time(tm_year=2012, tm_mon=3, tm_mday=28, tm_hour=9, tm_min=9, tm_sec=32, tm_wday=2, tm_yday=88, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/5170759851138703204/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=5170759851138703204', 'type': u'text/html', 'rel': u'replies', 'title': u'24 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/5170759851138703204', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/5170759851138703204', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/09/anti-evil-maid.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Anti Evil Maid'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-5170759851138703204', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=9, tm_mday=7, tm_hour=21, tm_min=56, tm_sec=0, tm_wday=2, tm_yday=250, tm_isdst=0), 'title': u'Anti Evil Maid', 'pred': u'paper', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u"Anti Evil Maid is an implementation of a TPM-based static trusted boot with a primary goal to prevent Evil Maid attacks.The adjective trusted, in trusted boot, means that the goal of the mechanism is to somehow attest to a user that only desired (trusted) components have been loaded and executed during the system boot. It's a common mistake to confuse it with what is sometimes called secure boot, whose purpure is to prevent any unauthorized component from executing. Secure boot is problematic to implement in practice, because there must be a way to tell which components are authorized for execution. This might be done using digital signatures and some kind of CA infrastructure, but this gets us into problems such as who should run the CA, what should be the policy for issuing certificates, etc.The adjective static means that the whole chain of trust is anchored in a special code that executes  before all other code on the platform, and which is kept in a non re-flashable memory, whose sole purpure is to make the initial measurement of the next component that is going to be executed, which is the BIOS code. This special code, also known as Core Root of Trust for Measurement (CRTM), might be part of the BIOS (but kept on a special read-only memory, or implemented by some other entity that executes before the BIOS reset vector, such as e.g. Intel ME or the processor microcode even. Once measured, the BIOS code is executed, and it is now its turn to measures the platform configuration, Option ROM code, and MBR. Then the loader (stored in the MBR), such as Trusted GRUB, takes over and measures its own next stages (other than the MBR sector), and the hypervisor, kernel, and initramfs images that are to be loaded, together with their configuration (e.g. kernel arguments).As explained above, trusted boot can only retrospectively tell the user whether correct (trusted) software has booted or not, but cannot prevent any software from executing. But how can it communicate anything reliably to the user, if it might have just been compromised? This is possible thanks to the TPM unseal operation that releases secrets to software only if correct software has booted (as indicated by correct hashes in select PCR registers).  So the idea is that if a user can see correct secret message (or perhaps a photo) being displayed on the screen, then it means that correct software must have booted, or otherwise the TPM would not release (unseal) the secret. Of course we assume the adversary had no other way to sniff this secret and couldn't simply hardcode it into the Evil Maid \u2013 more on this later.Another way to look at it is to realize that Anti Evil Maid is all about authenticating machine to the user, as opposed to the usual case of authenticating the user to the machine/OS (login and password, decryption key, token, etc). We proceed with booting the machine and entering sensitive information, only after we get confidence it is still our trusted machine and not some compromised one.Installing Anti Evil MaidAnti Evil Maid should work for any Linux system that uses dracut/initramfs, which includes Qubes, Fedora and probably many other distros. You can find the Anti Evil Maid source code in a git repository here. You can also download a tarball with sources and prebuilt rpm packages from here (they all should be signed with the Qubes signing key). Qubes Beta 2, that is coming soon, will have those RPMs already per-installed.To install Anti Evil Maid, follow the instructions in the README file.Some Practical considerationsIf you decided to use no password for your TPM SRK key (so, you passed '-z' to tpm_takeownership, see the README), then you should definitely install Anti Evil Maid on a removable USB stick. Otherwise, if you installed it on your disk boot partition, the attacker would be able to just boot your computer and note down the secret passphrase that will be displayed on the screen. Then the attacker can compromise your BIOS/MBR/kernel images however she likes, and just hardcode the secret passphrase to make it look like if your system was fine.If you decided to use custom TPM SRK password (so, you did not pass -z to tpm_takeownership), then you can install Anti Evil Maid onto your regular boot partition. The attacker would not be able to see your secret passphrase without knowing the SRK password. Now, the attacker can try another Evil Maid attack to steal this password, but this attack is easy to spot and prevent (see the discussion in the next section).However, there is still a good argument to install Anti Evil Maid on a separate USB stick rather than on your built-in disk boot partition. This is because you can use Anti Evil Maid as a provider of a keyfile to your LUKS disk encryption (as an additional file unsealable by the TPM). This way you could also stop adversary that  is able to sniff your keystrokes (e.g. using hidden camera, or electromagnetic leak), and capture your disk decryption passphrase (see the discussion in the next section).In any case it probably would be a good idea to make a backup stick that you might want to use in case you lose or somehow damage your primary stick. In that case you should have a way to figure out if your system has been compromised in the meantime or not. Use another stick, with another passphrase, and keep it in a vault for this occasion.Finally, be aware that, depending on which PCRs you decided to seal your secrets to, you might be unable to see the secret even after you changed some minor thing in your BIOS config, such as e.g. the order of boot devices. Every time you change something in your system that affects the boot process, you would need to reseal your secrets to new PCR values as described in the installation instructions.Attacks prevented by Anti Evil MaidThe classic Evil Maid attack is fully prevented.If the attacker is able to steal your Anti Evil Maid stick, and the attacker gets access to your computer, then the attacker would be able to learn your secret passphrase by just booting from the stolen stick. This is not fatal, because user should get alarmed seeing that the stick has been stolen, and use the backup stick to verify the system (with a different secret messages, of course), and later create a new stick for every day use with a new secret message.A variation of the above attack is when the attacker silently copies the content of the stick, so that the user cannot realize that someone got access to the stick. Attacker then uses the copied stick to boot the user's computer and this way can learn the secret passphrase. Now, the attacker can infect the computer with Evil Maid, and can also bypass Anti Evil Maid verification by just hardcoding the secret message into Evil Maid. So, even though TPM would know that incorrect software has booted, and even though it would not unseal the secret, the user would have no way of knowing this (as the secret would still be displayed on screen).In order to protect against this attack, one might want to use a non-default SRK password \u2013 see the installation instructions. Now an extra SRK password would be needed to unseal any secret from the TPM (in addition to PCRs being correct). So the attacker, who doesn't know the SRK password, is now not able to see the secret message and cannot prepare the Evil Maid Attack (doesn't know what secret passphrase to hardcode there).The attacker might want to perform an additional Evil Maid attack targeted at capturing this SRK password, e.g. by infecting the user's stick. This, however, could be immediately detected by the user, because the user would see that after entering the correct SRK password, there was no correct secret passphrase displayed. The user should then assume the stick got compromised together with the SRK password, and should start the machine from the backup stick, verify that the backup secret is correct, and then create new AEM stick for daily usage.If an attacker is able to capture the user's keystrokes (hidden camera, electromagnetic leaks), the attacker doesn't need Evil Maid attack anymore, and so doesn't need to bother with compromising the system boot anymore. This is because the attacker can just sniff the disk decryption password, and then steal the laptop and will get full access to all user data.In order to prevent such a keystroke sniffing attack, one can use an additional sealed secret on the Anti Evil Maid stick that would be used as a keyfile for LUKS (in addition to passphrase). In this case the knowledge of the sniffed LUKS passphrase would not be enough for the attacker to decrypt the disk. This has not been implemented, although would be a simple modification to dracut-antievilmaid module. If you decided to use this approach, don't forget to also create a backup passphrase that doesn't need a keyfile, so that you don't lock yourself from access to your data in case you lose your stick, or upgrade your BIOS, or something! You have been warned, anyway.Attacks that are still possibleAn adversary that is able to both: sniff your keystrokes (hidden camera, electromagnetic leak) and is also able to copy/steal/seize your Anti Evil Maid stick, can not be stopped. If a non-democratic government is your adversary, perhaps because you're a freedom fighter in one of those dark countries, then you likely cannot ignore this type of attacks. The only thing you can do, I think, is to use some kind of easy-to-destroy USB stick for keeping Anti Evil Maid. A digestible USB stick, anyone?Another type of attack that is not addressed by Anti Evil Maid is an attack that works by removing the gears from your laptop (the motherboard and disk at the very least), putting there a fake board with a transmitter that connects back to the attacker's system via some radio link and proxies all the keyboard/screen events and USB ports back to the original gears that execute now under supervision of the attacker. Another way of thinking about this attack is as if we took the motherboard and disk away, but kept all the cables connecting them with the laptop's keyboard, screen, and other ports, such as USB (yes, very long cables). The attacker then waits until the user boots the machine, passes the machine-to-user authentications (however sophisticated it was), and finally enters the disk decryption key. In practice I wouldn't worry that much about such an attack, but just mentioning it here for completeness.Finally, if our adversary is able to extract secret keys from the TPM somehow, e.g. using electron microscope, or via some secret backdoor in the TPM, or alternatively is able to install some hardware device on the motherboard that would be performing TPM reset without resetting the platform, then such an attacker would be able to install Evil Maid program and avoid its detection by SRTM. Still, this doesn't automatically give access to the user data, as the attacker would need to obtain the decryption key first (e.g. using Evil Maid attack).Implementation Specific AttacksIn the discussion above we assumed that the trusted boot has been correctly implemented. This might not be true, especially in case of the BIOS. In that case we would be talking about attacks against a particular implementation of your BIOS (or TrustedGRUB), and not against Anti Evil Maid approach.One typical problem might be related to how CRTM is implemented \u2013 if it is kept in a regular BIOS reflashable memory, than the attacker who can find a way to reflash the BIOS (which might be trivial in case your BIOS doesn't check digital signatures on updates) would be able to install Evil Maid in the BIOS but pretend that all hashes are correct, because the attacker controls the root of trust.Another possible implementation problem might be similar to the attack we used some years ago to reflash a secure Intel BIOS (that verified digital signatures on updates) by presenting a malformed input to the BIOS that caused a buffer overflow and allowed to execute arbitrary code within the BIOS. For such an attack to work, however, the BIOS should not measure the input that is used as an attack vector. I think this was the situation with the logo picture that was used in our attack. Otherwise, even if there was a buffer overflow, the chain of trust would be broken and thus the attack detected. In other words, the possibility of such an attack seems to be rather slim in practice.What about Intel TXT?Intel TXT takes an alternative approach to trusted boot. It relies on a Dynamic instead of Static Root of Trust for Measurement (DRTM vs. SRTM), which is implemented by the SENTER instruction and special dynamic PCR registers that can be set to zero only by SENTER. Intel TXT doesn't rely anymore on the BIOS or CRTM. This offers a huge advantage that one doesn't need to trust the BIOS, nor the boot loader, and yet can still perform a trusted boot. Amazing, huh?Unfortunately, this amazing property doesn't hold in practice. As we have demonstrated almost 3 years ago (!), it is not really true that Intel TXT can remove the BIOS away from the chain of trust. This is because Intel TXT is prone to attacks through a compromised SMM, and anybody who managed to compromise the BIOS would be trivially able to also compromise the SMM (because it is the BIOS that is supposed to provide the SMI handler).Thus, if one compares SRTM with Intel TXT, then the conclusion is that Intel TXT cannot be more secure than SRTM. This is because if an attacker can compromise the BIOS, then the attacker can also bypass Intel TXT (via a SMM attack). On the other hand, a BIOS compromise alone doesn't automatically allow to bypass SRTM, as it has been discussed in a paragraph above.It really is a pity, because otherwise Intel TXT would be just a great technology. Shame on you Intel, really!Alternative approaches to mitigate Evil Maid AttacksVarious people suggested other methods to prevent Evil Maid attacks, so lets quickly recap and discuss some of them...The most straight forward approach suggested by most people, has been to disable booting from external devices in BIOS, together with locking the BIOS setup with an admin password.There are two problems with such an approach. First, all the BIOSes have a long history of so called default passwords (AKA maintenance passwords). You don't want to rely on the lack of BIOS default passwords when protecting your sensitive data, do you?Second, even if your BIOS doesn't have a backdoor (maintenance password), it is still possible to just take your disk away and connect to another laptop and infect its boot partition.Another suggested approach has been to keep your boot partition on a separate USB stick. This solution obviously doesn't take into account the fact that the attacker might install Evil Maid into your BIOS. Many consumer laptop BIOSes do not require digital signatures on BIOS firmware updates (my Sony Vaio Z, a rather high-end machine, is among them), making it simple to install Evil Maid there (the most trivial attack is to make the BIOS always boot from the HDD instead of whatever other device the user wanted to boot from).Finally, some people pointed out that many modern laptops comes with SATA disks that offer ability to lock the disk so that it could only be used with a specific SATA controller. Using this, combined with setting your BIOS to only boot from your internal disk, plus locking access to BIOS setup, should provide reasonable protection. This solution, of course, doesn't solve the problem of a potential maintenance password in your BIOS. Also being skeptical and paranoid as I am, I would not trust this mechanism to be really robust \u2013 I would expect it would be fairly simple to unlock the disk so that it could be paired with another, unauthorized controller, and that this probably is a matter of NOP-ing a few instructions in the controller firmware... In fact it seems like you can buy software to unlock this mechanism for some $50... And apparently (and not very surprisingly) some drives seems to continue on the 'default passwords' tradition.  FAQ&nbsp;Q: Bitlocker implemented this already several years ago, right?A: No.Q: But, two-factor authentication can also be used to prevent Evil Maid, right?A: No.Q: Does it make any sense to use Anti Evil Maid without a full disk encryption?A: No.Q: Are you going to answer 'no' for  each question I ask?A: No.Q: Why there are no negative indicators (e.g. a big scary warning) when the unseal process fails?A: The lack of negative indicators is intentional. The user should keep in mind that if somebody compromised their computer, then the attacker would be able to display whatever she wants on the screen, and especially to skip displaying of any warning messages. The only thing the attacker would not be able to display would be the secret message. Thus, it would make no sense to use negative indicators, as they would likely not work in case of a real attack. One solution here would be to use the unsealed secret as a keyfile for disk encryption (as discussed above), which would make it impossible to decrypt the user disk (and so generally proceed with the boot) without successfully unsealing the secret from the TPM.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'Anti Evil Maid', 'language': None}, 'updated': u'2012-03-28T11:09:32.908+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'saving-the-world-afterhours', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'disk encryption', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'tpm', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted execution technology', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted computing', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/09/anti-evil-maid.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'<br /><div style="margin-bottom: 0in;">Anti Evil Maid is an implementation of a TPM-based static trusted boot with a primary goal to prevent <a href="http://theinvisiblethings.blogspot.com/2009/10/evil-maid-goes-after-truecrypt.html">Evil Maid attacks</a>.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">The adjective </span><i>trusted</i><span style="font-style: normal;">,</span> in <i>trusted boot</i>, means that the goal of the mechanism is to somehow attest to a user that only desired (trusted) components have been loaded and executed during the system boot. It\'s a common mistake to confuse it with what is sometimes called s<i>ecure boot</i>, whose purpure is to <i>prevent</i><span style="font-style: normal;"> any unauthorized component from executing. Secure boot is problematic to implement in practice, because there must be a way to tell which components are authorized for execution. This might be done using digital signatures and some kind of CA infrastructure, but this gets us into problems such as who should run the CA, what should be the policy for issuing certificates, etc.</span></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;"><span>The adjective s</span></span><i><span>tatic</span></i><span> means that the whole </span><i><span>chain of trust </span></i><span style="font-style: normal;"><span>is anchored </span></span><span>in a special code that executes  before all other code on the platform, and which is kept in a non re-flashable memory, whose sole purpure is to make the initial measurement of the next component that is going to be executed, which is the BIOS code. This special code, also known as Core Root of Trust for Measurement (CRTM), might be part of the BIOS (but kept on a special read-only memory, or implemented by some other entity that executes before the BIOS reset vector, such as e.g. Intel ME or the processor microcode even. Once measured, the BIOS code is executed, and it is now its turn to measures the platform configuration, Option ROM code, and MBR. Then the loader (stored in the MBR), such as Trusted GRUB, takes over and measures its own next stages (other than the MBR sector), and the hypervisor, kernel, and initramfs images that are to be loaded, together with their configuration (e.g. kernel arguments).</span></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">As explained above, trusted boot can only retrospectively tell the user whether correct (trusted) software has booted or not, but cannot </span><i>prevent </i><span style="font-style: normal;">any software from executing. But how can it communicate anything reliably to the user, if it might have just been compromised? This is possible thanks to the TPM </span><i>unseal</i><span style="font-style: normal;"> operation that releases secrets to software only if correct software has booted (as indicated by correct hashes in select PCR registers). </span> </div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">So the idea is that if a user can see correct secret message (or perhaps a photo) being displayed on the screen, then it means that correct software must have booted, or otherwise the TPM would not release (<i><span style="text-decoration: none;">unseal</span></i>) the secret. Of course we assume the adversary had no other way to sniff this secret and couldn\'t simply hardcode it into the Evil Maid \u2013 more on this later.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Another way to look at it is to realize that Anti Evil Maid is all about <b>authenticating machine to the user</b>, as opposed to the usual case of authenticating the user to the machine/OS (login and password, decryption key, token, etc). We proceed with booting the machine and entering sensitive information, only after we get confidence it is still <span style="font-style: normal;">our</span><i> trusted </i><span style="font-style: normal;">machine and not some compromised one.</span></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>Installing Anti Evil Maid</b></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Anti Evil Maid should work for any Linux system that uses dracut/initramfs, which includes Qubes, Fedora and probably many other distros. You can find the Anti Evil Maid source code in a git repository <a href="http://git.qubes-os.org/?p=joanna/antievilmaid.git;a=summary">here</a>. <span>You can also download a tarball with sources and prebuilt rpm packages from <a href="http://www.qubes-os.org/files/misc/">here</a> (they all should be signed with the <a href="http://wiki.qubes-os.org/trac/wiki/VerifyingSignatures">Qubes signing key</a>). Qubes Beta 2, that is coming soon, will have those RPMs already per-installed.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span>To install Anti Evil Maid, follow the instructions in the <a href="http://git.qubes-os.org/?p=joanna/antievilmaid.git;a=blob_plain;f=README;hb=HEAD">README</a> file.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>Some Practical considerations</b></div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">If you decided to use <b>no password for your TPM SRK key</b> (so, you passed \'-z\' to tpm_takeownership, see the README), then you should definitely install Anti Evil Maid on a removable USB stick. Otherwise, if you installed it on your disk boot partition, the attacker would be able to just boot your computer and note down the secret passphrase that will be displayed on the screen. Then the attacker can compromise your BIOS/MBR/kernel images however she likes, and just hardcode the secret passphrase to make it look like if your system was fine.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">If you decided to use custom TPM SRK password (so, you did <i>not </i>pass -z to tpm_takeownership), then you can install Anti Evil Maid onto your regular boot partition. The attacker would not be able to see your secret passphrase without knowing the SRK password. Now, the attacker can try another Evil Maid attack to steal this password, but this attack is easy to spot and prevent (see the discussion in the next section).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">However, there is still a good argument to install Anti Evil Maid on a separate USB stick rather than on your built-in disk boot partition. This is because you can use Anti Evil Maid as a provider of a keyfile to your LUKS disk encryption (as an additional file unsealable by the TPM). This way you could also stop adversary that  is able to sniff your keystrokes (e.g. using hidden camera, or electromagnetic leak), and capture your disk decryption passphrase (see the discussion in the next section).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">In any case it probably would be a good idea to make a backup stick that you might want to use in case you lose or somehow damage your primary stick. In that case you should have a way to figure out if your system has been compromised in the meantime or not. Use another stick, with another passphrase, and keep it in a vault for this occasion.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Finally, be aware that, depending on which PCRs you decided to seal your secrets to, you might be unable to see the secret even after you changed some minor thing in your BIOS config, such as e.g. the order of boot devices. Every time you change something in your system that affects the boot process, you would need to reseal your secrets to new PCR values as described in the installation instructions.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>Attacks prevented by Anti Evil Maid</b></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">The classic Evil Maid attack is fully prevented.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">If the attacker is able to <span style="font-style: normal;">steal</span> your Anti Evil Maid stick, and the attacker gets access to your computer, then the attacker would be able to learn your secret passphrase by just booting from the stolen stick. This is not fatal, because user should get alarmed seeing that the stick has been stolen, and use the backup stick to verify the system (with a different secret messages, of course), and later create a new stick for every day use with a new secret message.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">A variation of the above attack is when the attacker silently <i>copies</i> <span style="font-style: normal;">the content of the stick, so that the user cannot realize that someone got access to the stick. Attacker then uses the copied stick to boot the user\'s computer and this way can learn the secret passphrase. Now, the attacker can infect the computer with Evil Maid, and can also bypass Anti Evil Maid verification by just hardcoding the secret message into Evil Maid. So, even though TPM would know that incorrect software has booted, and even though it would not unseal the secret, the user would have no way of knowing this (as the secret would still be displayed on screen).</span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">In order to protect against this attack, one might want to use a non-default SRK password \u2013 see the installation instructions. Now an extra SRK password would be needed to unseal any secret from the TPM (in addition to PCRs being correct). So the attacker, who doesn\'t know the SRK password, is now not able to see the secret message and cannot prepare the Evil Maid Attack (doesn\'t know what secret passphrase to hardcode there).</div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0in;">The attacker might want to perform an additional Evil Maid attack targeted at capturing this SRK password, e.g. by infecting the user\'s stick. This, however, could be immediately detected by the user, because the user would see that after entering the correct SRK password, there was no correct secret passphrase displayed. The user should then assume the stick got compromised together with the SRK password, and should start the machine from the backup stick, verify that the backup secret is correct, and then create new AEM stick for daily usage.</div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">If an attacker is able to capture the user\'s keystrokes (hidden camera, electromagnetic leaks), the attacker doesn\'t need Evil Maid attack anymore, and so doesn\'t need to bother with compromising the system boot anymore. This is because the attacker can just sniff the disk decryption password, and then steal the laptop and will get full access to all user data.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">In order to prevent such a \u201ckeystroke sniffing\u201d attack, one can use an additional sealed secret on the Anti Evil Maid stick that would be used as a keyfile for LUKS (in addition to passphrase). In this case the knowledge of the sniffed LUKS passphrase would not be enough for the attacker to decrypt the disk. This has not been implemented, although would be a simple modification to <a href="http://git.qubes-os.org/?p=joanna/antievilmaid.git;a=tree;f=dracut-antievilmaid/90anti-evil-maid;h=0677ca23ec2193fa284a0a25803934514cb28b27;hb=HEAD">dracut-antievilmaid module</a>. If you decided to use this approach, don\'t forget to also create a backup passphrase that doesn\'t need a keyfile, so that you don\'t lock yourself from access to your data in case you lose your stick, or upgrade your BIOS, or something! You have been warned, anyway.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>Attacks that are still possible</b></div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">An adversary that is able to both: sniff your keystrokes (hidden camera, electromagnetic leak) and is also able to copy/steal/seize your Anti Evil Maid stick, can not be stopped. If a non-democratic government is your adversary, perhaps because you\'re a freedom fighter in one of those dark countries, then you likely cannot ignore this type of attacks. The only thing you can do, I think, is to use some kind of easy-to-destroy USB stick for keeping Anti Evil Maid. A digestible USB stick, anyone?</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Another type of attack that is not addressed by Anti Evil Maid is an attack that works by removing the \u201cgears\u201d from your laptop (the motherboard and disk at the very least), putting there a fake board with a transmitter that connects back to the attacker\'s system via some radio link and proxies all the keyboard/screen events and USB ports back to the original \u201cgears\u201d that execute now under supervision of the attacker. Another way of thinking about this attack is as if we took the motherboard and disk away, but kept all the cables connecting them with the laptop\'s keyboard, screen, and other ports, such as USB (yes, very long cables). The attacker then waits until the user boots the machine, passes the machine-to-user authentications (however sophisticated it was), and finally enters the disk decryption key. In practice I wouldn\'t worry that much about such an attack, but just mentioning it here for completeness.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Finally, if our adversary is able to extract secret keys from the TPM somehow, e.g. using electron microscope, or via some secret backdoor in the TPM, or alternatively is able to install some hardware device on the motherboard that would be performing TPM reset without resetting the platform, then such an attacker would be able to install Evil Maid program and avoid its detection by SRTM. Still, this doesn\'t automatically give access to the user data, as the attacker would need to obtain the decryption key first (e.g. using Evil Maid attack).</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>Implementation Specific Attacks</b></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">In the discussion above we assumed that the trusted boot has been correctly implemented. This might not be true, especially in case of the BIOS. In that case we would be talking about attacks against a particular implementation of your BIOS (or TrustedGRUB), and not against Anti Evil Maid approach.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">One typical problem might be related to how CRTM is implemented \u2013 if it is kept in a regular BIOS reflashable memory, than the attacker who can find a way to reflash the BIOS (which might be trivial in case your BIOS doesn\'t check digital signatures on updates) would be able to install Evil Maid in the BIOS but pretend that all hashes are correct, because the attacker controls the root of trust.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Another possible implementation problem might be similar to the <a href="http://invisiblethingslab.com/resources/bh09usa/Attacking%20Intel%20BIOS.pdf">attack</a> we used some years ago to reflash a secure Intel BIOS (that verified digital signatures on updates) by presenting a malformed input to the BIOS that caused a buffer overflow and allowed to execute arbitrary code within the BIOS. For such an attack to work, however, the BIOS should not measure the input that is used as an attack vector. I think this was the situation with the logo picture that was used in our attack. Otherwise, even if there was a buffer overflow, the chain of trust would be broken and thus the attack detected. In other words, the possibility of such an attack seems to be rather slim in practice.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>What about Intel TXT?</b></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">Intel TXT takes an alternative approach to trusted boot. It relies on a <i>Dynamic</i><span style="font-style: normal;"> instead of </span><i>Static </i><span style="font-style: normal;">Root of Trust for Measurement (DRTM vs. SRTM), which is implemented by the SENTER instruction and special dynamic PCR registers that can be set to zero only by SENTER. Intel TXT doesn\'t rely anymore on the BIOS or CRTM. This offers a huge advantage that one doesn\'t need to trust the BIOS, nor the boot loader, and yet can still perform a trusted boot. Amazing, huh?</span></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="font-style: normal; margin-bottom: 0in;">Unfortunately, this amazing property doesn\'t hold in practice. As <a href="http://invisiblethingslab.com/resources/bh09dc/Attacking%20Intel%20TXT%20-%20paper.pdf">we have demonstrated almost 3 years ago</a> (!), it is not really true that Intel TXT can remove the BIOS away from the chain of trust. This is because Intel TXT is prone to attacks through a compromised SMM, and anybody who managed to compromise the BIOS would be trivially able to also compromise the SMM (because it is the BIOS that is supposed to provide the SMI handler).</div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">Thus, if one compares SRTM with Intel TXT, then the conclusion is that </span><span style="font-style: normal;"><b>Intel TXT cannot be more secure than SRTM</b></span><span style="font-style: normal;">. This is because if an attacker can compromise the BIOS, then the attacker can also bypass Intel TXT (via a SMM attack). On the other hand, a BIOS compromise alone doesn\'t automatically allow to bypass SRTM, as it has been discussed in a paragraph above.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;">It really is a pity, because otherwise Intel TXT would be just a great technology. Shame on you Intel, really!</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>Alternative approaches to mitigate Evil Maid Attacks</b></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Various people suggested other methods to prevent Evil Maid attacks, so lets quickly recap and discuss some of them...</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">The most straight forward approach suggested by most people, has been to disable booting from external devices in BIOS, together with locking the BIOS setup with an admin password.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">There are two problems with such an approach. First, all the BIOSes have a long history of so called default passwords (AKA maintenance passwords). You don\'t want to rely on the lack of BIOS default passwords when protecting your sensitive data, do you?</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Second, even if your BIOS doesn\'t have a backdoor (maintenance password), it is still possible to just take your disk away and connect to another laptop and infect its boot partition.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Another suggested approach has been to keep your boot partition on a separate USB stick. This solution obviously doesn\'t take into account the fact that the attacker might install Evil Maid into your BIOS. Many consumer laptop BIOSes do not require digital signatures on BIOS firmware updates (my Sony Vaio Z, a rather high-end machine, is among them), making it simple to install Evil Maid there (the most trivial attack is to make the BIOS always boot from the HDD instead of whatever other device the user wanted to boot from).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Finally, some people pointed out that many modern laptops comes with SATA disks that offer ability to \u201clock\u201d the disk so that it could only be used with a specific SATA controller. Using this, combined with setting your BIOS to only boot from your internal disk, plus locking access to BIOS setup, should provide reasonable protection. This solution, of course, doesn\'t solve the problem of a potential maintenance password in your BIOS. Also being skeptical and paranoid as I am, I would not trust this mechanism to be really robust \u2013 I would expect it would be fairly simple to unlock the disk so that it could be paired with another, unauthorized controller, and that this probably is a matter of NOP-ing a few instructions in the controller firmware... In fact it seems like you can buy <a href="http://www.hdd-tools.com/products/rrs/">software to unlock this mechanism</a> for some $50... And apparently (and not very surprisingly) <a href="http://www.seagateunlock.com/">some drives seems to continue on the \'default passwords\' tradition</a>.  </div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><b>FAQ</b>&nbsp;</div><br />Q: Bitlocker implemented this already several years ago, right?<br />A: <a href="http://testlab.sit.fraunhofer.de/content/output/project_results/bitlocker_skimming/">No</a>.<br /><br />Q: But, two-factor authentication can also be used to prevent Evil Maid, right?<br />A: <a href="http://dl.acm.org/citation.cfm?id=1854103&amp;dl=ACM&amp;coll=DL&amp;CFID=41081137&amp;CFTOKEN=11047311">No</a>.<br /><br />Q: Does it make any sense to use Anti Evil Maid without a full disk encryption?<br />A: No.<br /><br />Q: Are you going to answer \'no\' for  each question I ask?<br />A: No.<br /><br />Q: Why there are no negative indicators (e.g. a big scary warning) when the unseal process fails?<br />A: The lack of negative indicators is intentional. The user should keep in mind that if somebody compromised their computer, then the attacker would be able to display whatever she wants on the screen, and especially to skip displaying of any warning messages. The only thing the attacker would not be able to display would be the secret message. Thus, it would make no sense to use negative indicators, as they would likely not work in case of a real attack. One solution here would be to use the unsealed secret as a keyfile for disk encryption (as discussed above), which would make it impossible to decrypt the user disk (and so generally proceed with the boot) without successfully unsealing the secret from the TPM.', 'guidislink': True, 'published': u'2011-09-07T23:56:00.004+02:00', u'thr_total': u'24', 'classifier': 'disk encryption'}
{'updated_parsed': time.struct_time(tm_year=2011, tm_mon=9, tm_mday=28, tm_hour=14, tm_min=37, tm_sec=8, tm_wday=2, tm_yday=271, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/6490495664553004297/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=6490495664553004297', 'type': u'text/html', 'rel': u'replies', 'title': u'9 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6490495664553004297', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6490495664553004297', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/08/interview-about-qubes-os.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Interview about Qubes OS'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-6490495664553004297', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=8, tm_mday=30, tm_hour=21, tm_min=6, tm_sec=0, tm_wday=1, tm_yday=242, tm_isdst=0), 'title': u'Interview about Qubes OS', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u"Here is a recent interview with me for Tom's Hardware, where I talk about Qubes, why virtualization alone does not automatically bring much security, and why we need it for secure systems anyway, and all that kind of stuff. Nothing really new, but still might be of interest to some readers.As for Qubes Beta 2 release -- it really is coming, but we've faced recently some very nasty, race-condition-related problems with new Xen (we bravely switched to Xen 4.1 in Beta 2) that seem to occur on machines with very fast SSDs and we're currently trying to see if we can solve them, or should we instead revert back to Xen 3.4 that we used previously in Beta 1. Except for that, Beta 2 is mostly ready, so we should be releasing it within coming weeks.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'Interview about Qubes OS', 'language': None}, 'updated': u'2011-09-28T16:37:08.233+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/08/interview-about-qubes-os.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'<a href="http://www.tomshardware.com/reviews/qubes-os-joanna-rutkowska-windows,3009.html">Here</a> is a recent interview with me for Tom\'s Hardware, where I talk about Qubes, why virtualization alone does <i>not</i> automatically bring much security, and why we need it for secure systems anyway, and all that kind of stuff. Nothing really new, but still might be of interest to some readers.<br /><br />As for Qubes Beta 2 release -- it really is coming, but we\'ve faced recently some very nasty, race-condition-related problems with new Xen (we bravely switched to Xen 4.1 in Beta 2) that seem to occur on machines with very fast SSDs and we\'re currently trying to see if we can solve them, or should we instead revert back to Xen 3.4 that we used previously in Beta 1. Except for that, Beta 2 is mostly ready, so we should be releasing it within coming weeks.', 'guidislink': True, 'published': u'2011-08-30T23:06:00.001+02:00', u'thr_total': u'9', 'classifier': 'interview about'}
{'updated_parsed': time.struct_time(tm_year=2011, tm_mon=7, tm_mday=24, tm_hour=10, tm_min=9, tm_sec=17, tm_wday=6, tm_yday=205, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7155368799305734593/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=7155368799305734593', 'type': u'text/html', 'rel': u'replies', 'title': u'13 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7155368799305734593', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7155368799305734593', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/06/my-sstic-2011-slides.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'My SSTIC 2011 slides'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-7155368799305734593', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=6, tm_mday=10, tm_hour=13, tm_min=2, tm_sec=0, tm_wday=4, tm_yday=161, tm_isdst=0), 'title': u'My SSTIC 2011 slides', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u"A few days ago I had a privilege to give an opening keynote at the SSTIC conference in Rennes, France, which is believed by many to be the most important security conference in France. You can find my slides here.SSTIC seems to be a very interesting conference indeed, with a strong emphasis on system-level security, which is quite unusual these days where most conferences focus on networking, apps, and web-apps. What a pity all those interestingly-looking talks have been encoded in an obscure language used only by some 3% of the population of the planet...Anyway, it was a pleasure to talk to some ANSSI people I met before the conference (one of the organizers of the event) who really seemed to understand well the challenges we face with building secure operating systems, and generally seemed well versed in the topic. Perhaps some other nations should learn from France, instead of proposing ridiculous and superficial means that can't really solve any real problem.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'My SSTIC 2011 slides', 'language': None}, 'updated': u'2011-07-24T12:09:17.985+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'conferences', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/06/my-sstic-2011-slides.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'A few days ago I had a privilege to give an opening keynote at the <a href="http://www.sstic.org/2011/programme/">SSTIC conference</a> in Rennes, France, which is believed by many to be the most important security conference in France. You can find my slides <a href="http://www.invisiblethingslab.com/resources/2011/SSTIC%202011.pdf">here</a>.<br /><br />SSTIC seems to be a very interesting conference indeed, with a strong emphasis on system-level security, which is quite unusual these days where most conferences focus on networking, apps, and web-apps. What a pity all those interestingly-looking talks have been encoded in an <a href="http://en.wikipedia.org/wiki/French_language">obscure language</a> used only by some 3% of the population of the planet...<br /><br />Anyway, it was a pleasure to talk to some <a href="http://www.ssi.gouv.fr/en/">ANSSI</a> people I met before the conference (one of the organizers of the event) who really seemed to understand well the challenges we face with building secure operating systems, and generally seemed well versed in the topic. Perhaps some other nations should learn from France, instead of proposing ridiculous and superficial <a href="http://www.bbc.co.uk/news/world-us-canada-13614125">means</a> that can\'t really solve any real problem.', 'guidislink': True, 'published': u'2011-06-10T15:02:00.002+02:00', u'thr_total': u'13', 'classifier': 'security'}
{'updated_parsed': time.struct_time(tm_year=2011, tm_mon=7, tm_mday=24, tm_hour=10, tm_min=8, tm_sec=54, tm_wday=6, tm_yday=205, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/3206816702689101078/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=3206816702689101078', 'type': u'text/html', 'rel': u'replies', 'title': u'2 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3206816702689101078', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3206816702689101078', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/06/from-slides-to-silicon-in-3-years.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'From Slides to Silicon in 3 years!'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-3206816702689101078', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=6, tm_mday=3, tm_hour=15, tm_min=16, tm_sec=0, tm_wday=4, tm_yday=154, tm_isdst=0), 'title': u'From Slides to Silicon in 3 years!', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u"Remember our Xen 0wning Trilogy at Black Hat in summer 2008, specifically the presentation on Detecting &amp; Preventing the Xen Hypervisor Subversions?  One of the things we were discussing there was a proposal to include an additional restriction to Intel processors that would disallow execution of usermode pages from within supervisor mode (ring0). Such a feature, we argued, apart from obviously making many ring3-to-ring0 exploits much harder, including the very Xen heap overflow exploit we presented in the slides, would also bring us closer to efficient runtime code integrity checkers for kernels and hypervisors, as discussed in the slides.Slide #97, Detecting and Preventing Xen Hypervisor Subversions, Black Hat USA, July, 2008  Fast forward 3 years. On June 1st, 2011, an Intel engineer is submitting a patch for Xen to support a mysterious new processor feature called SMEP (Supervisor Mode Execution Protection). He writes the feature is not yet documented in SDM, but soon will be. In fact, the May 2011 update of Intel SDM already contains the details:Intel SDM, vol. 3a, May 2011, source: intel.com  Some other people spotted this feature earlier, because of another patch submitted by another Intel engineer to Linux kernel a few weeks ago. Here's a good write up by Dan Rosenberg discussing how this patch makes writing Linux kernel exploits harder, and how it's still possible to write them.The SMEP feature still doesn't seem to be present in the processors available on the market, including the latest Sand Bridge processors, but there's no question it's coming, now that the feature made it into SDM.It is quite rewarding to see your idea implemented in a processor... I guess this is how physicists feel when they introduce a new particle as part of a new quantum model, and later discover evidences to support the existence of this very particle in the wild...", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'From Slides to Silicon in 3 years!', 'language': None}, 'updated': u'2011-07-24T12:08:54.874+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'fighting for a better world', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/06/from-slides-to-silicon-in-3-years.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://2.bp.blogspot.com/-UUqClGOWD3w/Tej5DuLF_GI/AAAAAAAAAIE/qBrKYYHJi8M/s72-c/slide97', 'width': u'72', 'height': u'72'}], 'summary': u'<br /><div style="margin-bottom: 0in;">Remember our Xen 0wning Trilogy at Black Hat in summer 2008, specifically the presentation on <a href="http://invisiblethingslab.com/resources/bh08/part2-full.pdf"><i>Detecting &amp; Preventing the Xen Hypervisor Subversions</i></a><span style="font-style: normal;">?</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">  </div><div style="margin-bottom: 0in;"><span style="font-style: normal;">One of the things <a href="http://www.blogger.com/goog_852802259"></a><a href="http://theinvisiblethings.blogspot.com/2008/08/our-xen-0wning-trilogy-highlights.html">we were discussing</a> there was a proposal to include an additional restriction to Intel processors that would disallow execution of </span><i>usermode</i><span style="font-style: normal;"> pages from within </span><i>supervisor</i><span style="font-style: normal;"> mode (ring0). Such a feature, we argued, apart from obviously making many ring3-to-ring0 exploits much harder, including the very Xen heap overflow exploit we presented in the slides, would also bring us closer to efficient runtime code integrity checkers for kernels and hypervisors, as discussed in the slides.</span></div><div style="margin-bottom: 0in;"><br /></div><span style="font-style: normal;"></span><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-UUqClGOWD3w/Tej5DuLF_GI/AAAAAAAAAIE/qBrKYYHJi8M/s1600/slide97" style="margin-left: auto; margin-right: auto;"><img border="0" height="156" src="http://2.bp.blogspot.com/-UUqClGOWD3w/Tej5DuLF_GI/AAAAAAAAAIE/qBrKYYHJi8M/s400/slide97" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Slide #97, Detecting and Preventing Xen Hypervisor Subversions, Black Hat USA, July, 2008</td></tr></tbody></table>  <br /><div style="margin-bottom: 0in;"><span style="font-style: normal;">Fast forward 3 years. On June 1</span><sup><span style="font-style: normal;">st</span></sup><span style="font-style: normal;">, 2011, an Intel engineer is submitting a patch for Xen to support a mysterious new processor feature called SMEP (Supervisor Mode Execution Protection). He writes the feature is not yet documented in SDM, but soon will be. In fact, the May 2011 update of Intel SDM already contains the details:</span><br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-OQB3mPqycFY/Tej7twiRhPI/AAAAAAAAAIc/nIv8J26rsL4/s1600/sdm-smep" style="margin-left: auto; margin-right: auto;"><img border="0" height="48" src="http://3.bp.blogspot.com/-OQB3mPqycFY/Tej7twiRhPI/AAAAAAAAAIc/nIv8J26rsL4/s400/sdm-smep" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Intel SDM, vol. 3a, May 2011, source: intel.com</td></tr></tbody></table></div><div class="separator" style="clear: both; text-align: center;"></div>  <br /><div style="margin-bottom: 0in;"><span style="font-style: normal;">Some other people spotted this feature earlier, because of <a href="http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=de5397ad5b9ad22e2401c4dacdf1bb3b19c05679">another patch</a> submitted by another Intel engineer to Linux kernel a few weeks ago. Here\'s a <a href="http://vulnfactory.org/blog/smep/">good write up by Dan Rosenberg</a> discussing how this patch makes writing Linux kernel exploits harder, and how it\'s still possible to write them.</span></div><div style="font-style: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">The SMEP feature still doesn\'t seem to be present in the processors available on the market, including the latest Sand Bridge processors, but there\'s no question it\'s coming, now that the feature made it into SDM.</div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;">It is quite rewarding to see your idea implemented in a <i>processor</i>... I guess this is how physicists feel when they introduce a new particle as part of a new quantum model, and later discover evidences to support the existence of this very particle in the wild...</div>', 'guidislink': True, 'published': u'2011-06-03T17:16:00.003+02:00', u'thr_total': u'2', 'classifier': 'presentation'}
{'updated_parsed': time.struct_time(tm_year=2011, tm_mon=7, tm_mday=24, tm_hour=10, tm_min=8, tm_sec=42, tm_wday=6, tm_yday=205, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/8736093765434856111/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=8736093765434856111', 'type': u'text/html', 'rel': u'replies', 'title': u'8 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8736093765434856111', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8736093765434856111', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/06/usb-security-challenges.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'USB Security Challenges'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-8736093765434856111', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=5, tm_mday=31, tm_hour=23, tm_min=25, tm_sec=0, tm_wday=1, tm_yday=151, tm_isdst=0), 'title': u'USB Security Challenges', 'pred': u'security', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u"When we think about USB Security there are lots of things that come to mind...  First there are all the physical attacks that could be conducted with the help of USB devices. These are generally not so interesting, because if one includes physical attacks in the threat model, then it really opens up lots of possibilities of various attacks, and generally a physical attacker always wins. Still, there are a few very cheap and easy physical attacks that one would like to avoid, or make harder, such as the Evil Maid Attacks or the Cold Boot Attacks. Strictly speaking these are not problems inherent to USB itself, but rather with lack of Trusted Boot, or OS not cleaning properly secrets from memory upon shutdown. They are just made simple thanks to bootable USB sticks.Much more interesting USB-related physical attacks are those that take advantage of the specifics of the USB standard. One example here would be a malicious USB device that exposes intentionally malformed info about itself in order to exploit a potential flaw in a USB Host Controller driver that processes this info upon each new USB device connect. Or a malicious USB device that would trick the OS (Windows at least) into downloading a known buggy USB driver (or even an intentionally malicious driver, legally submitted to WHQL by the attacker) and then exploit the driver.Another class of physical attacks made possible by the USB specification are malicious USB devices that pretend to be a keyboard or mouse. The input devices, such as keyboard, are actually the most security sensitive devices, because an attacker who controls the keyboard can do everything the user can do, which basically means: can do everything, at least with regards to the user's data.Finally, the USB, as the names stands, is a bus interconnect, which means all the USB devices sharing the same USB controller are capable of sniffing and spoofing signals on the bus. This is one of the key differences between USB and PCI Express standards, where the latter uses a peer-to-peer interconnect architecture.Ok, so these all above were physical attacks. Let's now look at, much more fatal, software attacks.The infamous class of attacks exploiting various autorun or auto-preview behaviors is the most known example, but also the easiest, at least in theory, to protect against.Much more interesting are software attacks that attempt to exploit potential flaws in the USB stacks \u2013 similarly like the physical attacks mentioned above, just that this time not requiring any hardware-level modifications to the USB device. Exposing a malformed partition table is a great example of such an attack. Even if we have all the autorun mechanisms disabled, still, when we're inserting a storage medium the OS always attempts to parse the partition table in order to e.g. create devices symbolizing each partition/volume (e.g. /dev/sdbX devices).Now, this is really a problematic attack, because the malformed partition table can be written onto a fully legitimate USB stick by malware. Imagine e.g. you have two physically separated machines (air-gapped), belonging to two different security domains, and you want to transfer files from one to another. You insert the USB stick into the first machine, copy files, and then insert the stick to the second machine. If the first machine was compromised, it could have altered the partition table on the USB stick, and now when this stick is inserted into the other machine its malformed partition table might exploit a buffer overflow in the code used by the second OS to parse the stick's partition information. Air-gapped systems, huh? We avoid this attack vector in Qubes by using a special inter-domain file copy mechanism that doesn't require any metadata parsing.A variation of the above attack would be to expose a malicious file system metadata, but this time the target OS would have to actually mount the partition for the attack to work (and, of course, there would have to be bugs in the OS file system parsing code, although these&nbsp; seem to be quite common on most OSes).Having quickly summarized the USB security-related threats, let's now think about how we could design an OS to mitigate most of those attacks, and at the very least the software-based attacks. This is, in fact, precisely the challenge we've been facing in Qubes, so the divagations below necessarily focus mostly on the Qubes architecture.   First we should realize that USB devices, unlike PCI Express devices, cannot be independently delegated to different domains (VMs). This is because IOMMU technologies, such as Intel VT-d, operate only on PCIe device granularity. This means we can only delegate a whole USB controller to a domain, including all of the USB devices connected to this controller/hub.Imagine now two internal devices, both connected via internal USB bus: a keyboard, and a 3G wireless modem. Chances are high that you will have those two devices connected to the same USB controller \u2013 usually one controller is used for all the internal devices, like those I just mentioned, plus camera, fingerprint reader, etc, and the other controller is used for all the externally visible USB connectors (at least this is true for modern systems: Intel Series 5 chipsets and newer).We would like to be able to delegate the 3G modem to the NetVM (an untrusted domain on Qubes where all the networking drivers and stacks are kept; it's considered untrusted because its compromise is equivalent to a compromise of a WiFi network or home router, or some other router, and any reasonable person always assumes that the network is compromised, and deals with that using crypto, such as SSL or SSH). But assigning the USB controller, to which the 3G modem is connected to, to the NetVM, would also assign the USB keyboard to the NetVM! And this is precisely what we don't want to do, because control over the keyboard is equivalent to the control over the whole system!Currently, in Qubes Beta 1, we keep all the USB controllers assigned to Dom0. This, however, causes two annoyances:First, the user cannot use any of the USB-connected networking devices, such as 3G modems (because there is no networking in Dom0).Second, if somebody connects a USB disk and later delegates it to some domain (this could easily be done via block-attach mechanism, supported by the same backend that handles storage virtualization for domains), and this domain turns out to be compromised, it might alter e.g. the stick's partition table and later attack Dom0 as explained above.We can eliminate the second problem by modifying the Dom0's kernel to not parse the partition table of any removable devices automatically, and instead expect some kind of explicit consent from user to actually do that (we still must allow to mount USB disks in Dom0 to allow easy backups of all domains at once).To allow the use of USB-connected networking devices in NetVM, we could use a PVUSB backend that can virtualize single USB devices without moving the whole USB controller to the domain. But that would require introducing a whole lot of new code to Dom0 \u2013 code that would be directly reachable from VMs (in other words that would be processing lots of untrusted input coming from untrusted domains).So another option is to delegate all the non-security-critical USB controllers, i.e. those controllers that don't have any security-sensitive USB devices connected, such as keyboard, to a dedicated USB domain, and later share the USB devices via PVUSB backend from this USB domain. This time, the extra PVUSB backend runs in the USB domain, not in Dom0, so we don't worry that much about potential bugs in this backend. Of course, this way you cannot delegate the USB controller to which the keyboard, and potentially also other security-critical devices, such as camera, are connected to, which in practice rules out the integrated3G modem. Fortunately many modern laptops do not use USB-connected keyboard and touchpad (they use PS/2-connected keyboards instead), and the face camera can be easily disabled with a piece of sticker (although that sucks, because it means we cannot really use the camera).With this approach (a dedicated USB domain) you can now delegate your 3G modem to the NetVM, and other USB devices, such as removable disks to other domains, e.g. for file exchange. This seems the most reasonable setup, although it requires that either 1) your laptop doesn't have USB-connected keyboard, or 2) you don't use internal USB devices connected to the same controller that your USB keyboard/touchpad from other domains than Dom0 (in practice: no 3G modem in NetVM).As we can see proper handling of USB devices is quite a challenge for OS architects. It might have been much less of a challenge if the engineers designing the USB, chipsets, and motherboards were a bit more security-conscious. Even such simple practice as never mixing security critical devices (keyboard, touchpad, camera, fingerprint reader), with non-security ones (3G modem), onto the same USB controller, would help tremendously. Or ability to somehow dynamically configure their connectivity, e.g. in BIOS?", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'USB Security Challenges', 'language': None}, 'updated': u'2011-07-24T12:08:42.903+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'os security', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'challanges', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'secure architecture', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'usb', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/06/usb-security-challenges.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'<br /><div style="font-weight: normal; margin-bottom: 0in;">When we think about \u201cUSB Security\u201d there are lots of things that come to mind...  </div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">First there are all the <i>physical</i><span style="font-style: normal;"> attacks that could be conducted with the help of USB devices. These are generally not so interesting, because if one includes physical attacks in the threat model, then it really opens up lots of possibilities of various attacks, and generally a physical attacker always wins. Still, there are a few very cheap and easy physical attacks that one would like to avoid, or make harder, such as the <a href="http://theinvisiblethings.blogspot.com/2009/10/evil-maid-goes-after-truecrypt.html">Evil Maid Attacks</a> or the <a href="http://citp.princeton.edu/memory/">Cold Boot Attacks</a>. Strictly speaking these are not problems inherent to USB itself, but rather with lack of Trusted Boot, or OS not cleaning properly secrets from memory upon shutdown. They are just made simple thanks to bootable USB sticks.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Much more interesting USB-related physical attacks are those that take advantage of the specifics of the USB standard. One <a href="http://www.blackhat.com/presentations/bh-usa-05/BH_US_05-Barrall-Dewey.pdf">example</a> here would be a malicious USB device that exposes intentionally malformed info about itself in order to exploit a potential flaw in a USB Host Controller driver that processes this info upon each new USB device connect. <a href="https://media.blackhat.com/bh-dc-11/Larimer/BlackHat_DC_2011_Larimer_Vulnerabiliters%20w-removeable%20storage-Slides.pdf">Or</a> a malicious USB device that would trick the OS (Windows at least) into downloading a known buggy USB driver (or even an intentionally malicious driver, legally submitted to WHQL by the attacker) and then exploit the driver.</div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Another class of physical attacks made possible by the USB specification are malicious USB devices that <a href="https://media.blackhat.com/bh-dc-11/Stavrou-Wang/BlackHat_DC_2011_Stavrou_Zhaohui_USB_exploits-Slides.pdf">pretend to be a keyboard</a> or mouse. The input devices, such as keyboard, are actually the most security sensitive devices<span style="font-style: normal;">, because an attacker who controls the keyboard can do everything the user can do, which basically means: can do everything, at least with regards to the user\'s data.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">Finally, the USB, as the names stands, is a </span><i>bus</i><span style="font-style: normal;"> interconnect, which means all the USB devices sharing the same USB controller are capable of sniffing and spoofing signals on the bus. This is one of the key differences between USB and PCI Express standards, where the latter uses a peer-to-peer interconnect architecture.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">Ok, so these all above were </span><i>physical</i><span style="font-style: normal;"> attacks. Let\'s now look at, much more fatal, </span><i>software</i><span style="font-style: normal;"> attacks.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">The infamous class of attacks exploiting various autorun or auto-preview behaviors is the most known example, but also the easiest, at least in theory, to protect against.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">Much more interesting are software attacks that attempt to exploit potential flaws in the USB stacks \u2013 similarly like the physical attacks mentioned above, just that this time not requiring any hardware-level modifications to the USB device. Exposing a <a href="http://www.securityfocus.com/archive/1/516615">malformed partition table</a> is a great example of such an attack. Even if we have all the autorun mechanisms disabled, still, when we\'re inserting a storage medium the OS </span><i>always </i><span style="font-style: normal;">attempts to parse the partition table in order to e.g. create devices symbolizing each partition/volume (e.g. /dev/sdbX devices).</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">Now, this is really a problematic attack, because the malformed partition table can be written onto a fully legitimate USB stick by malware. Imagine e.g. you have two physically separated machines (air-gapped), belonging to two different security domains, and you want to transfer files from one to another. You insert the USB stick into the first machine, copy files, and then insert the stick to the second machine. If the first machine was compromised, it could have altered the partition table on the USB stick, and now when this stick is inserted into the other machine its malformed partition table might exploit a buffer overflow in the code used by the second OS to parse the stick\'s partition information. Air-gapped systems, huh? We avoid this attack vector in Qubes by using a special inter-domain <a href="http://wiki.qubes-os.org/trac/wiki/Qfilecopy">file copy mechanism</a> that doesn\'t require any metadata parsing.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">A variation of the above attack would be to expose a malicious file system metadata, but this time the target OS would have to actually mount the partition for the attack to work (and, of course, there would have to be bugs in the OS file system parsing code, although these&nbsp; seem to be quite common on most OSes).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div>Having quickly summarized the USB security-related threats, let\'s now think about how we could design an OS to mitigate most of those attacks, and at the very least the software-based attacks. This is, in fact, precisely the challenge we\'ve been facing in Qubes, so the divagations below necessarily focus mostly on the Qubes architecture.   <br /><div style="margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">First we should realize that USB devices, unlike PCI Express devices, <i>cannot</i> be independently delegated to different domains (VMs). This is because IOMMU technologies, such as Intel VT-d, operate only on PCIe device granularity. This means we can only delegate a whole USB <i>controller</i><span style="font-style: normal;"> to a domain, including </span><i>all</i><span style="font-style: normal;"> of the USB devices connected to this controller/hub.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">Imagine now two internal devices, both connected via internal USB bus: a keyboard, and a 3G wireless modem. Chances are high that you will have those two devices connected to the same USB controller \u2013 usually one controller is used for all the internal devices, like those I just mentioned, plus camera, fingerprint reader, etc, and the other controller is used for all the externally visible USB connectors (at least this is true for modern systems: Intel Series 5 chipsets and newer).</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">We would like to be able to delegate the 3G modem to the NetVM (an </span><i>untrusted</i><span style="font-style: normal;"> domain on Qubes where all the networking drivers and stacks are kept; it\'s considered </span><i>untrusted</i><span style="font-style: normal;"> because its compromise is equivalent to a compromise of a WiFi network or home router, or some other router, and any reasonable person always assumes that the network is compromised, and deals with that using crypto, such as SSL or SSH). But assigning the USB controller, to which the 3G modem is connected to, to the NetVM, would also assign the USB keyboard to the NetVM! And this is precisely what we don\'t want to do, because control over the keyboard is equivalent to the control over the whole system!</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">Currently, in Qubes Beta 1, we keep all the USB controllers assigned to Dom0. This, however, causes two annoyances:</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">First, the user cannot use any of the USB-connected networking devices, such as 3G modems (because there is no networking in Dom0).</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">Second, if somebody connects a USB disk and later delegates it to some domain (this could easily be done via block-attach mechanism, supported by the same backend that handles storage virtualization for domains), and this domain turns out to be compromised, it might alter e.g. the stick\'s partition table and later attack Dom0 as explained above.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">We can eliminate the second problem by modifying the Dom0\'s kernel to not parse the partition table of any removable devices automatically, and instead expect some kind of explicit consent from user to actually do that (we still must allow to mount USB disks in Dom0 to allow easy backups of all domains at once).</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">To allow the use of USB-connected networking devices in NetVM, we could use a PVUSB backend that can virtualize single USB devices without moving the whole USB controller to the domain. But that would require introducing a whole lot of new code to Dom0 \u2013 code that would be </span><i>directly reachable</i><span style="font-style: normal;"> from VMs (in other words that would be processing lots of untrusted input coming from untrusted domains).</span><span style="font-style: normal;"></span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;"><span style="font-weight: normal;">So another option is to delegate all the non-security-critical USB controllers, i.e. those controllers that don\'t have any security-sensitive USB devices connected, such as keyboard, to a dedicated \u201cUSB\u201d domain, and later share the USB devices via PVUSB backend from this USB domain. This time, the extra PVUSB backend runs in the USB domain, not in Dom0, so we don\'t worry </span></span><i><span style="font-weight: normal;">that much</span></i><span style="font-style: normal;"><span style="font-weight: normal;"> about potential bugs in this backend. Of course, this way you cannot delegate the USB controller to which the keyboard, and potentially also other security-critical devices, such as camera, are connected to, which in practice rules out the </span></span><i><span style="font-weight: normal;">integrated</span></i><span style="font-style: normal;"><span style="font-weight: normal;">3G modem. Fortunately many modern laptops do not use USB-connected keyboard and touchpad (they use PS/2-connected keyboards instead), and the face camera can be easily disabled with a piece of sticker (although that sucks, because it means we cannot really use the camera).</span></span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;"><span style="font-weight: normal;">With this approach (a dedicated USB domain) you can now delegate your 3G modem to the NetVM, and other USB devices, such as removable disks to other domains, e.g. for file exchange. This seems the most reasonable setup, although it requires that either 1) your laptop doesn\'t have USB-connected keyboard, or 2) you don\'t use internal USB devices connected to the same controller that your USB keyboard/touchpad from other domains than Dom0 (in practice: no 3G modem in NetVM).</span></span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-style: normal;"><span style="font-weight: normal;">As we can see proper handling of USB devices is quite a challenge for OS architects. It might have been much less of a challenge if the engineers designing the USB, chipsets, and motherboards were a bit more security-conscious. Even such simple practice as never mixing security critical devices (keyboard, touchpad, camera, fingerprint reader), with non-security ones (3G modem), onto the same USB controller, would help tremendously. Or ability to somehow dynamically configure their connectivity, e.g. in BIOS?</span></span></div>', 'guidislink': True, 'published': u'2011-06-01T01:25:00.001+02:00', u'thr_total': u'8', 'classifier': 'software attacks'}
{'updated_parsed': time.struct_time(tm_year=2011, tm_mon=7, tm_mday=24, tm_hour=10, tm_min=8, tm_sec=31, tm_wday=6, tm_yday=205, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/2297606500415169677/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=2297606500415169677', 'type': u'text/html', 'rel': u'replies', 'title': u'22 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/2297606500415169677', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/2297606500415169677', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/05/untrusting-cloud.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'(Un)Trusting the Cloud'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-2297606500415169677', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=5, tm_mday=28, tm_hour=12, tm_min=56, tm_sec=0, tm_wday=5, tm_yday=148, tm_isdst=0), 'title': u'(Un)Trusting the Cloud', 'pred': u'security', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u"Everybody loves The Cloud these days, and it is not hard to understand why. When every person owns computers (devices), the cloud is really hard to beat when it comes to syncing all your digital life back and forth between all those devices, and also sharing with your family members, friends, and colleagues at work. From task lists, through calendars, through health &amp; fitness data, to work-related documents. And I'm not even mentioning all the unencrypted email that is out there.  One doesn't need to be especially smart or security conscious to realize how much this might be a threat to security and privacy. How much easier would it be to attack somebody's laptop if I knew precisely in which hotel and when he or she is planning to stay? How much more expensive would my health and life insurance be, if they could get a look at my health and fitness progress? Etc.But we're willing to sacrifice our privacy and security in exchange for easy of syncing and sharing of our data. We decide to trust The Cloud. What specifically does that mean?First, it means we trust the particular cloud-based service vendor, such as the provides of our training monitoring app and service. We trust that this vendor is: 1) non-malicious and ethical, and so is not going to sell our private data to some other entity, e.g. insurance company, and 2) that the software written by this vendor is somehow secure, so it would not be easy for an attacker to break into their cloud service and download all the user's data (and then sell to health insurance companies).Next, we trust the cloud infrastructure provider, such as Amazon EC2. We trust that the cloud provider is 1) non-malicious and ethical, and that they won't really read the memory of the virtual machine on which the previously mentioned cloud-service is running (and won't make it available to a local government officials, e.g. in China), and 2) that they secured their infrastructure properly (e.g. it wouldn't be easy for one customer to escape from a VM and read all the memory of the VMs belonging to other customers).Finally we trust all the infrastructure that is in the middle between us and the service provider, such as e.g. the networking protocols, are safe to use (e.g. we trust all the engineers working in any of the ISP we use won't sniff/spoof our communication, e.g. by using some fake or quasi-fake SSL certs).So, that's a hell of a lot of trusting! And the stake is high. Do we really need to make such a sacrifice? Do we really need to hand in all our private data to all those organizations? Of course we don't!First, notice that in majority of cases, the cloud is only used basically as a on-line storage. No processing, just dump storage. Indeed, what kind of server-side processing does your task list or calender require? Or your freestyle swimming results? Or your conference slides? None.And we know for very long how to safely keep secrets on untrusted storage, don't we? This is achieved via encryption (and digital signatures for integrity/authenticity). So, the idea is very simple: let's encrypt all the data before we send them to the cloud. The point here is, the encryption must be done by the app that is running on our client device. Not in the cloud, of course.Ok, so let's say I have my calendar records encrypted in the cloud, how do I share it with my other devices and other people, such as my partner and colleagues at work? Very simple \u2013 you encrypt each record with a random symmetric key and then, for every other device or person who you want to grant access to your calendar you make the symmetric key available to this person, by encrypting  it with their public key (if you're paranoid, you can even verify fingerprints using some out-band communication channel, such as phone, to ensure the cloud/service provider didn't do MITM attack on you). What if you want to share only some events (or some details) with some group of people (e.g. only your availability info)? Very simple \u2013 just encrypt those records you want to share in non-full access with some other symmetric key and publish only this key to those people/devices you want to grant such non-full access.Implementing the above would require writing new end-user apps, or plugins for existing apps (such as Outlook), so that they do encryption/decryption/signing/verification before sending the data out to the cloud. But what stops the malicious vendor from offering apps that would be leaking out our secrets, e.g. the keys? Well, nothing actually. But this time, the vendor would need to explicitly build in some kind of backdoor into the app. The same could be done with any other vendor, and any other, non-cloud-based app. After all, how do we know that MS Word, which is not cloud-based yet, is not sending out fragments of our texts to Agent Smith? Note how different this is from a situation when the vendor already owns all our data, unencrypted, brought legitimately to their servers, and all they need to do is to read them from their own disks. No need to plant and distribute any backdoors!In practice few vendors would be risking their reputation and would be willing to build in a backdoor into an app that is then made available to customers. Because every backdoor in such client-exposed code will sooner or later be found (You would really not believe what great lengths all those young people aimed with disassembler and debugger would go to, to win an economy class ticket to the middle of desert in the hottest summer season, just to be able to deliver a presentation on how evil/stupid a company X is ;).One problem is, however, with accessing our encrypted cloud over a Web Browser. In contrast to apps, the web browser content is much less identifiable. An app can have a digital signature \u2013 everybody know its an App v 1.1, published by X. As explained above it would be rather stupid for X to plant a backdoor into such an app. But a Web-delivered Javascript is much more tentative, and it's very possible for X to e.g. deliver various versions of scripts to different customers. Digital signature on client-side scripts, paired with ability to whitelist allowed client-side-scripts, would likely solve this problem.So, why we still haven't got client-side-encrypted cloud-services? The question is rhetorical, of course. Most vendors actually loves the idea of having unlimited access to their customers data. Do you think Google would be happy to give up an opportunity to data mine all your data? This might affect their ad business, health research, or just Secret Plan To 0wn The World. After our dead body, I can almost hear them yelling! After all they have just came up with Chrome OS to bring even more data into their data mining machine...To sum it up, there is no technical reason we must entrust all those people with our most private data. Sooner or later somebody will start selling client-side-encrypted cloud services, and I would be the first person to sign up for it. Hopefully it will happen sooner than later (to late?).This post also hopefully shows, again, one more aspect \u2013 that we can, relatively easy, move most of the IT infrastructure out of the TCB (Trusted Computing Base, used as metaphor here). In other words, we can design our systems and services so that we don't need to trust a whole lot of things, including servers and the networking infrastructure (except for its reliability, but not for its security). But, there always remains one element that we must trust \u2013 these are our client devices. If they are compromised, the attacker can steal everything.Strangely most people still don't get it, or get it backwards. Just the fact that information is not stored on the iPad but kept safe on the corporate network, doesn't change anything! Really. If the attacker owns your iPad, then she also can do anything that the legitimate user could do from this iPad. So if you could get to the company's secret trade data from your iPad's Receiver, so would be able to do the malware/attacker.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'(Un)Trusting the Cloud', 'language': None}, 'updated': u'2011-07-24T12:08:31.948+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'cloud', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'philosophical', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'fighting for a better world', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/05/untrusting-cloud.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'<br /><div style="font-weight: normal; margin-bottom: 0in;">Everybody loves The Cloud these days, and it is not hard to understand why. When every person owns computers (devices), the cloud is really hard to beat when it comes to syncing all your digital life back and forth between all those devices, and also sharing with your family members, friends, and colleagues at work. From task lists, through calendars, through <a href="http://www.google.com/intl/en-US/health/about/index.html">health</a> &amp; <a href="http://home.trainingpeaks.com/">fitness</a> data, to work-related <a href="http://docs.google.com/">documents</a>. And I\'m not even mentioning all the <i>unencrypted</i><span style="font-style: normal;"> email that is out there.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;"><br /></span></div><div style="font-weight: normal; margin-bottom: 0in;">  </div><div style="font-weight: normal; margin-bottom: 0in;">One doesn\'t need to be especially smart or security conscious to realize how much this might be a threat to security and privacy. How much easier would it be to attack somebody\'s laptop if I knew precisely in which hotel and when he or she is planning to stay? How much more expensive would my health and life insurance be, if they could get a look at my health and fitness progress? Etc.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">But we\'re willing to sacrifice our privacy and security in exchange for easy of syncing and sharing of our data. We decide to trust The Cloud. What specifically does that mean?</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">First, it means we trust the particular cloud-based service vendor, such as the provides of our training monitoring app and service. We trust that this vendor is: 1) non-malicious and ethical, and so is not going to sell our private data to some other entity, e.g. insurance company, and 2) that the software written by this vendor is somehow secure, so it would not be easy for an attacker to break into their cloud service and download all the user\'s data (and then sell to health insurance companies).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Next, we trust the cloud infrastructure provider, such as Amazon EC2. We trust that the cloud provider is 1) non-malicious and ethical, and that they won\'t really read the memory of the virtual machine on which the previously mentioned cloud-service is running (and won\'t make it available to a local government officials, e.g. in China), and 2) that they secured their infrastructure properly (e.g. it wouldn\'t be easy for one customer to \u201cescape\u201d from a VM and read all the memory of the VMs belonging to other customers).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Finally we trust all the infrastructure that is in the middle between us and the service provider, such as e.g. the networking protocols, are safe to use (e.g. we trust all the engineers working in any of the ISP we use won\'t sniff/spoof our communication, e.g. by using some fake or quasi-fake SSL certs).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">So, that\'s a hell of a lot of trusting! And the stake is high. Do we really need to make such a sacrifice? Do we really need to hand in all our private data to all those organizations? Of course we don\'t!</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">First, notice that in majority of cases, the cloud is only used basically as a on-line <i>storage</i>. No processing, just dump storage. Indeed, what kind of server-side processing does your task list or calender require? Or your freestyle swimming results? Or your conference slides? None.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">And we know for very long how to safely keep secrets on untrusted storage, don\'t we? This is achieved via encryption (and digital signatures for integrity/authenticity). So, the idea is very simple: let\'s encrypt all the data <i>before </i><span style="font-style: normal;">we send them to the cloud. The point here is, the encryption must be done by the app that is running on our client device. Not in the cloud, of course.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">Ok, so let\'s say I have my calendar records encrypted in the cloud, how do I share it with my other devices and other people, such as my partner and colleagues at work? Very simple \u2013 you encrypt each record with a random symmetric key and then, for every other device or person who you want to grant access to your calendar you make the symmetric key available to this person, by encrypting  it with their public key (if you\'re paranoid, you can even verify fingerprints using some out-band communication channel, such as phone, to ensure the cloud/service provider didn\'t do MITM attack on you). What if you want to share only </span><i>some</i><span style="font-style: normal;"> events (or some details) with some group of people (e.g. only your availability info)? Very simple \u2013 just encrypt those records you want to share in non-full access with some other symmetric key and publish only this key to those people/devices you want to grant such non-full access.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">Implementing the above would require writing new end-user apps, or plugins for existing apps (such as Outlook), so that they do encryption/decryption/signing/verification before sending the data out to the cloud. But what stops the malicious vendor from offering apps that would be leaking out our secrets, e.g. the keys? Well, nothing actually. But this time, the vendor would need to </span><i>explicitly</i><span style="font-style: normal;"> build in some kind of backdoor into the app. The same could be done with any other vendor, and any other, non-cloud-based app. After all, how do we know that MS Word, which is not cloud-based yet, is not sending out fragments of our texts to Agent Smith? Note how different this is from a situation when the vendor already </span><i>owns</i><span style="font-style: normal;"> all our data, unencrypted, brought legitimately to their servers, and all they need to do is to read them from their </span><i>own</i><span style="font-style: normal;"> disks. No need to plant and distribute any backdoors!</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">In practice few vendors would be risking their reputation and would be willing to build in a backdoor into an app that is then made available to customers. Because every backdoor in such client-exposed code will sooner or later be found (You would really not believe what great lengths all those young people aimed with disassembler and debugger would go to, to win an economy class ticket to the middle of desert in the hottest summer season, just to be able to deliver a presentation on how evil/stupid a company X is ;).</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">One problem is, however, with accessing our encrypted cloud over a Web Browser. In contrast to apps, the web browser content is much less </span><i>identifiable</i><span style="font-style: normal;">. An app can have a digital signature \u2013 everybody know its an App v 1.1, published by X. As explained above it would be rather stupid for X to plant a backdoor into such an app. But a Web-delivered Javascript is much more </span><i>tentative</i><span style="font-style: normal;">, and it\'s very possible for X to e.g. deliver various versions of scripts to different customers. Digital signature on client-side scripts, paired with ability to whitelist allowed client-side-scripts, would likely solve this problem.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">So, why we still haven\'t got client-side-encrypted cloud-services? The question is rhetorical, of course. Most vendors actually </span><i>loves</i><span style="font-style: normal;"> the idea of having unlimited access to their customers data. Do you think Google would be happy to give up an opportunity to data mine all your data? This might affect their ad business, <a href="http://www.wired.com/magazine/2010/06/ff_sergeys_search/">health research</a>, or just Secret Plan To 0wn The World. After our dead body, I can almost hear them yelling! After all they have just came up with Chrome OS to bring even more data into their data mining machine...</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">To sum it up, there is no technical reason we must entrust all those people with our most private data. Sooner or later somebody will start selling client-side-encrypted cloud services, and I would be the first person to sign up for it. Hopefully it will happen sooner than later (to late?).</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">This post also hopefully shows, again, one more aspect \u2013 that we can, relatively easy, move most of the IT infrastructure out of the \u201cTCB\u201d (Trusted Computing Base, used as metaphor here). In other words, we can design our systems and services so that we don\'t need to trust a whole lot of things, including servers and the networking infrastructure (except for its reliability, but not for its security). But, there always remains one element that we must trust \u2013 these are our </span><i>client devices</i><span style="font-style: normal;">. If they are compromised, the attacker can steal everything.</span></div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;"><span style="font-style: normal;">Strangely most people still don\'t get it, or get it <a href="http://www.citrix.com/English/ps2/products/subfeature.asp?contentID=2300386">backwards</a>. Just the fact that \u201cinformation is not stored on the iPad but kept safe on the corporate network\u201d, doesn\'t change anything! Really. If the attacker owns your iPad, then she also can do anything that the legitimate user could do from this iPad. So if you could get to the company\'s secret trade data from your iPad\'s Receiver, so would be able to do the malware/attacker.</span></div>', 'guidislink': True, 'published': u'2011-05-28T14:56:00.003+02:00', u'thr_total': u'22', 'classifier': 'encrypted'}
{'updated_parsed': time.struct_time(tm_year=2011, tm_mon=7, tm_mday=24, tm_hour=10, tm_min=8, tm_sec=19, tm_wday=6, tm_yday=205, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7354555212668635236/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=7354555212668635236', 'type': u'text/html', 'rel': u'replies', 'title': u'7 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7354555212668635236', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7354555212668635236', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/05/app-oriented-ui-model-and-its-security.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'The App-oriented UI Model and its Security Implications'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-7354555212668635236', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=5, tm_mday=21, tm_hour=18, tm_min=17, tm_sec=0, tm_wday=5, tm_yday=141, tm_isdst=0), 'title': u'The App-oriented UI Model and its Security Implications', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u"Most of the desktop OSes today, such as Windows or Mac, expose and encourage a File-oriented UI model. You pick a file in the file manager, click it, and then the file manager automagically determines the best app to handle the file, starts the app, and passes the file to it.Back in the MS-DOS days we used a different model: an app-oriented model \u2013 you started an app first, e.g. Word Perfect, or Lotus 1-2-3, and then you opened a file from within the app (Norton Commander and similar programs somehow changed that later).Interestingly this very same app-oriented model is now becoming popular again thanks to systems such as iOS and Android. There is no such thing as a global File Explorer or Finder on an iPad. Only the apps. One must first pick an app, and then it's the application's responsibility to expose an option for opening one of your files, if the app supports it (e.g. the calendar or task list apps would always open your default calendar or task list without asking for anything).I actually like this app-oriented model a lot! It's much less confusing to the user. Just think about all those attacks in the past where an attacker could prepare a file with some innocently-looking extension but which in fact was an MZ executable. Or how many times people are not even aware which app they use! One might argue that user should not be distracted by such unimportant things as what app he or she uses for her work, but I disagree. Apparently Apple, and millions of iPhone and iPad users, disagree too.But the main reason why I like this app-oriented model is because it just fits greatly into the Security by Isolation philosophy.Just think about it: if it's possible to get users to consciously select an app, and we now know it is possible thanks to the millions of app-oriented devices sold, then it should be not much more difficult to get them to also consciously select the domain or area, such as work, or personal, which they wish to use. Just imagine that instead of one Mail app, you would have two apps (and two icons): Mail Work, and Mail Personal.There are some technicalities here \u2013 such as e.g. how to isolate apps between each other? Do we need to build another layer of isolation in a form of VMs to isolate Mail Work from Mail Personal, or should the (new) OSes and the (new) APIs be designed in such a way, that they were thin and secure, and allow for very good isolation between processes without using virtualization?In Qubes we must use this additional layer of abstraction (virtualization), because we want to use Linux apps (and in the future also Windows apps), and they require huge POSIX/X API (and Win32 API) to work correctly. And those APIs are not easily isolate-able. So we use VMs as API providers. Same with isolating networking drivers and stacks \u2013 we need Linux kernel API to get those drivers and stacks running, so that's why we use a Linux-based NetVM for isolating networking. For this reason we expect users to explicitly define domains, such as work, personal, etc. This is because we cannot afford to run every single app in a separate AppVM (more precisely we cannot afford to create a working copy of this huge POSIX/X API for each app).But we could very well imagine a well constructed API for apps that would just be easily isolate-able (I'm not saying iOS or Android has such an API), and so there would be no need to define domains explicitly. Still, we would need a possibility to define more than one instance of each app \u2013 such as the previously mentioned Mail Work and Mail Personal.The app-oriented model seems to be the future. And so seems the Security by Isolation philosophy!", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'The App-oriented UI Model and its Security Implications', 'language': None}, 'updated': u'2011-07-24T12:08:19.636+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'os security', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'philosophical', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/05/app-oriented-ui-model-and-its-security.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'<br /><div style="font-weight: normal; margin-bottom: 0in;">Most of the desktop OSes today, such as Windows or Mac, expose and encourage a <i>File-oriented UI model</i>. You pick a file in the file manager, click it, and then the file manager automagically determines the best app to handle the file, starts the app, and passes the file to it.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Back in the MS-DOS days we used a different model: an app-oriented model \u2013 you started an app first, e.g. Word Perfect, or Lotus 1-2-3, and then you opened a file from within the app (Norton Commander and similar programs somehow changed that later).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">Interestingly this very same app-oriented model is now becoming popular again thanks to systems such as iOS and Android. There is no such thing as a global File Explorer or Finder on an iPad. Only the apps. One must first pick an app, and then it\'s the application\'s responsibility to expose an option for opening one of your \u201cfiles\u201d, if the app supports it (e.g. the calendar or task list apps would always open your default calendar or task list without asking for anything).</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="font-weight: normal; margin-bottom: 0in;">I actually like this app-oriented model a lot! It\'s much less confusing to the user. Just think about all those attacks in the past where an attacker could prepare a file with some innocently-looking extension but which in fact was an MZ executable. Or how many times people are not even aware which app they use! One might argue that user should not be distracted by such \u201cunimportant\u201d things as what app he or she uses for her work, but I disagree. Apparently Apple, and millions of iPhone and iPad users, disagree too.</div><div style="font-weight: normal; margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">But the main reason why I like this app-oriented model is because it just fits greatly into the Security by Isolation philosophy.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">Just think about it: if it\'s possible to get users to consciously select an app, and we now know it is possible thanks to the millions of app-oriented devices sold, then it should be not much more difficult to get them to also consciously select the </span><i><span style="font-weight: normal;">domain </span></i><span style="font-weight: normal;">or </span><i><span style="font-weight: normal;">area</span></i><span style="font-weight: normal;">, such as \u201cwork\u201d, or \u201cpersonal\u201d, which they wish to use. Just imagine that instead of one \u201cMail\u201d app, you would have two apps (and two icons): \u201cMail Work\u201d, and \u201cMail Personal\u201d.</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">There are some technicalities here \u2013 such as e.g. how to isolate apps between each other? Do we need to build another layer of isolation in a form of VMs to isolate \u201cMail Work\u201d from \u201cMail Personal\u201d, or should the (new) OSes and the (new) APIs be designed in such a way, that they were thin and secure, and allow for very good isolation between processes without using virtualization?</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">In Qubes we must use this additional layer of abstraction (virtualization), because we want to use Linux apps (and in the future also Windows apps), and they require huge POSIX/X API (and Win32 API) to work correctly. And those APIs are not easily </span><i><span style="font-weight: normal;">isolate-able</span></i><span style="font-weight: normal;">. So we use VMs as \u201cAPI providers\u201d. Same with isolating networking drivers and stacks \u2013 we need Linux kernel API to get those drivers and stacks running, so that\'s why we use a Linux-based \u201cNetVM\u201d for isolating networking. For this </span>reason we expect users to explicitly define <i><span style="font-weight: normal;">domains</span></i><span style="font-weight: normal;">, such as \u201cwork\u201d, \u201cpersonal\u201d, etc. This is because we cannot afford to run every single app in a separate AppVM (more precisely we cannot afford to create a working copy of this huge POSIX/X API for each app).</span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">But we could very well imagine a well constructed API for apps that would just be easily </span><i><span style="font-weight: normal;">isolate-able</span></i><span style="font-style: normal;"><span style="font-weight: normal;"> (</span></span><span style="font-weight: normal;">I\'m not saying iOS or Android has such an API)</span><span style="font-style: normal;"><span style="font-weight: normal;">, and so there would be no need to define domains explicitly. Still, we would need a possibility to define more than one </span></span><i><span style="font-weight: normal;">instance</span></i><span style="font-style: normal;"><span style="font-weight: normal;"> of each app \u2013 such as the previously mentioned \u201cMail Work\u201d and \u201cMail Personal\u201d.</span></span></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><br /></div><div style="margin-bottom: 0in;"><span style="font-weight: normal;">The app-oriented model seems to be the future. And so seems the Security by Isolation philosophy!</span></div>', 'guidislink': True, 'published': u'2011-05-21T20:17:00.001+02:00', u'thr_total': u'7', 'classifier': 'security by isolation'}
{'updated_parsed': time.struct_time(tm_year=2011, tm_mon=7, tm_mday=24, tm_hour=10, tm_min=8, tm_sec=6, tm_wday=6, tm_yday=205, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/5608264528014721919/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=5608264528014721919', 'type': u'text/html', 'rel': u'replies', 'title': u'9 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/5608264528014721919', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/5608264528014721919', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/05/following-white-rabbit-software-attacks.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Following the White Rabbit: Software Attacks Against Intel VT-d'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-5608264528014721919', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=5, tm_mday=13, tm_hour=17, tm_min=4, tm_sec=0, tm_wday=4, tm_yday=133, tm_isdst=0), 'title': u'Following the White Rabbit: Software Attacks Against Intel VT-d', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u"Today we publish a new paper which is a result of our several month long in-depth evaluation of Intel VT-d technology. To quote the abstract:We discuss three software attacks that might allow for escaping from a VT-d-protected driver domain in a virtualization system. We then focus on one of those attacks, and demonstrate practical and reliable code execution exploit against a Xen system. Finally, we discuss how new hardware from Intel offers a potential for protection against our attacks in the form of Interrupt Remapping (for client systems available only on the very latest Sandy Bridge processors). But we also discuss how this protection could be circumvented on a Xen system under certain circumstances... I think the attack is likely the most complex and surprising out of all the things we have presented so far. Parts of it are even funny (if you share our weird sense of humor), such as the use of ICMP ping to generate MSIs. The paper also covers the vendors' response. You can download the paper here.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'Following the White Rabbit: Software Attacks Against Intel VT-d', 'language': None}, 'updated': u'2011-07-24T12:08:06.132+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'os security', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'attack', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted computing', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'exploit', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/05/following-white-rabbit-software-attacks.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'paper', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'Today we publish a new paper which is a result of our several month long in-depth evaluation of Intel VT-d technology. To quote the abstract:<br /><blockquote>We discuss three software attacks that might allow for escaping from a VT-d-protected driver domain in a virtualization system. We then focus on one of those attacks, and demonstrate practical and reliable code execution exploit against a Xen system. Finally, we discuss how new hardware from Intel offers a potential for protection against our attacks in the form of Interrupt Remapping (for client systems available only on the very latest Sandy Bridge processors). But we also discuss how this protection could be circumvented on a Xen system under certain circumstances... </blockquote><br />I think the attack is likely the most complex and surprising out of all the things we have presented so far. Parts of it are even funny (if you share our weird sense of humor), such as the use of ICMP ping to generate MSIs. The paper also covers the vendors\' response. You can download the paper <a href="http://www.invisiblethingslab.com/resources/2011/Software%20Attacks%20on%20Intel%20VT-d.pdf">here</a>.', 'guidislink': True, 'published': u'2011-05-13T19:04:00.001+02:00', u'thr_total': u'9', 'classifier': 'publish'}
{'updated_parsed': time.struct_time(tm_year=2011, tm_mon=4, tm_mday=25, tm_hour=21, tm_min=4, tm_sec=59, tm_wday=0, tm_yday=115, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/1548152289459004392/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=1548152289459004392', 'type': u'text/html', 'rel': u'replies', 'title': u'27 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1548152289459004392', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1548152289459004392', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/04/linux-security-circus-on-gui-isolation.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'The Linux Security Circus: On GUI isolation'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-1548152289459004392', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=4, tm_mday=23, tm_hour=14, tm_min=52, tm_sec=0, tm_wday=5, tm_yday=113, tm_isdst=0), 'title': u'The Linux Security Circus: On GUI isolation', 'pred': u'security', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u"There certainly is one thing that most Linux users don't realize about their Linux systems... this is the lack of GUI-level isolation, and how it essentially nullifies all the desktop security. I wrote about it a few times, I spoke about it a few times, yet I still come across people who don't realize it all the time.So, let me stress this one more time: if you have two GUI applications, e.g. an OpenOffice Word Processor, and a stupid Tetris game, both of which granted access to your screen (your X server), then there is no isolation between those two apps. Even if they run as different user accounts! Even if they are somehow sandboxed by SELinux or whatever! None, zero, null, nil!The X server architecture, designed long time ago by some happy hippies who just thought all the people apps are good and non-malicious, simply allows any GUI application to control any other one. No bugs, no exploits, no tricks, are required. This is all by design. One application can sniff or inject keystrokes to another one, can take snapshots of the screen occupied by windows belonging to another one, etc.  If you don't believe me, I suggest you do a simple experiment. Open a terminal window, as normal user, and run xinput list, which is a standard diagnostic program for Xorg (on Fedora you will likely need to install it first: yum install xorg-x11-apps):$ xinput  listIt will show you all the pointer and keyboard devices that your Xorg knows about. Note the ID of the device listed as AT keyboard and then run (as normal user!):$ xinput test idIt should now start displaying the scancodes for all the keys you press on the keyboard. If it doesn't, it means you used a wrong device ID.Now, for the best, start another terminal window, and switch to root (e.g. using su, or sudo). Notice how the xinput running as user is able to sniff all your keystrokes, including root password (for su), and then all the keystrokes you enter in your root session. Start some GUI app as root, or as different user, again notice how your xinput can sniff all the keystrokes you enter to this other app!Yes, I can understand what is happening in your mind and heart right now... Don't worry, others have also passed through it. Feel free to hate me, throw out insults at me, etc. I don't mind, really (I just won't moderate them). When you calm down, continue reading.In Qubes the above problem doesn't exist, because each domain (each AppVM) has it own local, isolated, dummy X server. The main X server, that runs in Dom0 and that handles the real display is never exposed to any of the AppVMs directly (AppVMs cannot connect to it via the X protocol). For details see this technical overview.You can repeat the same experiment in Qubes. You just need to use the ID of the qubesdev device, as shown by xinput list (should be 7). Run the xinput in one of your domains, e.g. in the red one. Because we actually use the same device for both mouse and keystrokes, you should now see both the key scancodes, as well as all the mouse events. Notice how your xinput is able to sniff all the events that are destined for other apps belonging to the same domain where you run xinput, and how it is unable to sniff anything targeted to other domains, or Dom0.BTW, Windows is the only one mainstream OS I'm aware of, that actually attempts to implement some form of GUI-level isolation, starting from Windows Vista. See e.g. this ancient article I wrote in the days when I used Vista at my primary laptop. Of course, it's still easy to bypass this isolation, because of the huge interface that is exposed to each GUI client (that also includes GPU API). Nevertheless, they at least attempt to prevent this at the architecture level.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'The Linux Security Circus: On GUI isolation', 'language': None}, 'updated': u'2011-04-25T23:04:59.505+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'os security', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/04/linux-security-circus-on-gui-isolation.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'<div style="font-weight: normal; margin-bottom: 0in;">There certainly is one thing that <i>most</i> Linux users don\'t realize about their Linux systems... this is the lack of GUI-level isolation, and how it essentially nullifies all the desktop security. I wrote about it a few times, I spoke about it a few times, yet I still come across people who don\'t realize it all the time.</div><div style="font-weight: normal; margin-bottom: 0in;"><br />So, let me stress this one more time: if you have two GUI applications, e.g. an OpenOffice Word Processor, and a stupid Tetris game, both of which granted access to your screen (your X server), then there is no isolation between those two apps. Even if they run as different user accounts! Even if they are somehow sandboxed by SELinux or whatever! None, zero, null, nil!</div><div style="font-weight: normal; margin-bottom: 0in;"><br />The X server architecture, designed long time ago by some happy hippies who just thought all the <strike>people </strike>apps are good and non-malicious, simply allows any GUI application to control any other one. No bugs, no exploits, no tricks, are required. This is all by design. One application can sniff or inject keystrokes to another one, can take snapshots of the screen occupied by windows belonging to another one, etc.</div><div style="font-weight: normal; margin-bottom: 0in;">  </div><div style="margin-bottom: 0in;"><br />If you don\'t believe me, I suggest you do a simple experiment. Open a terminal window, as normal user, and run <span>xinput list</span>, which is a standard diagnostic program for Xorg (on Fedora you will likely need to install it first: <span>yum install xorg-x11-apps)</span>:</div><div style="font-weight: normal; margin-bottom: 0in;"></div><br />$ xinput  list<br /><div style="font-weight: normal; margin-bottom: 0in;"><br />It will show you all the pointer and keyboard devices that your Xorg knows about. Note the ID of the device listed as \u201cAT keyboard\u201d and then run (as normal user!):</div><div style="font-weight: normal; margin-bottom: 0in;"><br />$ xinput test <i>id</i></div><div style="font-weight: normal; margin-bottom: 0in;"><br />It should now start displaying the scancodes for all the keys you press on the keyboard. If it doesn\'t, it means you used a wrong device ID.</div><div style="font-weight: normal; margin-bottom: 0in;"><br />Now, for the best, start another terminal window, and switch to root (e.g. using su, or sudo). Notice how the xinput running as user is able to sniff all your keystrokes, including root password (for su), and then all the keystrokes you enter in your root session. Start some GUI app as root, or as different user, again notice how your xinput can sniff all the keystrokes you enter to this other app!</div><div style="font-weight: normal; margin-bottom: 0in;"><br />Yes, I can understand what is happening in your mind and heart right now... Don\'t worry, others have also passed through it. Feel free to hate me, throw out insults at me, etc. I don\'t mind, really (I just won\'t moderate them). When you calm down, continue reading.</div><div style="font-weight: normal; margin-bottom: 0in;"><br />In Qubes the above problem doesn\'t exist, because each domain (each AppVM) has it own local, isolated, dummy X server. The main X server, that runs in Dom0 and that handles the real display is never exposed to any of the AppVMs directly (AppVMs cannot connect to it via the X protocol). For details see this<span style="background-color: white;"> </span><a href="http://wiki.qubes-os.org/trac/wiki/GUIdocs" style="background-color: white;"><span>technical overview</span></a>.</div><div style="font-weight: normal; margin-bottom: 0in;"><br />You can repeat the same experiment in Qubes. You just need to use the ID of the \u201cqubesdev\u201d device, as shown by xinput list (should be 7). Run the xinput in one of your domains, e.g. in the \u201cred\u201d one. Because we actually use the same device for both mouse and keystrokes, you should now see both the key scancodes, as well as all the mouse events. Notice how your xinput is able to sniff all the events that are destined for other apps belonging to the <i>same domain</i> where you run xinput, and how it is unable to sniff anything targeted to <i>other domains</i>, or Dom0.</div><div style="font-weight: normal; margin-bottom: 0in;"><br />BTW, Windows is the only one mainstream OS I\'m aware of, that actually attempts to implement some form of GUI-level isolation, starting from Windows Vista. See e.g. this <a href="http://theinvisiblethings.blogspot.com/2007/02/running-vista-every-day.html">ancient article</a> I wrote in the days when I used Vista at my primary laptop. Of course, it\'s still easy to bypass this isolation, because of the huge interface that is exposed to each GUI client (that also includes GPU API). Nevertheless, they at least attempt to prevent this at the architecture level.</div>', 'guidislink': True, 'published': u'2011-04-23T16:52:00.008+02:00', u'thr_total': u'27', 'classifier': 'sniff all'}
{'updated_parsed': time.struct_time(tm_year=2011, tm_mon=7, tm_mday=24, tm_hour=10, tm_min=7, tm_sec=34, tm_wday=6, tm_yday=205, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/3884781202259282494/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=3884781202259282494', 'type': u'text/html', 'rel': u'replies', 'title': u'22 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3884781202259282494', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3884781202259282494', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/04/why-us-password-revolution-wont-work.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Why the US "password revolution" won\'t work'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-3884781202259282494', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=4, tm_mday=16, tm_hour=12, tm_min=29, tm_sec=0, tm_wday=5, tm_yday=106, tm_isdst=0), 'title': u'Why the US "password revolution" won\'t work', 'pred': u'security', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u'So, I\'ve been reading this article this morning on how the US "private and public" institutions are going to revolutionize the way we authenticate on the web. The "ground breaking" idea, also illustrated on this NIST animation, is to use 3rd party authorities that would first verify your identity somehow ("Can we see your id?", "What is your Mam\'s maiden name?", etc), and then would issue you some kind of a token that you would later use for authentication on the web. A token would be e.g. a smart card, or a USB stick (probably they just mean a smart card with USB connector, whatever), or even a "phone application".The idea is that the user will not have to "remember" all those passwords for all the various websites, which apparently is a problem in practice, because most users never heard about password manager apps, and so they actually try to remember all those passwords, or even try to use the same one all over the place. Using one password for more than one website is obviously wrong and people should be told not to do that. But an easy way to solve this is to just get people to use password managers.But the key problem that they try to solve, which is identity theft, is just not gonna be solved by this "password revolution". This is because if somebody has compromised my laptop, then it really doesn\'t matter if I use passwords, or smart cards, or whatever other multi-factor authentication mechanism -- none of them will help if the attacker controls my operating system.Most people cannot just get it -- this is because they lack understanding of how computers and operating systems work. They don\'t understand that the operating system can impersonate the user at will! This is because the operating system fully controls the keyboard, the mouse, and the screen.So, imagine you use your super-secure smart card token for authentication to your bank. So, before you log into your bank account, and perhaps before you make any transaction on the banking website, you must insert your smart card somewhere (e.g. into smart card reader, or into USB port, etc). Before you insert your token, no one can impersonate you on the bank website. So far, so good! But then, once you inserted your token, it\'s all lost! The compromised OS could have saved your PIN to this card when you used it previously (even if you configured it not to do so!) and now,&nbsp; immediately, it could use the inserted card to authenticate as you to the bank and start issuing transactions on your behalf. And you won\'t even notice this all, because in the meantime it will show you a faked screen of your banking account. After all, it fully controls the screen.The bottom line is that we cannot secure our digital lives, if our client operating systems could not be secured first. And today, the operating systems we use on our laptops, such as Windows, or Mac, or Ubuntu, are just trivial to be compromised by the attackers. After all, if that wasn\'t true we wouldn\'t have all those problems with identity theft. But introduction of tokens won\'t make our operating systems any more secure!What we need instead are technologies that allow to build next-generation trusted operating systems. Technologies such as Intel TXT or VT-d. And we need OS vendors to actually start using them.You can say I\'m biased, because of our work on Qubes OS. But then, consider this -- perhaps we would never invest so much money and resources into this project, if we believed there are other ways to bring security to our digital life.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'Why the US "password revolution" won\'t work', 'language': None}, 'updated': u'2011-07-24T12:07:34.903+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'os security', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted computing', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/04/why-us-password-revolution-wont-work.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'So, I\'ve been reading <a href="http://arstechnica.com/tech-policy/news/2011/04/with-passwords-broken-us-rolls-out-internet-identity-plan.ars">this article</a> this morning on how the US "private and public" institutions are going to revolutionize the way we authenticate on the web. The "ground breaking" idea, also illustrated on this NIST <a href="http://www.nist.gov/nstic/animation.html">animation</a>, is to use 3rd party authorities that would first verify your identity somehow ("Can we see your id?", "What is your Mam\'s maiden name?", etc), and then would issue you some kind of a token that you would later use for authentication on the web. A token would be e.g. a smart card, or a USB stick (probably they just mean a smart card with USB connector, whatever), or even a "phone application".<br /><br />The idea is that the user will not have to "remember" all those passwords for all the various websites, which apparently is a problem in practice, because most users never heard about password manager apps, and so they actually try to <i>remember</i> all those passwords, or even try to use the same one all over the place. Using one password for more than one website is obviously wrong and people should be told not to do that. But an easy way to solve this is to just get people to use password managers.<br /><br />But the key problem that they try to solve, which is <i>identity theft</i>, is just not gonna be solved by this "password revolution". This is because if somebody has compromised my laptop, then it really doesn\'t matter if I use passwords, or smart cards, or whatever other multi-factor authentication mechanism -- none of them will help if the attacker controls my operating system.<br /><br />Most people cannot just get it -- this is because they lack understanding of how computers and operating systems work. They don\'t understand that the <i>operating system can impersonate the user at will</i>! This is because the operating system fully controls the keyboard, the mouse, and the screen.<br /><br />So, imagine you use your super-secure smart card token for authentication to your bank. So, before you log into your bank account, and perhaps before you make any transaction on the banking website, you must insert your smart card somewhere (e.g. into smart card reader, or into USB port, etc). Before you insert your token, no one can impersonate you on the bank website. So far, so good! But then, once you inserted your token, it\'s all lost! The compromised OS could have saved your PIN to this card when you used it previously (even if you configured it not to do so!) and now,&nbsp; immediately, it could use the inserted card to authenticate <i>as you</i> to the bank and start issuing transactions on your behalf. And you won\'t even notice this all, because in the meantime it will show you a faked screen of your banking account. After all, it fully controls the screen.<br /><br />The bottom line is that <b>we cannot secure our digital lives, if our client operating systems could not be secured first</b>. And today, the operating systems we use on our laptops, such as Windows, or Mac, or Ubuntu, are just trivial to be compromised by the attackers. After all, if that wasn\'t true we wouldn\'t have all those problems with identity theft. But introduction of tokens won\'t make our operating systems any more secure!<br /><br />What we need instead are technologies that allow to build next-generation trusted operating systems. Technologies such as Intel TXT or VT-d. And we need OS vendors to actually start using them.<br /><br />You can say I\'m biased, because of our work on <a href="http://www.qubes-os.org/">Qubes OS</a>. But then, consider this -- perhaps we would never invest so much money and resources into this project, if we believed there are other ways to bring security to our digital life.', 'guidislink': True, 'published': u'2011-04-16T14:29:00.001+02:00', u'thr_total': u'22', 'classifier': 'multi-factor authentication'}
{'updated_parsed': time.struct_time(tm_year=2011, tm_mon=4, tm_mday=25, tm_hour=21, tm_min=5, tm_sec=12, tm_wday=0, tm_yday=115, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/1742367838131028779/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=1742367838131028779', 'type': u'text/html', 'rel': u'replies', 'title': u'11 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1742367838131028779', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1742367838131028779', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/04/qubes-beta-1-has-been-released.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes Beta 1 has been released!'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-1742367838131028779', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=4, tm_mday=12, tm_hour=6, tm_min=49, tm_sec=0, tm_wday=1, tm_yday=102, tm_isdst=0), 'title': u'Qubes Beta 1 has been released!', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u'I\'m very proud to announce that we have just released Qubes Beta 1! Some new features that have come into this release include:Installer (finally!),Improved template sharing mechanism: service VMs can now be based on a common template, and you can now easily create many net- and proxy- VMs; template upgrades now don\'t require shutting down all the VMs; Standalone VMs, convenient for development, as well as for installing the least trusted software,Built in, easy to use firewall VM(s),Seamless integration of virtualized tray icons (check the screen shots!)Redesigned file-copy between domains (easier, more secure),Default template based on Fedora 14 (x64)Reasonably complete User Guide.... and many other improvements and bug fixes!To download the installation ISO go to this page.You can also install Qubes on an external USB disk - this might be a convenient option if you want to just try it out, without the need to "sacrifice" your laptop.This release is very stable, but we feel that it still requires some more polish, mostly with regards to user interface. We\'re planning to release at least one more beta, in about 2 months, where we will focus mostly on UI improvements, and also on upgrading Xen and kernel in Dom0 to allow for better hardware support.The final Qubes 1.0 is planned after the summer holidays. Once we reach this milestone, further work will likely fork into two branches:The "commercial branch" which will focus on adding various extensions on top of Qubes 1. One specific commercial extension that we think would be a killer is support for Windows-based domains (AppVMs),The "open source branch" that will continue on implementing even more revolutionary architecture and features, such as untrusted storage domains, safe GPU multiplexing, trusted boot, etc. In the end this should lead to Qubes 2.0 sometime in 2012 or 2013.Cross your fingers!', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'Qubes Beta 1 has been released!', 'language': None}, 'updated': u'2011-04-25T23:05:12.416+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/04/qubes-beta-1-has-been-released.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'I\'m very proud to announce that we have just released Qubes Beta 1! Some new features that have come into this release include:<br /><ul><li>Installer (finally!),</li></ul><ul><li>Improved <a href="http://wiki.qubes-os.org/trac/wiki/TemplateImplementation">template sharing mechanism</a>: service VMs can now be based on a common template, and you can now easily create many net- and proxy- VMs; template upgrades now don\'t require shutting down all the VMs;</li></ul><ul><li> <i>Standalone</i> VMs, convenient for development, as well as for installing the least trusted software,</li></ul><ul><li>Built in, easy to use firewall VM(s),</li></ul><ul><li>Seamless integration of virtualized tray icons (check the <a href="http://www.qubes-os.org/Screenshots.html">screen shots</a>!)</li></ul><ul><li><a href="http://wiki.qubes-os.org/trac/wiki/Qfilecopy">Redesigned</a> file-copy between domains (easier, more secure),</li></ul><ul><li>Default template based on Fedora 14 (x64)</li></ul><ul><li>Reasonably complete <a href="http://wiki.qubes-os.org/trac/wiki/UserDoc">User Guide</a>.</li></ul>... and <i>many</i> other improvements and bug fixes!<br /><br />To download the installation ISO go to <a href="http://wiki.qubes-os.org/trac/wiki/InstallationGuide">this page</a>.<br /><br />You can also install Qubes on an external USB disk - this might be a convenient option if you want to just try it out, without the need to "sacrifice" your laptop.<br /><br />This release is very stable, but we feel that it still requires some more polish, mostly with regards to user interface. We\'re planning to release at least one more beta, in about 2 months, where we will focus mostly on UI improvements, and also on upgrading Xen and kernel in Dom0 to allow for better hardware support.<br /><br />The final Qubes 1.0 is planned after the summer holidays. Once we reach this milestone, further work will likely fork into two branches:<br /><ul><li>The "commercial branch" which will focus on adding various extensions on top of Qubes 1. One specific commercial extension that we think would be a killer is support for Windows-based domains (AppVMs),</li></ul><ul><li>The "open source branch" that will continue on implementing even more revolutionary architecture and features, such as untrusted storage domains, safe GPU multiplexing, trusted boot, etc. In the end this should lead to Qubes 2.0 sometime in 2012 or 2013.</li></ul>Cross your fingers!', 'guidislink': True, 'published': u'2011-04-12T08:49:00.001+02:00', u'thr_total': u'11', 'classifier': 'new features'}
{'updated_parsed': time.struct_time(tm_year=2013, tm_mon=2, tm_mday=21, tm_hour=14, tm_min=44, tm_sec=7, tm_wday=3, tm_yday=52, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/6127135461889249331/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=6127135461889249331', 'type': u'text/html', 'rel': u'replies', 'title': u'15 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6127135461889249331', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6127135461889249331', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/03/partitioning-my-digital-life-into.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Partitioning my digital life into security domains'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-6127135461889249331', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=3, tm_mday=13, tm_hour=11, tm_min=11, tm_sec=0, tm_wday=6, tm_yday=72, tm_isdst=0), 'title': u'Partitioning my digital life into security domains', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u'The diagram below illustrates how I have decomposed my digital life into security domains. This is a quite sophisticated scheme and most users would probably want something simpler, but I think it\'s still interesting to discuss it. The domains are implemented as lightweight AppVMs on Qubes OS. The diagram also shows what type of networking connectivity each domain is allowed.          Let\'s discuss this diagram bit by bit. The three basic domains are work (the green label), personal (the yellow label), and red (for doing all the untrusted, insensitive things) \u2013 these are marked on the diagram with bold frames.A quick digression on domain labels (colors) \u2013 in Qubes OS each domain, apart form having a distinct name, is also assigned a label, which basically is one of the several per-defined colors. These colors, which are used for drawing window decorations by the trusted Window Manager (color frames), are supposed to be user friendly, easy noticeable, indicators of how trusted a given window is. It\'s totally up to the user how he or she interprets these colors. For me, it has been somehow obvious to associate the red color with something that is untrusted and dangerous (the red light -- stop! danger!), green with something that is safe and trusted, while yellow and orange with something in the middle. I have also extended this scheme, to also include blue, and black, which I interpret as indicating progressively more trusted domains than green, with black being something  ultimately trusted. Back to my domains: the work domain is where I have access to my work email, where I keep my work PGP keys, where I prepare reports, slides, papers, etc. I also keep various contracts and NDAs here (yes, these are PDFs, but received from trusted parties via encrypted and signed email \u2013 otherwise I open them in Disposable VMs). The work domain has only network access to my work email server (SMTP/IMAP4 over SSL), and nothing more.For other work-related tasks that require some Web access, such as editing Qubes Wiki, or accepting LinkedIn invites, or downloading cool pictures from fotolia.com for my presentations, or specs and manuals from intel.com, for all this I use work-pub domain, which I have assigned the yellow label, meaning I consider it only somehow trusted, and I would certainly never put my PGP keys there, or any work-related confidential information.The personal domain is where all my non-work related stuff, such as  personal email and calendar, holiday photos, videos, etc, are held. It doesn\'t really have access to the Web, but if I was into social networking I would then probably allow HTTPS to something like Facebook.Being somehow on the paranoid side, I also have a special very-personal domain, which I use for the communication with my partner when I\'m away from home. We use PGP, of course, and I have a separate PGP keys for this purpose. While we don\'t discuss any secret and sensitive stuff there, we still prefer to keep our intimate conversations private.I use shopping for accessing all the internet e-commerce sites. Basically what defines this domain is access to my credit card numbers and my personal address (for shipping). Because I don\'t really have a dedicated corporate credit card, I do all the shopping in this domain, from groceries, through sports equipment, on hotel/plane reservations ending. If I had separate business credit cards, then I would probably split my shopping domain into personal-shopping and work-shopping. I also have banking domain, which I use only for managing my bank account (which again combines both my personal and company accounts).I also have a few specialized work-related domains, that I rarely use. The work-admin domain is used to manage almost all of the ITL servers, such as our webserver, Qubes repo &amp; wiki servers, email server and DNS management, etc. This domain is allowed only SSH traffic to those server, and HTTPS to a few Web-based management servers. The work-blog is used to manage this very blog you\'re reading now. The reason why it is separate from work-admin or work, is because I\'m over paranoid, and because I fear that if somebody compromises the blogger service, and subsequently exploits a bug in my browser that I use for editing my blog, than I don\'t want this person to be able to also get admin access to all the ITL servers.&nbsp;Similarly, if somebody somehow compromised e.g. the Amazon Web Management Console, and then exploited my browser in work-admin, then I would like at least to retain access to my blog. If I used twitter, I would probably also manage it from this work-blog domain, unless it was a personal twitter account, in which case I would run it from personal.The qubes-dev domain is used for all the Qubes development, merging other developers\' branches (after I verify signatures on their tags, of course!), building RPMs/ISOs (yes, Qubes Beta 1 will ship as a DVD ISO!), and finally signing them. Because the signing keys are there, this domain is very sensitive. This domain is allowed only SSH network access to our Qubes git server. Again, even if somebody compromised this Git server, it still would not be a big problem for us, because we sign and verify all the tags in each others repos (unless somebody could also modify the SSH/Git daemons running there so that they subsequently exploit a hypothetical bug in my git client software when I connect to the server).I also decided to keep all the accounting-related stuff in a separate domain \u2013 whenever I get an invoice I copy it to the accounting domain. The rationale for this is that I trust those PDFs much less than I trust the PDFs I keep in my work domain.Once a year I move the old stuff from my work domain, such as old email spools, old contracts and NDAs, to the work-archives domain. This is to minimize the potential impact of the potential  attack on my work domain (my work domain could be attacked e.g. by exploiting a hypothetical bug in Thunderbird\'s protocol handshake using a MITM attack, or a hypothetical bug in GPG).The vault domain is an ultimately trusted one where I generate and keep all my passwords (using keepass) and master GPG keys. Of course, this vault domain has no networking access. Most of those passwords, such as the email server access password is also kept in the specific domains which uses them, such as the work domain, and more specifically in the Thunderbird client (there is absolutely no point in not allowing e.g. Thunderbird to remember the password \u2013 if it got compromised it would just steal it the next time I manually enter it)And finally, there is the previously mentioned red domain (I have tried to call it junk or random in the past, but I think red is still a better name after all). The red domain is totally untrusted \u2013 if it gets compromised, I don\'t care \u2013 I would just recreate it within seconds. I don\'t even back it up! Basically I do there everything that doesn\'t fit into other domains, and which doesn\'t require me to provide any sensitive information. I don\'t differentiate between work-related and personal-related surfing even \u2013 I don\'t care about anonymity for all those tasks I do there. If I was concerned about anonymity, I would create a separate anonymous domain, and proxy all the traffic through a tor proxy from there.Now, this all looks nice and easy ;) but there is one thing that complicates the above picture...  Data flows between the domains  The diagram below shows the same domains, but additionally with arrows symbolizing typical data flows between them.            You can see that most of the usual data flows are from more trusted domains to less trusted domains \u2013 e.g. copy and pasting a URL that I receive via email in my work domain, so that I could open it in my untrusted browser in red, or moving invoices from my work domain (where I receive them via email) to the accounting domain.But there are, unfortunately, also some transfers from less trusted domains to more trusted ones. One example is copy and pasting an interesting URL that I just stumbled upon when surfing in the red domain, and that I would like to share with a college at work, or a friend, and so I need to copy and paste it to my email client in either work (colleague) or personal (friend) domain.Now, copying data from less trusted domains to more trusted ones presents a significant problem. While one could think that pasting an URL into Thunderbird email editor is a pretty harmless operation, it\'s still is an untrusted input \u2013 and we don\'t really know what the red domain really pasted into its local clipboard, and so what we will paste into the work domain\'s Thunderbird email editor (perhaps 64kB of some junk that will overflow some undo buffer in the editor?). And even more scary is the example with copying the cool-looking graphics file from the Web into my work domain so that I could use it in my presentation slides (e.g. an xkcd . Attacks originating through malicious JPEGs or other graphics format, and exploiting bugs in rendering code have been known for more than a decade.But this problem \u2013 how to handle data flows from less trusted systems to more trusted ones \u2013 is not easily solvable in practice, unfortunately...  Some people who design and build high-security systems for use by military and government takes a somehow opposite approach \u2013 they say they are not concerned about less-trusted-to-more-trusted data transfers as long as they could assure there is no way to perform a transfer in the opposite direction.&nbsp;So, if we could build a system that guarantees that a more trusted domain can never transfer data to a less trusted domain (even if both of those domains are compromised!), then they are happy to allow one-way up transfers. In practice this means we need to eliminate all the covert channels between two cooperating domains. The word cooperating is a key word here, and which makes this whole idea not practical at all, IMHO.Elimination of the covert channels between cooperating domains is indeed required in this scheme, because the assumption is that the data transfer from the less trusted domain could have indeed compromised the more trusted domain. But this, at least, should not result in any data leak back to the originating domain, and later to the less-classified network, which this less-trusted domain is presumably connected to. One of the assumptions here is that the user of such a system is connected to more than one, isolated networks. Even in that case, elimination of all the covert channels between domains (or at least minimizing their bandwith to something unusable \u2013 what is unusable, really?) is a big challenge, and can probably only could be done when we\'re ready to significantly sacrifice the system\'s performance (smart scheduling tricks are needed to minimize temporal covert channels).I would like to make it clear that we are not interested in eliminating cooperative covert channels between domains in Qubes any time in the near future, and perhaps in the long term as well. I just don\'t believe into such approach, and I also don\'t like that this approach does nothing to preserve the integrity of the more-trusted domain \u2013 it only focuses on the isolation aspect. So, perhaps the attacker might not be able to leak secrets back to the less trusted domain, but he or she can do everything else in this more trusted domain. What good is isolation, if we don\'t maintain integrity?An alternative solution to handling the less-trusted-to-more-trusted data transfers, is to have trusted converters or verifiers that could handle specific file types, such as JPEGs, and ensure we get a non-malicious file in the destination domain. While this might remind the bad-old A/V technology, it is something different. Here, the trusted converters would likely be some programs written in a safe language, running in another trusted domain, rather than a big ugly A/V with a huge database of signatures of bad patterns of what might appear in a JPEG file. The obvious problem with such an approach is that somebody must write those converters, and write them for all file types that we wish to allow to be transferred to more trusted domains. Perhaps doable in the longer-term, and perhaps we will do it in some future version of Qubes...  Right now we are ignoring this problem, and we say that all less-trusted-to-more-trusted transfers are to be done on the user\'s own risk :) You\'re welcome to submit trusted converters for your favorite file type(s) in the meantime!  Copying files between domains  Speaking of copying files between domains, there is another security catch here. If we imagined two physically separated machines that share no common network resources, the only way to move files between those two air-gaped machines would be via something like a USB stick or a CDROM or DVD disc. But inserting a USB drive or CDROM into a machine triggers a whole lot of actions: from parsing device-provided information, loading required drivers (for USB), parsing the driver\'s partition table, mounting and finally parsing the filesystem. Each of this stage requires the machine\'s OS to perform a lot of untrusted input processing, and the potential attack space here is quite large. So, even if we could limit ourselves to copy only harmless files between machines/domains (perhaps they were somehow verified by a trusted party in-between, as discussed above), still there is a huge opportunity that the originating domain could compromise the target domain.In Qubes Alpha we have been using a similar file copy mechanism, using a virtual stick for file copy between domains. In Qubes Beta 1 we will provide a new scheme based on same shared memory channel that we use for GUI virtualization \u2013 the technical details of this solution will be available soon in our wiki. The most sensitive element in this new scheme is the un-cpio-like utility that runs in the target domain and unpacks the incoming blob into the pre-defined directory tree (e.g. /home/user/incoming/from-{domainname}/). We believe we can write pretty safe un-cpio-like utility, in contrast to secure all the previously mentioned elements (USB device parsing, partition parsing, fs parsing). The Qubes Beta 1 is planned to be released at the end of March, BTW.Partitioning enforcement and easy of useFor any security partitioning scheme to make sense in real life, it is necessary to have some enforcement mechanism that would ensure that the user doesn\'t mistakenly bypass it. Specifically for this purpose we have come up with special, previously-mentioned firewalling support in Qubes Beta 1, that I will cover in a separate article soon.Anther thing is to make the partitioning easy to use. For instance, I would like to be able to setup a hint in the policy, that when I click on an URL in an email I received in my work domain that it should be automatically opened in the red domain\'s default Web browser. Currently we don\'t do that in Qubes, but we\'re thinking about doing it in the near future.SummaryPartitioning one\'s digital life into security domains is certainly not an easy process and requires some thinking. This process is also very user-specific. The partitioning scheme that I\'ve come up for myself is quite sophisticated, and most people would probably want something much simpler. In case of corporate deployments, the scheme would be designed by CIO or IT admins, and enforced on users automatically. Much bigger problem are home and small business users, who would need to come up with the partitioning themselves. Perhaps in future versions of Qubes we will provide some ready to use templates for select "typical" groups of users.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'Partitioning my digital life into security domains', 'language': None}, 'updated': u'2013-02-21T15:44:07.572+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'os security', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/03/partitioning-my-digital-life-into.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://1.bp.blogspot.com/-IJVsMCGYQak/TXypnudUSjI/AAAAAAAAAHQ/o0OUQhixsPs/s72-c/qubes%2Bpartitioning%2B-%2Bno%2Bflows.jpg', 'width': u'72', 'height': u'72'}], 'summary': u'<span style="color: #333333;">The diagram below illustrates how I have decomposed my digital life into security domains. This is a quite sophisticated scheme and most users would probably want something simpler, but I think it\'s still interesting to discuss it. The domains are implemented as lightweight AppVMs on Qubes OS. The diagram also shows what type of networking connectivity each domain is allowed.</span><br /><br /><br /><a href="http://1.bp.blogspot.com/-IJVsMCGYQak/TXypnudUSjI/AAAAAAAAAHQ/o0OUQhixsPs/s1600/qubes%2Bpartitioning%2B-%2Bno%2Bflows.jpg" style="color: #333333;"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5583524137983560242" src="http://1.bp.blogspot.com/-IJVsMCGYQak/TXypnudUSjI/AAAAAAAAAHQ/o0OUQhixsPs/s400/qubes%2Bpartitioning%2B-%2Bno%2Bflows.jpg" style="cursor: pointer; display: block; height: 300px; margin: 0px auto 10px; text-align: center; width: 400px;" /></a>          <br /><span style="color: #333333;">Let\'s discuss this diagram bit by bit. The three basic domains are </span><b style="color: #333333;">work</b><span style="color: #333333; font-weight: normal;"> (the green label)</span><i style="color: #333333;"><span style="font-weight: normal;">, </span></i><span style="color: #333333; font-style: normal;"><b>personal</b><span style="font-weight: normal;"> (the yellow label), and </span><b>red</b><span style="font-weight: normal;"> (for doing all the untrusted, insensitive things) \u2013 these are marked on the diagram with bold frames.</span></span><br /><br /><span style="color: #333333; font-style: normal;"><span style="font-weight: normal;">A quick digression on domain labels (colors) \u2013 in Qubes OS each domain, apart form having a distinct name, is also assigned a </span></span><i style="color: #333333;"><span style="font-weight: normal;">label</span></i><span style="color: #333333; font-style: normal;"><span style="font-weight: normal;">, which basically is one of the several per-defined colors. These colors, which are used for drawing window decorations by the trusted Window Manager (color frames), are supposed to be user friendly, easy noticeable, indicators of how trusted a given window is. It\'s totally up to the user how he or she interprets these colors. For me, it has been somehow obvious to associate the </span></span><i style="color: #333333;"><span style="font-weight: normal;">red</span></i><span style="color: #333333; font-style: normal;"><span style="font-weight: normal;"> color with something that is untrusted and dangerous (the \u201cred light\u201d -- stop! danger!), </span></span><i style="color: #333333;"><span style="font-weight: normal;">green </span></i><span style="color: #333333; font-style: normal;"><span style="font-weight: normal;">with something that is safe and trusted, while </span></span><i style="color: #333333;"><span style="font-weight: normal;">yellow </span></i><span style="color: #333333; font-style: normal;"><span style="font-weight: normal;">and </span></span><i style="color: #333333;"><span style="font-weight: normal;">orange</span></i><span style="color: #333333; font-style: normal;"><span style="font-weight: normal;"> with something in the middle. I have also extended this scheme, to also include </span></span><i style="color: #333333;"><span style="font-weight: normal;">blue</span></i><span style="color: #333333; font-style: normal;"><span style="font-weight: normal;">, and </span></span><i style="color: #333333;"><span style="font-weight: normal;">black</span></i><span style="color: #333333; font-style: normal;"><span style="font-weight: normal;">, which I interpret as indicating progressively more trusted domains than green, with black being something  ultimately trusted.</span></span> <br /><div style="color: #333333;"><br /><span style="font-style: normal;"><span style="font-weight: normal;">Back to my domains: the </span></span><span style="font-style: normal;"><b>work</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain is where I have access to my work email, where I keep my work PGP keys, where I prepare reports, slides, papers, etc. I also keep various contracts and NDAs here (yes, these are PDFs, but received from trusted parties via encrypted and signed email \u2013 otherwise I open them in </span></span><a href="http://theinvisiblethings.blogspot.com/2010/06/disposable-vms.html"><span style="font-style: normal;"><span style="font-weight: normal;"><span>Disposable VMs</span></span></span></a><span style="font-style: normal;"><span style="font-weight: normal;">). The </span></span><span style="font-style: normal;"><b>work</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain has only network access to my work email server (SMTP/IMAP4 over SSL), and nothing more.</span></span></div><div style="color: #333333;"><br /><span style="font-style: normal;"><span style="font-weight: normal;">For other work-related tasks that require some Web access, such as editing Qubes Wiki, or accepting LinkedIn invites, or downloading cool pictures from fotolia.com for my presentations, or specs and manuals from intel.com, for all this I use </span></span><span style="font-style: normal;"><b>work-pub</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain, which I have assigned the yellow label, meaning I consider it only somehow trusted, and I would certainly never put my PGP keys there, or any work-related confidential information.</span></span></div><div style="color: #333333;"><br /><span style="font-style: normal;"><span style="font-weight: normal;">The </span></span><span style="font-style: normal;"><b>personal</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain</span></span><span style="font-style: normal;"><b> </b></span><span style="font-style: normal;"><span style="font-weight: normal;">is where all my non-work related stuff, such as  personal email and calendar, holiday photos, videos, etc, are held. It doesn\'t really have access to the Web, but if I was into social networking I would then probably allow HTTPS to something like Facebook.</span></span></div><div style="color: #333333;"><span style="font-style: normal;"><span style="font-weight: normal;">Being somehow on the paranoid side, I also have a special </span></span><span style="font-style: normal;"><b>very-personal</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain, which I use for the communication with my partner when I\'m away from home. We use PGP, of course, and I have a separate PGP keys for this purpose. While we don\'t discuss any </span></span><span style="font-style: normal;"><span style="font-weight: normal;"><span>secret and sensitive stuff</span></span></span><span style="font-style: normal;"><span style="font-weight: normal;"> there, we still prefer to keep our intimate conversations private.</span></span></div><div style="color: #333333;"><br /><span style="font-style: normal;"><span style="font-weight: normal;">I use </span></span><span style="font-style: normal;"><b>shopping</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> for accessing all the internet e-commerce sites. Basically what defines this domain is access to my credit card numbers and my personal address (for shipping). Because I don\'t really have a dedicated \u201ccorporate\u201d credit card, I do all the shopping in this domain, from groceries, through sports equipment, on hotel/plane reservations ending. If I had separate business credit cards, then I would probably split my </span></span><span style="font-style: normal;"><b>shopping</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain into </span></span><span style="font-style: normal;"><b>personal-shopping</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> and </span></span><span style="font-style: normal;"><b>work-shopping</b></span><span style="font-style: normal;"><span style="font-weight: normal;">. I also have </span></span><span style="font-style: normal;"><b>banking</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain, which I use only for managing my bank account (which again combines both my personal and company accounts).</span></span></div><div style="color: #333333;"><br /><span style="font-style: normal;"><span style="font-weight: normal;">I also have a few specialized work-related domains, that I rarely use. The </span></span><span style="font-style: normal;"><b>work-admin</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain is used to manage almost all of the ITL servers, such as our webserver, Qubes repo &amp; wiki servers, email server and DNS management, etc. This domain is allowed only SSH traffic to those server, and HTTPS to a few Web-based management servers. The </span></span><span style="font-style: normal;"><b>work-blog</b></span><i><span style="font-weight: normal;"> </span></i><span style="font-style: normal;"><span style="font-weight: normal;">is used to manage this very blog you\'re reading now. The reason why it is separate from </span></span><span style="font-style: normal;"><b>work-admin</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> or </span></span><span style="font-style: normal;"><b>work</b></span><span style="font-style: normal;"><span style="font-weight: normal;">, is because I\'m over paranoid, and because I fear that if somebody compromises the blogger service, and subsequently exploits a bug in my browser that I use for editing my blog, than I don\'t want this person to be able to also get admin access to all the ITL servers.&nbsp;</span></span><br /><br /><span style="font-style: normal;"><span style="font-weight: normal;">Similarly, if somebody somehow compromised e.g. the Amazon Web Management Console, and then exploited my browser in </span></span><span style="font-style: normal;"><b>work-admin</b></span><span style="font-style: normal;"><span style="font-weight: normal;">, then I would like at least to retain access to my blog. If I used twitter, I would probably also manage it from this </span></span><span style="font-style: normal;"><b>work-blog</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain, unless it was a personal twitter account, in which case I would run it from </span></span><span style="font-style: normal;"><b>personal</b></span><span style="font-style: normal;"><span style="font-weight: normal;">.</span></span></div><div style="color: #333333;"><br /><span style="font-style: normal;"><span style="font-weight: normal;">The </span></span><span style="font-style: normal;"><b>qubes-dev</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain is used for all the Qubes development, merging other developers\' branches (after I verify signatures on their tags, of course!), building RPMs/ISOs (yes, Qubes Beta 1 will ship as a DVD ISO!), and finally signing them. Because the signing keys are there, this domain is very sensitive. This domain is allowed only SSH network access to our Qubes git server. Again, even if somebody compromised this Git server, it still would not be a big problem for us, because we sign and verify all the tags in each others repos (unless somebody could also modify the SSH/Git daemons running there so that they subsequently exploit a hypothetical bug in my git client software when I connect to the server).</span></span></div><div style="color: #333333;"><br /><span style="font-style: normal;"><span style="font-weight: normal;">I also decided to keep all the accounting-related stuff in a separate domain \u2013 whenever I get an invoice I copy it to the </span></span><span style="font-style: normal;"><b>accounting</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain. The rationale for this is that I trust those PDFs much less than I trust the PDFs I keep in my </span></span><span style="font-style: normal;"><b>work</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain.<br /></span></span></div><div style="color: #333333;"><br /><span style="font-style: normal;"><span style="font-weight: normal;">Once a year I move the old stuff from my </span></span><span style="font-style: normal;"><b>work</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain, such as old email spools, old contracts and NDAs, to the </span></span><span style="font-style: normal;"><b>work-archives</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain. This is to minimize the potential impact of the potential  attack on my </span></span><span style="font-style: normal;"><b>work</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain (my work domain could be attacked e.g. by exploiting a hypothetical bug in Thunderbird\'s protocol handshake using a MITM attack, or a hypothetical bug in GPG).</span></span></div><div style="color: #333333;"><br /><span style="font-style: normal;"><span style="font-weight: normal;">The </span></span><span style="font-style: normal;"><b>vault</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain is an ultimately trusted one where I generate and keep all my passwords (using keepass) and master GPG keys. Of course, this vault domain has no networking access. Most of those passwords, such as the email server access password is also kept in the specific domains which uses them, such as the </span></span><span style="font-style: normal;"><b>work </b></span><span style="font-style: normal;"><span style="font-weight: normal;">domain, and more specifically in the Thunderbird client (there is absolutely no point in not allowing e.g. Thunderbird to remember the password \u2013 if it got compromised it would just steal it the next time I manually enter it)</span></span></div><div style="color: #333333;"><br /><span style="font-style: normal;"><span style="font-weight: normal;">And finally, there is the previously mentioned </span></span><span style="font-style: normal;"><b>red</b></span><i><b> </b></i><span style="font-style: normal;"><span style="font-weight: normal;">domain (I have tried to call it </span></span><i><span style="font-weight: normal;">junk</span></i><span style="font-style: normal;"><span style="font-weight: normal;"> or </span></span><i><span style="font-weight: normal;">random</span></i><span style="font-style: normal;"><span style="font-weight: normal;"> in the past</span></span><i><span style="font-weight: normal;">, </span></i><span style="font-style: normal;"><span style="font-weight: normal;">but I think </span></span><i><span style="font-weight: normal;">red</span></i><span style="font-style: normal;"><span style="font-weight: normal;"> is still a better name after all). The </span></span><span style="font-style: normal;"><b>red </b></span><span style="font-style: normal;"><span style="font-weight: normal;">domain is totally untrusted \u2013 if it gets compromised, I don\'t care \u2013 I would just recreate it within seconds. I don\'t even back it up! Basically I do there everything that doesn\'t fit into other domains, and which doesn\'t require me to provide any sensitive information. I don\'t differentiate between work-related and personal-related surfing even \u2013 I don\'t care about anonymity for all those tasks I do there. If I was concerned about anonymity, I would create a separate </span></span><span style="font-style: normal;"><b>anonymous</b></span><span style="font-style: normal;"><span style="font-weight: normal;"> domain, and proxy all the traffic through a </span></span><span style="font-style: normal;"><b>tor proxy </b></span><span style="font-style: normal;"><span style="font-weight: normal;">from there.</span></span></div><div style="color: #333333; font-style: normal; font-weight: normal;"><br /><span>Now, this all looks nice and easy ;) but there is one thing that complicates the above picture...</span></div><div style="color: #333333; font-style: normal; font-weight: normal;">  </div><div style="font-style: normal;"><br /><span style="font-size: 100%;"><b><span>Data flows between the domains</span></b></span></div><div style="font-style: normal;">  </div><div style="font-style: normal; font-weight: normal;"><br /><span>The diagram below shows the same domains, but additionally with arrows symbolizing typical data flows between them.</span></div><br /><a href="http://4.bp.blogspot.com/-6iEN6AFqWMU/TXyqaqgbtZI/AAAAAAAAAHY/FScd_uk9uso/s1600/qubes%2Bpartitioning%2B-%2Bdata%2Bflows.jpg" style="color: #333333;"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5583525013096215954" src="http://4.bp.blogspot.com/-6iEN6AFqWMU/TXyqaqgbtZI/AAAAAAAAAHY/FScd_uk9uso/s400/qubes%2Bpartitioning%2B-%2Bdata%2Bflows.jpg" style="cursor: pointer; display: block; height: 300px; margin: 0px auto 10px; text-align: center; width: 400px;" /></a>            <br /><div style="color: #333333; font-style: normal; font-weight: normal;"><span>You can see that most of the usual data flows are from <i>more trusted</i> domains to <i>less trusted</i> domains \u2013 e.g. copy and pasting a URL that I receive via email in my <b>work</b> domain, so that I could open it in my untrusted browser in <b>red</b>, or moving invoices from my <b>work</b><i><b> </b></i>domain (where I receive them via email) to the <b>accounting</b> domain.</span></div><div style="color: #333333; font-style: normal; font-weight: normal;"><br /><span>But there are, unfortunately, also some transfers from <i>less trusted</i> domains to <i>more trusted</i> ones. One example is copy and pasting an interesting URL that I just stumbled upon when surfing in the <b>red</b> domain, and that I would like to share with a college at work, or a friend, and so I need to copy and paste it to my email client in either <b>work</b> (colleague) or <b>personal</b> (friend) domain.</span></div><div style="color: #333333; font-style: normal; font-weight: normal;"><br /><span>Now, copying data from <i>less trusted</i> domains to <i>more trusted</i> ones presents a significant problem. While one could think that pasting an URL into Thunderbird email editor is a pretty harmless operation, it\'s still is an untrusted input \u2013 and we don\'t really know what the <b>red</b> domain <i>really </i>pasted into its local clipboard, and so what we will paste into the <b>work </b>domain\'s<b> </b>Thunderbird email editor (perhaps 64kB of some junk that will overflow some undo buffer in the editor?). And even more scary is the example with copying the cool-looking graphics file from the Web into my <b>work</b> domain so that I could use it in my presentation slides (e.g. an xkcd . Attacks originating through malicious JPEGs or other graphics format, and exploiting bugs in rendering code have been <a href="http://www.openwall.com/advisories/OW-002-netscape-jpeg/OW-002-netscape-jpeg.txt">known for more than a decade</a>.</span></div><div style="color: #333333; font-style: normal; font-weight: normal;"><br /><span>But this problem \u2013 how to handle data flows from less trusted systems to more trusted ones \u2013 is not easily solvable in practice, unfortunately... </span> </div><div style="color: #333333; font-style: normal; font-weight: normal;"><span>Some people who design and build high-security systems for use by military and government takes a somehow opposite approach \u2013 they say they are not concerned about less-trusted-to-more-trusted data transfers as long as they could assure there is no way to perform a transfer in the opposite direction.&nbsp;</span><br /><br /><span>So, if we could build a system that guarantees that a more trusted domain can never transfer data to a less trusted domain (even if both of those domains are compromised!), then they are happy to allow one-way \u201cup transfers\u201d. In practice this means we need to eliminate all the covert channels between two <i>cooperating</i> domains. The word <i>cooperating</i> is a key word here, and which makes this whole idea not practical at all, IMHO.</span></div><div style="color: #333333; font-style: normal; font-weight: normal;"><br /><span>Elimination of the covert channels between <i>cooperating</i> domains is indeed required in this scheme, because the assumption is that the data transfer from the less trusted domain could have indeed compromised the more trusted domain. But this, at least, should not result in any data leak back to the originating domain, and later to the less-classified network, which this less-trusted domain is presumably connected to. One of the assumptions here is that the user of such a system is connected to more than one, isolated networks. Even in that case, elimination of all the covert channels between domains (or at least minimizing their bandwith to something unusable \u2013 what is unusable, really?) is a big challenge, and can probably only could be done when we\'re ready to significantly sacrifice the system\'s performance (smart scheduling tricks are needed to minimize temporal covert channels).</span></div><div style="color: #333333; font-style: normal; font-weight: normal;"><br /><span>I would like to make it clear that we are not interested in eliminating cooperative covert channels between domains in Qubes any time in the near future, and perhaps in the long term as well. I just don\'t believe into such approach, and I also don\'t like that this approach does nothing to preserve the <i>integrity</i> of the more-trusted domain \u2013 it only focuses on the isolation aspect. So, perhaps the attacker might not be able to leak secrets back to the less trusted domain, but he or she can do everything else in this more trusted domain. What good is isolation, if we don\'t maintain integrity?</span></div><div style="color: #333333; font-style: normal; font-weight: normal;"><br /><span>An alternative solution to handling the less-trusted-to-more-trusted data transfers, is to have trusted \u201cconverters\u201d or \u201cverifiers\u201d that could handle specific file types, such as JPEGs, and ensure we get a non-malicious file in the destination domain. While this might remind the bad-old A/V technology, it is something different. Here, the trusted converters would likely be some programs written in a safe language, running in another trusted domain, rather than a big ugly A/V with a huge database of signatures of \u201cbad\u201d patterns of what might appear in a JPEG file. The obvious problem with such an approach is that somebody must write those converters, and write them for all file types that we wish to allow to be transferred to more trusted domains. Perhaps doable in the longer-term, and perhaps we will do it in some future version of Qubes... </span> </div><div style="color: #333333; font-style: normal; font-weight: normal;"><br /><span>Right now we are ignoring this problem, and we say that all less-trusted-to-more-trusted transfers are to be done on the user\'s own risk :) You\'re welcome to submit trusted converters for your favorite file type(s) in the meantime!</span></div>  <br /><div style="color: #333333; font-style: normal; text-decoration: none;"><br /><span style="font-size: 100%;"><b><span>Copying files between domains</span></b></span></div>  <br /><div style="color: #333333; font-style: normal; font-weight: normal; text-decoration: none;"><br /><span>Speaking of copying files between domains, there is another security catch here. If we imagined two physically separated machines that share no common network resources, the only way to move files between those two air-gaped machines would be via something like a USB stick or a CDROM or DVD disc. But inserting a USB drive or CDROM into a machine triggers a whole lot of actions: from parsing device-provided information, loading required drivers (for USB), parsing the driver\'s partition table, mounting and finally parsing the filesystem. Each of this stage requires the machine\'s OS to perform a lot of untrusted input processing, and the potential attack space here is quite large. So, even if we could limit ourselves to copy only harmless files between machines/domains (perhaps they were somehow verified by a trusted party in-between, as discussed above), still there is a huge opportunity that the originating domain could compromise the target domain.</span></div><div style="color: #333333; font-style: normal;"><br />In Qubes Alpha we have been using a similar file copy mechanism, using a virtual stick for file copy between domains. In Qubes Beta 1 we will provide a new scheme based on same shared memory channel that we use for GUI virtualization \u2013 the technical details of this solution will be available soon in <a href="http://wiki.qubes-os.org/trac">our wiki</a>. The most sensitive element in this new scheme is the un-cpio-like utility that runs in the target domain and unpacks the incoming blob into the pre-defined directory tree (e.g. <span style="font-family: courier new;">/home/user/incoming/from-{domainname}/</span>). We believe we can write pretty safe un-cpio-like utility, in contrast to secure all the previously mentioned elements (USB device parsing, partition parsing, fs parsing). The Qubes Beta 1 is planned to be released at the end of March, BTW.</div><div style="color: #333333; font-style: normal;"><br /><span style="font-size: 100%; font-weight: bold;">Partitioning enforcement and easy of use</span></div><div style="color: #333333; font-style: normal;"><br /><span style="color: #333333;">For any security partitioning scheme to make sense in real life, it is necessary to have some enforcement mechanism that would ensure that the </span><span style="color: #333333; font-style: italic;">user</span><span style="color: #333333; font-weight: bold;"><span style="font-style: italic;"> </span></span><span style="color: #333333;">doesn\'t mistakenly bypass it. Specifically for this purpose we have come up with special, previously-mentioned firewalling support in Qubes</span><span style="color: #333333; font-weight: bold;"> </span><span style="color: #333333;">Beta 1</span><span style="color: #333333;">,</span><span style="color: #333333; font-weight: bold;"> </span><span style="color: #333333;">that I will cover in a separate article soon.</span></div><br /><span style="color: #333333;">Anther thing is to make the partitioning easy to use. For instance, I would like to be able to setup a </span><span style="color: #333333;">hint</span><span style="color: #333333; font-style: italic;"> </span><span style="color: #333333;">in the policy, that when I click on an URL in an email I received in my </span><span style="color: #333333; font-weight: bold;">work</span><span style="color: #333333;"> domain that it should be automatically opened in the </span><span style="color: #333333; font-weight: bold;">red</span> domain\'s default Web browser.<span style="color: #333333;"> Currently we don\'t do that in Qubes, but we\'re thinking about doing it in the near future.</span><br /><br /><span style="color: #333333; font-weight: bold;"><span style="font-size: 100%;">Summary</span><br /><br /></span><span style="color: #333333;">Partitioning one\'s di</span><span style="color: #333333;">gital life into security domains is certainly not an easy process and requires some thinking. This process is also very user-specific. The partitioning scheme that I\'ve come up for myself is quite sophisticated, and most people would probably want something much simpler. In case of corporate deployments, the scheme would be designed by CIO or IT admins, and enforced on users automatically. Much bigger problem are home and small business users, who would need to come up with the partitioning themselves. Perhaps in future versions of Qubes we will provide some ready to use templates for select "typical" groups of users.</span>', 'guidislink': True, 'published': u'2011-03-13T12:11:00.007+01:00', u'thr_total': u'15', 'classifier': 'compromise'}
{'updated_parsed': time.struct_time(tm_year=2011, tm_mon=3, tm_mday=13, tm_hour=11, tm_min=11, tm_sec=55, tm_wday=6, tm_yday=72, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/3724428542352438428/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=3724428542352438428', 'type': u'text/html', 'rel': u'replies', 'title': u'0 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3724428542352438428', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3724428542352438428', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2011/03/my-documents-got-loststolen-offtopic.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'My documents got lost/stolen [offtopic]'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-3724428542352438428', 'published_parsed': time.struct_time(tm_year=2011, tm_mon=3, tm_mday=8, tm_hour=13, tm_min=40, tm_sec=0, tm_wday=1, tm_yday=67, tm_isdst=0), 'title': u'My documents got lost/stolen [offtopic]', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u"I just realized yesterday that my wallet has disappeared, with all my credit cards, Polish ID card, and driver's license inside. Most likely somebody stole it. No strange transactions have been observed on my credit card accounts yet, but these are generally not much of a concern, thanks to credit card insurance. What is more troubling, is that perhaps some other woman is currently using my stolen ID and the driver's license doing nasty things on my account.Apparently there is little one can do in Poland (EU?) in order to invalidate a stolen ID card. While there is an inter-bank Polish-wide database of stolen ID cards, it is being used only by banks, so it can only prevent other people from applying for small loans (for bigger loans, one would need more documents). But there are so many other things one could do, such as renting a car (and then committing a crime with it), signing up a deal with a mobile carrier (and then committing a cyber crime using this phone, or just making a really huge bill), or perhaps buying an SSL cert...With apparently no better option left, I decided to write this blog post -- hopefully somebody will find it, e.g. before issuing a Class 2 SSL cert to the fake Joanna Rutkowska.Here are the numbers of my lost/stolen documents:AFS739530**********5058Luckily I have had my ID details written down somewhere, and the driver's license number I extracted from my Hertz profile.A scene at a police department in Warsaw:Hi, I would like to report my wallet being lost or stolen...Madam, was your wallet stolen, or have you lost it?Officer, how could I possibly know this...? If I lost it, do you really think I would remember the very moment of losing it?Madam, you must be sure whether it was a crime or not!...A scene on the hotline, calling my mobile provider (note that I decided to use the word stolen this time):Hi, my documents have been stolen -- I would like that you indicate my ID card as invalid in your system (that you hopefully share with other telcom operators)..You should report such an incident to the police, Madam...Right, but I guess that neither you, nor any other mobile provides in Poland will consult a Police database before signing up a contract with a strange person who might be using my stolen documents, correct?Oh, but we will not sign a contract with a strange person who uses your documents! Only with you!And how would you know it was not me, if that person was similarly aged and looking, and was using my stolen ID and driver's license?...", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'My documents got lost/stolen [offtopic]', 'language': None}, 'updated': u'2011-03-13T12:11:55.942+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'personal', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2011/03/my-documents-got-loststolen-offtopic.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'I just realized yesterday that my wallet has disappeared, with all my credit cards, Polish ID card, and driver\'s license inside. Most likely somebody stole it. No strange transactions have been observed on my credit card accounts yet, but these are generally not much of a concern, thanks to credit card insurance. What is more troubling, is that perhaps some other woman is currently using my stolen ID and the driver\'s license doing nasty things on my account.<br /><br />Apparently there is little one can do in Poland (EU?) in order to invalidate a stolen ID card. While there is an inter-bank Polish-wide database of stolen ID cards, it is being used only by banks, so it can only prevent other people from applying for small loans (for bigger loans, one would need more documents). But there are so many other things one could do, such as renting a car (and then committing a crime with it), signing up a deal with a mobile carrier (and then committing a cyber crime using this phone, or just making a really huge bill), or perhaps buying an SSL cert...<br /><br />With apparently no better option left, I decided to write this blog post -- hopefully somebody will find it, e.g. before issuing a Class 2 SSL cert to the fake Joanna Rutkowska.<br /><br />Here are the numbers of my lost/stolen documents:<br /><ul><li><span style="font-weight: bold;">AFS739530</span></li><li><span style="font-weight: bold;">**********5058</span></li></ul>Luckily<span style="font-weight: bold;"><span style="font-weight: bold;"> </span></span>I have had my ID details written down somewhere, and the driver\'s license number I extracted from my Hertz profile.<span style="font-weight: bold;"><br /></span><br />A scene at a police department in Warsaw:<br /><ul><li>Hi, I would like to report my wallet being lost or stolen...</li><li>Madam, was your wallet stolen, or have you lost it?</li><li>Officer, how could I possibly know this...? If I lost it, do you really think I would remember the very moment of losing it?</li><li>Madam, you must be sure whether it was a crime or not!</li><li>...<br /></li></ul>A scene on the hotline, calling my mobile provider (note that I decided to use the word <span style="font-style: italic;">stolen</span> this time):<br /><ul><li>Hi, my documents have been stolen -- I would like that you indicate my ID card as invalid in your system (that you hopefully share with other telcom operators)..<br /></li><li>You should report such an incident to the police, Madam...</li><li>Right, but I guess that neither you, nor any other mobile provides in Poland will consult a Police database before signing up a contract with a strange person who might be using my stolen documents, correct?</li><li>Oh, but we will not sign a contract with a strange person who uses your documents! Only with you!</li><li>And how would you know it was not me, if that person was similarly aged and looking, and was using my stolen ID and driver\'s license?</li><li>...<br /></li></ul>', 'guidislink': True, 'published': u'2011-03-08T14:40:00.007+01:00', u'thr_total': u'0', 'classifier': 'SSL cert'}
{'updated_parsed': time.struct_time(tm_year=2011, tm_mon=1, tm_mday=4, tm_hour=21, tm_min=52, tm_sec=31, tm_wday=1, tm_yday=4, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/1897900981379908689/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=1897900981379908689', 'type': u'text/html', 'rel': u'replies', 'title': u'1 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1897900981379908689', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1897900981379908689', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/12/update-on-qubes.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Update on Qubes'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-1897900981379908689', 'published_parsed': time.struct_time(tm_year=2010, tm_mon=12, tm_mday=6, tm_hour=17, tm_min=23, tm_sec=0, tm_wday=0, tm_yday=340, tm_isdst=0), 'title': u'Update on Qubes', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u'It\'s been a bit quiet on the Qubes development front for the last 2 months. The reason for this was that Rafal and myself got fully engaged in a new commercial research project. After all, we do need to make money somehow, so that we could later spend them on funding Qubes development :)But this new engagement is actually closely related to what we do with Qubes (i.e. how new hardware technologies allow to build more secure OSes), so it\'s not like we\'re abandoning Qubes, as the experience we get with this research project will surely be useful for us when designing and implementing the Qubes 2.0 architecture.In order to continue with Qubes, we\'ve decided to hire some Linux programmers, while Rafal and I will continue with our research project over the coming months. We\'ve decided to start a cooperation with another Polish computer outfit, TLS Technologies, who specializes in advanced systems design and implementation.There are a couple of people people from TLS engaged in Qubes, and you will soon "meet" them on qubes-devel, in our wiki, and of course, you will see their contributions in our git repos.The plan is to have Beta 1 released sometime in January 20102011. The two important features that will be implemented first, and that will make it into Beta 1 (apart for the long-awaited installer) are: Firewall VMs, and support for templates for service VMs. Stay tuned for more details soon!If everything goes smoothly, then we should expect Qubes 1.0 sometime at the end of Q1 2011...', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'Update on Qubes', 'language': None}, 'updated': u'2011-01-04T22:52:31.593+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'company news', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2010/12/update-on-qubes.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'It\'s been a bit quiet on the Qubes development front for the last 2 months. The reason for this was that Rafal and myself got fully engaged in a new commercial research project. After all, we do need to make money somehow, so that we could later spend them on funding Qubes development :)<br /><br />But this new engagement is actually closely related to what we do with Qubes (i.e. how new hardware technologies allow to build more secure OSes), so it\'s not like we\'re abandoning Qubes, as the experience we get with this research project will surely be useful for us when designing and implementing the Qubes 2.0 architecture.<br /><br />In order to continue with Qubes, we\'ve decided to hire some Linux programmers, while Rafal and I will continue with our research project over the coming months. We\'ve decided to start a cooperation with another Polish computer outfit, <a href="http://tls-technologies.com/frontpage_en.php">TLS Technologies</a>, who specializes in advanced systems design and implementation.<br /><br />There are a couple of people people from TLS engaged in Qubes, and you will soon "meet" them on <a href="https://groups.google.com/group/qubes-devel">qubes-devel</a>, in our <a href="http://www.qubes-os.org/trac/">wiki</a>, and of course, you will see their contributions in our <a href="http://qubes-os.org/gitweb/">git repos</a>.<br /><br />The plan is to have Beta 1 released sometime in January <del>2010</del>2011. The two important features that will be implemented first, and that will make it into Beta 1 (apart for the long-awaited installer) are: Firewall VMs, and support for templates for service VMs. Stay tuned for more details soon!<br /><br />If everything goes smoothly, then we should expect Qubes 1.0 sometime at the end of Q1 2011...', 'guidislink': True, 'published': u'2010-12-06T18:23:00.004+01:00', u'thr_total': u'1', 'classifier': 'Stay tuned'}
{'updated_parsed': time.struct_time(tm_year=2010, tm_mon=10, tm_mday=6, tm_hour=14, tm_min=29, tm_sec=7, tm_wday=2, tm_yday=279, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/9214464405081236892/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=9214464405081236892', 'type': u'text/html', 'rel': u'replies', 'title': u'0 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/9214464405081236892', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/9214464405081236892', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/10/qubes-alpha-3.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes Alpha 3!'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-9214464405081236892', 'published_parsed': time.struct_time(tm_year=2010, tm_mon=10, tm_mday=6, tm_hour=14, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=279, tm_isdst=0), 'title': u'Qubes Alpha 3!', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u'We have just uploaded the new packages for the Qubes Alpha 3 milestone. A lot of under the hood work went into this release, including:Support for fast-booting Disposable VM (see also implementation description here)Dynamic memory balancing between AppVMsRedesigned networking and NetVM support (for VT-d system)Reasonably stable S3 sleep support (suspend-to-RAM), that works even with a NetVM!Improved GUI virtualization (all known bugs fixed finally!)Disposable VMs are really a killer feature IMO. The screenshot below shows the user\'s experience:The user righ-clicks on a PDF file, chooses "Open in Disposable VM", and then waits 1... 2... 3... 4 seconds (assuming a reasonably modern laptop) and the document automagically opens in a fresh new Disposable VM. If you make some changes to the document (e.g. if it was a PDF form, and you edited it), those changes will propagate back to the original file in the original AppVM.So, within 4-5 seconds, Qubes creates a new VM, boots it up (actually refreshes from a savefile), copies the file in question to the VM, and finally opens the application that is a registered MIME handler for this type of documents, e.g. a PDF viewer. We\'re pretty confident this time could be further decreased down to some 2 seconds, or maybe even less. This is planned for some later Beta release.Dynamic memory balancing allows to better utilize system physical memory by moving it between running AppVMs in realtime, according to the VM\'s real needs. This allows to run more VMs, compared to a scheme with static memory allocation, and also dramatically eliminates system hiccups, that otherwise occur often in a static scheme when one of the VMs is short of memory and initiates swapping.The screenshot above shows the memory usage on my 6GB laptop when writing this blog post. As you can see I can easily run a dozen of AppVMs (most users will not need that many, but I\'m a bit more paranoid I guess ;) and could probably even start a few more if there was such a need (e.g. open some Disposable VMs). Of course, this all depends on the actual type of workload the user runs in each VM - most of my AppVMs run just one or two applications, usually a Web browser (Firefox), but some, e.g. the work, and personal AppVMs run much more memory-hungry applications such as Open Office, or Picasa Photo Browser. I very rarely see more than 1 GB of memory allocated to a single VM, though. Generally speaking, the new memory management in Qubes works pretty nice.Currently, the biggest slow-down factor for Qubes is somehow poor disk performance, most likely  caused by the joint impact of the Xen backend, Linux dm, and kcryptd (we use the simplest possible Xen block backend for security reasons, will move to more sophisticated backends when we introduce untrusted storage domain in Qubes 2.0).Now, most of the under-the-hood work for Qubes 1.0 seems to be complete, and now it time for all the polishing of the user experience, which will be the main focus of the upcoming Beta development. Just reminding that we\'re currently looking to hire developers for this effort.The Installation instructions can be found here. Enjoy!', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'Qubes Alpha 3!', 'language': None}, 'updated': u'2010-10-06T16:29:07.797+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2010/10/qubes-alpha-3.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://3.bp.blogspot.com/_Ti3q3Hdvels/TKpR7rgoq4I/AAAAAAAAAGw/ARa_TKsWL1E/s72-c/disposablevm.png', 'width': u'72', 'height': u'72'}], 'summary': u'We have just uploaded the new packages for the Qubes Alpha 3 milestone. A lot of under the hood work went into this release, including:<br /><ul><li>Support for <a href="http://theinvisiblethings.blogspot.com/2010/06/disposable-vms.html">fast-booting Disposable VM</a> (see also implementation description <a href="http://www.qubes-os.org/trac/wiki/DVMimpl">here</a>)</li></ul><ul><li><a href="http://www.qubes-os.org/trac/wiki/Qmemman">Dynamic memory balancing</a> between AppVMs</li></ul><ul><li>Redesigned <a href="http://www.qubes-os.org/trac/wiki/QubesNet">networking </a>and NetVM support (for VT-d system)</li></ul><ul><li>Reasonably stable S3 sleep support (suspend-to-RAM), that works even with a NetVM!</li></ul><ul><li>Improved GUI virtualization (all known bugs fixed finally!)</li></ul>Disposable VMs are really a killer feature IMO. The screenshot below shows the user\'s experience:<br /><br /><a href="http://3.bp.blogspot.com/_Ti3q3Hdvels/TKpR7rgoq4I/AAAAAAAAAGw/ARa_TKsWL1E/s1600/disposablevm.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5524317978657074050" src="http://3.bp.blogspot.com/_Ti3q3Hdvels/TKpR7rgoq4I/AAAAAAAAAGw/ARa_TKsWL1E/s320/disposablevm.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 320px; height: 253px;" /></a>The user righ-clicks on a PDF file, chooses "Open in Disposable VM", and then waits 1... 2... 3... 4 seconds (assuming a reasonably modern laptop) and the document automagically opens in a fresh new Disposable VM. If you make some changes to the document (e.g. if it was a PDF form, and you edited it), those changes will propagate back to the original file in the original AppVM.<br /><br />So, within 4-5 seconds, Qubes creates a new VM, boots it up (actually refreshes from a savefile), copies the file in question to the VM, and finally opens the application that is a registered MIME handler for this type of documents, e.g. a PDF viewer. We\'re pretty confident this time could be further decreased down to some 2 seconds, or maybe even less. This is planned for some later Beta release.<br /><br />Dynamic memory balancing allows to better utilize system physical memory by moving it between running AppVMs in realtime, according to the VM\'s real needs. This allows to run more VMs, compared to a scheme with static memory allocation, and also dramatically eliminates system hiccups, that otherwise occur often in a static scheme when one of the VMs is short of memory and initiates swapping.<br /><br /><a href="http://2.bp.blogspot.com/_Ti3q3Hdvels/TKpSgz5-66I/AAAAAAAAAG4/3z-eUmZJwyw/s1600/qmemman.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5524318616566033314" src="http://2.bp.blogspot.com/_Ti3q3Hdvels/TKpSgz5-66I/AAAAAAAAAG4/3z-eUmZJwyw/s320/qmemman.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 320px; height: 151px;" /></a>The screenshot above shows the memory usage on my 6GB laptop when writing this blog post. As you can see I can easily run a dozen of AppVMs (most users will not need that many, but I\'m a bit more paranoid I guess ;) and could probably even start a few more if there was such a need (e.g. open some Disposable VMs). Of course, this all depends on the actual type of workload the user runs in each VM - most of my AppVMs run just one or two applications, usually a Web browser (Firefox), but some, e.g. the work, and personal AppVMs run much more memory-hungry applications such as Open Office, or Picasa Photo Browser. I very rarely see more than 1 GB of memory allocated to a single VM, though. Generally speaking, the new memory management in Qubes works pretty nice.<br /><br />Currently, the biggest slow-down factor for Qubes is somehow poor disk performance, most likely  caused by the joint impact of the Xen backend, Linux dm, and kcryptd (we use the simplest possible Xen block backend for security reasons, will move to more sophisticated backends when we introduce untrusted storage domain in Qubes 2.0).<br /><br />Now, most of the under-the-hood work for Qubes 1.0 seems to be complete, and now it time for all the polishing of the user experience, which will be the main focus of the upcoming Beta development. Just reminding that we\'re currently looking to <a href="http://theinvisiblethings.blogspot.com/2010/09/itl-is-hiring.html">hire developers</a> for this effort.<br /><br />The Installation instructions can be found <a href="http://www.qubes-os.org/trac/wiki/InstallationGuide">here</a>. Enjoy!', 'guidislink': True, 'published': u'2010-10-06T16:00:00.003+02:00', u'thr_total': u'0', 'classifier': 'milestone'}
{'updated_parsed': time.struct_time(tm_year=2010, tm_mon=9, tm_mday=28, tm_hour=12, tm_min=55, tm_sec=22, tm_wday=1, tm_yday=271, tm_isdst=0), 'links': [{'href': u'https://www.blogger.com/feeds/24586388/posts/default/7242870861005515935', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7242870861005515935', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/09/itl-is-hiring.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'ITL is hiring!'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-7242870861005515935', 'published_parsed': time.struct_time(tm_year=2010, tm_mon=9, tm_mday=28, tm_hour=11, tm_min=55, tm_sec=0, tm_wday=1, tm_yday=271, tm_isdst=0), 'title': u'ITL is hiring!', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u"We're looking to hire one or two full time developers, who will be working on the open source version of Qubes OS, with the primary task of advancing it from Alpha to Beta stage, and then finally to a production quality version.We're looking to hire developers, not necessarily security researchers! Specifically we expect the following from candidates:Many years of experience with Linux/GNU development, including system-level and kernel-level Linux development, documented by the actual projects,Familiarity with virtualization technologies, and specifically with Xen hypervisor,Basic understanding of the Qubes architecture and excitement about the project :)Product-oriented approach (polishing, testing, packaging, understanding of user needs),Good communication skills in written EnglishIn return we offer the following benefits:Decent, full-time salary,Opportunity to be part of a renown security team,Opportunity to work on an exciting product,Work on a GPLed project with all the benefits it gives to the developer (visibility, rights to the code)If you're interested in joining our team, please send a message to joanna at invisiblethingslab.com.Please do not send typical resumes: don't write about schools you finished, certificates you obtained, driving license, scuba trainings, etc. We are only interested in a short bio (keep it below 100 words please), and links to your past or current projects. Include your geographic location.While it would be great if you were based in Warsaw (or somewhere in Poland), as it would allow for regular face-to-face meetings, this is not a critical factor. ITL doesn't have a physical office, and everybody work from their apartments, so there is no need to relocate to Warsaw, in case you happened to be based somewhere else.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'ITL is hiring!', 'language': None}, 'updated': u'2010-09-28T14:55:22.519+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'company news', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2010/09/itl-is-hiring.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://4.bp.blogspot.com/_Ti3q3Hdvels/TKHbgfsTIKI/AAAAAAAAAGY/x5QFRMysCTE/s72-c/academia_vs_business.png', 'width': u'72', 'height': u'72'}], 'summary': u'We\'re looking to hire one or two full time developers, who will be working on the open source version of <a href="http://www.qubes-os.org/Home.html">Qubes OS</a>, with the primary task of advancing it from Alpha to Beta stage, and then finally to a production quality version.<br /><br />We\'re looking to hire <span style="font-style: italic;">developers</span>, not necessarily security researchers! Specifically we expect the following from candidates:<br /><ul><li>Many years of experience with Linux/GNU development, including system-level and kernel-level Linux development, documented by the actual projects,<br /></li><li>Familiarity with virtualization technologies, and specifically with Xen hypervisor,</li><li>Basic understanding of the Qubes architecture and excitement about the project :)</li><li>Product-oriented approach (polishing, testing, packaging, understanding of user needs),</li><li>Good communication skills in written English<br /></li></ul>In return we offer the following benefits:<br /><ul><li>Decent, full-time salary,</li><li>Opportunity to be part of a <a href="http://www.invisiblethingslab.com/itl/About.html">renown security team</a>,</li><li>Opportunity to work on an exciting product,<br /></li><li>Work on a GPLed project with all the benefits it gives to the developer (visibility, rights to the code)</li></ul>If you\'re interested in joining our team, please send a message to joanna at invisiblethingslab.com.<br /><br />Please do not send typical resumes: don\'t write about schools you finished, certificates you obtained, driving license, scuba trainings, etc. We are only interested in a short bio (keep it below 100 words please), <span style="font-weight: bold;">and links to your past or current projects</span>. Include your geographic location.<br /><br />While it would be great if you were based in Warsaw (or somewhere in Poland), as it would allow for regular face-to-face meetings, this is not a critical factor. ITL doesn\'t have a physical office, and everybody work from their apartments, so there is no need to relocate to Warsaw, in case you happened to be based somewhere else.<br /><br /><a href="http://xkcd.com/664/"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5521935969442537634" src="http://4.bp.blogspot.com/_Ti3q3Hdvels/TKHbgfsTIKI/AAAAAAAAAGY/x5QFRMysCTE/s400/academia_vs_business.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 400px; height: 206px;" /></a>', 'guidislink': True, 'published': u'2010-09-28T13:55:00.007+02:00', 'classifier': 'looking to hire'}
{'updated_parsed': time.struct_time(tm_year=2010, tm_mon=12, tm_mday=6, tm_hour=17, tm_min=23, tm_sec=25, tm_wday=0, tm_yday=340, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/1723680013954760533/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=1723680013954760533', 'type': u'text/html', 'rel': u'replies', 'title': u'11 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1723680013954760533', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1723680013954760533', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/09/on-thin-clients-security.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'On Thin Clients Security'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-1723680013954760533', 'published_parsed': time.struct_time(tm_year=2010, tm_mon=9, tm_mday=13, tm_hour=14, tm_min=35, tm_sec=0, tm_wday=0, tm_yday=256, tm_isdst=0), 'title': u'On Thin Clients Security', 'pred': u'security', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u"I'm constantly being asked about it, and so I thought I would write a handy blog post, so I could just referrer to it in the future, when yet anther person asks me if I think the use of Thin Clients is a  game-changer to desktop security...It is not! Thin Clients do not improve your desktop security in any way, and that's because:You still run a regular full-blown OS, such as Widows and all the regular applications, such as those buggy PDF readers, Web browsers, etc - it's just you run them all on some corporate server, rather on your laptop. The fact that you run the OS on the corporate server, doesn't make it any less prone to compromises, compared to if you run it locally on your laptop.A compromise of your laptop, even if it's just a dump terminal, is still fatal! This is because if your laptop's kernel (or MBR, or BIOS, or some PCI device's firmware, or GPU) is compromised, the attacker can intercept/steal/spoof all the data that you work on remotely, because it is still your laptop that processes the input (keystrokes, mouse events) and output (pixels). So, an Evil Maid attack on your laptop when you use it as a Thin Client, would be just as devastating, as it is otherwise (and don't fool yourselves that crypto tokens can help)We really need secure end-user systems, even if we just want to use them as dump terminals only! There is really no way we could skip this step (and e.g. focus only on infrastructure, or services security).", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'On Thin Clients Security', 'language': None}, 'updated': u'2010-12-06T18:23:25.754+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'os security', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2010/09/on-thin-clients-security.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'I\'m constantly being asked about it, and so I thought I would write a handy blog post, so I could just referrer to it in the future, when yet anther person asks me if I think the use of Thin Clients is a  game-changer to desktop security...<br /><br />It is not! Thin Clients do not improve your desktop security in any way, and that\'s because:<br /><ol><br /><li>You still run a regular full-blown OS, such as Widows and all the regular applications, such as those buggy PDF readers, Web browsers, etc - it\'s just you run them all on some corporate server, rather on your laptop. The fact that you run the OS on the corporate server, doesn\'t make it any less prone to compromises, compared to if you run it locally on your laptop.</li><br /><br /><li>A compromise of your laptop, even if it\'s just a dump terminal, is still fatal! This is because if your laptop\'s kernel (or MBR, or BIOS, or some PCI device\'s firmware, or GPU) is compromised, the attacker can intercept/steal/spoof all the data that you work on remotely, because it is still your laptop that processes the input (keystrokes, mouse events) and output (pixels). So, an Evil Maid attack on your laptop when you use it as a Thin Client, would be just as devastating, as it is otherwise (and don\'t fool yourselves that crypto tokens <a href="http://portal.acm.org/citation.cfm?id=1854099.1854103">can help</a>)</li></ol><br />We really need secure end-user systems, even if we just want to use them as dump terminals only! There is really no way we could skip this step (and e.g. focus only on infrastructure, or services security).', 'guidislink': True, 'published': u'2010-09-13T16:35:00.006+02:00', u'thr_total': u'11', 'classifier': 'desktop security'}
{'updated_parsed': time.struct_time(tm_year=2010, tm_mon=9, tm_mday=9, tm_hour=16, tm_min=37, tm_sec=57, tm_wday=3, tm_yday=252, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/1857218549417302829/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=1857218549417302829', 'type': u'text/html', 'rel': u'replies', 'title': u'12 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1857218549417302829', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1857218549417302829', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/09/untrusting-your-gui-subsystem.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'(Un)Trusting your GUI Subsystem'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-1857218549417302829', 'published_parsed': time.struct_time(tm_year=2010, tm_mon=9, tm_mday=9, tm_hour=16, tm_min=21, tm_sec=0, tm_wday=3, tm_yday=252, tm_isdst=0), 'title': u'(Un)Trusting your GUI Subsystem', 'pred': u'security', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u'Why do we need secure desktop systems?  Why support from hardware is necessary to build secure desktop OSes? Does virtualization make things more, or less complex? Why Dynamic RTM (Intel TXT) is better than Static RTM? Can we have untrusted GUI domain/subsystem?I tried to cover those questions in my recent keynote at ETISS, and you can grab the slides here. Particularly, the slide #18 presents the idealistic view of an OS that could be achieved through the use of hardware virtualization and trusted boot technologies. It might look very similar to many other pictures of virtualized systems one can see these days, but what makes it special is that all the dark gray boxes represent untrusted domains (so, their compromise is not security-critical, except for the potential of a denial-of-service).No OS currently implements this architecture, even Qubes. We still have Storage and GUI subsystem in Dom0 (so they are both trusted), although we already know (we think) how to implement the untrusted storage domain (this is described in detail in the arch spec), and the main reason we don\'t have it now is that TXT market adoption is so poor, that very few people could make use of it.The GUI subsystem is, however, a much bigger challenge. When we think about, it should really feel impossible to have an untrusted GUI subsystem, because the GUI subsystem really "sees" all the pixmaps that are to be displayed to the user, so also all the confidential emails, documents, etc. The GUI is different in nature than the networking subsystem, where we can use encrypted protocols to prevent the netvm from sniffing or meaningfully intercepting the application-generated traffic, or the storage subsystem, where we can use fs-encryption and trusted boot technologies to keep the storage domain off from reading or modifying the files used by apps in a meaningful ways. We cannot really encrypt the pixmaps (in the apps, or AppVMs), because for this to work we would need to have graphics cards that would be able to do the decryption and key exchange (note how this is different from the case of an untrusted storage domain, where there is no need for internal hardware encryption!), and the idea of putting, essentially an HTTPS webserver on your GPU is doubtful at best, because it would essentially move the target from the GUI domain to the GPU, and there is really no reason why lots-of-code in the GPU were any harder to attack than lots-of-code in the GUI domain... So we came out recently with an idea of a Split I/O model that is also presented in my slides, where we separate the user input (keyboard, mouse), and keep it still in dom0 (trusted domain), from the output (GUI, audio), which is moved into an untrusted GUI domain. We obviously need to make sure that the GUI domain cannot "talk" to other domains, to make sure it cannot "leak out" the secrets that it "sees" while processing the various pixmaps. For this we need to have the hypervisor ensure that all the inter-domain shared pages mapped into the GUI domain are read-only for the GUI domain, and this would imply that we need the GUI protocol, exposed by the GUI domain to other AppVMs, to be unidirectional. There are more challenges though, e.g. how to keep the bandwith of timing covert channels, such as those through the CPU caches, between the GUI domain and other AppVMs on a reasonably low level (please note the distinction between a covert channel, which require cooperation of two domains, and a side-channel, which requires just one domain to be malicious - the latter are much more of a theoretical problem, and are of a concern only in some very high security military systems, while the former are easy to implement in practice usually, and present a practical problem in this very scenario).Another problem, that was immediately pointed out by the ETISS audience, is that an attacker, who compromised the GUI domain, can manipulate the pixmaps that are being processed in the GUI subsystem to present false picture to the user (remember, the attacker should have no way to send them out anywhere). This includes attacks such as button relabeling ("OK" becomes "Cancel" and the other way around), content manipulation ("$1,000,000" instead of "$100", and vice-versa), security labels spoofing ("red"-labeled windows becoming "green"-labeled), and so on. It\'s an open question how practical these attacks are, at least when we consider automated attacks, as they require ability to extract some semantics from the pixmaps (where is the button, where is the decoration), as well as understanding the user\'s actions, intentions, and behavior (just automatically relabeling my Friefox label to "green" would be a poor attack, as I would immediately realize something is going wrong). Nevertheless this is a problem, and I\'m not sure how this could be solved with the current hardware architecture.But do we really need untrusted GUI domain? That depends. Currently in Qubes the GUI subsystem is located in dom0, and thus it is fully trusted, and this also means that a potential compromise of the GUI subsystem is considered fatal. We try to make an attack on GUI as hard as possible, and this is the reason we have designed and implemented special, very simple GUI protocol that is exposed to other AppVMs (instead of e.g. using the X protocol or VNC). But if we wanted to add some more "features", such as 3D hardware acceleration for the apps (3D acceleration is already available to the Window Manager in Qubes, but not for the apps), then we would not be able to keep the GUI protocol so simple anymore, and this might result in introducing exploitable fatal bugs. So, in that case it would be great to have untrusted GUI domain, because we would be able to provide feature-rich GUI protocols, with all the OpenGL-ish like things, without worrying that somebody might exploit the GUI backend. We would also not need to worry about putting all the various 3rd party software in the GUI domain, such as KDE, Xorg, and various 3rd party GPU drivers, like e.g. NVIDIA\'s closed source ones, and that some of it might be malicious.So, generally, yes, we would like to have untrusted GUI domain - we can live without it, but then we will not have all the fancy 3D acceleration for games, and also need to carefully choose and verify the GUI-related software (which is lots of software).But perhaps in the next 5 years everybody will have a computer with a few dozens of cores, and also the CPU-to-DRAM bandwidth will be orders of magnitude faster than today, and so there will be no longer a need to offload graphic intensive work to a specialized GPU, because one of our 64 cores will happily do the work? Wouldn\'t that be a nicer architecture, also for many other reasons (e.g. better utilization of power/circuit real estate)? In that case nobody will need OpenGL, and so there will be no need for a richer GUI protocol than what is already implemented in Qubes...It\'s quite exciting to see what will happen (and what we will come up for Qubes) :)BTW, some people might confuse X server de-privileging efforts, i.e. making the X server run without root privileges, which is being done in some Linux distros and BSDs, with what had been described in this article, namely making the GUI subsystem untrusted. Please note that a de-priviliged X server doesn\'t really solve any major security problems related to GUI subsystem, as whoever controls ("0wns") the X server (depriviliged or not) can steal or manipulate all the data that this X server is processing/displaying. Apparently there are some reasons why people want to run Xorg as non-root, but in case of typical desktop OSes this provides little security benefit (unless you want to run a few X servers with different user accounts, and on different vt\'s, which most people would never do anyway).', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'(Un)Trusting your GUI Subsystem', 'language': None}, 'updated': u'2010-09-09T18:37:57.159+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'os security', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted computing', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2010/09/untrusting-your-gui-subsystem.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'Why do we need secure desktop systems?  Why support from hardware is necessary to build secure desktop OSes? Does virtualization make things more, or less complex? Why Dynamic RTM (Intel TXT) is better than Static RTM? Can we have untrusted GUI domain/subsystem?<br /><br />I tried to cover those questions in my recent keynote at ETISS, and you can grab the slides <a href="http://qubes-os.org/files/doc/etiss.pdf">here</a>. <br /><br />Particularly, the slide #18 presents the idealistic view of an OS that could be achieved through the use of hardware virtualization and trusted boot technologies. It might look very similar to many other pictures of virtualized systems one can see these days, but what makes it special is that all the dark gray boxes represent <span style="font-style: italic;">untrusted</span> domains (so, their compromise is not security-critical, except for the potential of a denial-of-service).<br /><br />No OS currently implements this architecture, even Qubes. We still have Storage and GUI subsystem in Dom0 (so they are both trusted), although we already know (we think) how to implement the untrusted storage domain (this is described in detail in the arch spec), and the main reason we don\'t have it now is that TXT market adoption is so poor, that very few people could make use of it.<br /><br />The GUI subsystem is, however, a much bigger challenge. When we think about, it should really feel impossible to have an untrusted GUI subsystem, because the GUI subsystem really "sees" all the pixmaps that are to be displayed to the user, so also all the confidential emails, documents, etc. The GUI is different in nature than the networking subsystem, where we can use encrypted protocols to prevent the netvm from sniffing or meaningfully intercepting the application-generated traffic, or the storage subsystem, where we can use fs-encryption and trusted boot technologies to keep the storage domain off from reading or modifying the files used by apps in a meaningful ways. We cannot really encrypt the pixmaps (in the apps, or AppVMs), because for this to work we would need to have graphics cards that would be able to do the decryption and key exchange (note how this is different from the case of an untrusted storage domain, where there is no need for internal hardware encryption!), and the idea of putting, essentially an HTTPS webserver on your GPU is doubtful at best, because it would essentially move the target from the GUI domain to the GPU, and there is really no reason why lots-of-code in the GPU were any harder to attack than lots-of-code in the GUI domain... <br /><br />So we came out recently with an idea of a Split I/O model that is also presented in my slides, where we separate the user input (keyboard, mouse), and keep it still in dom0 (trusted domain), from the output (GUI, audio), which is moved into an untrusted GUI domain. We obviously need to make sure that the GUI domain cannot "talk" to other domains, to make sure it cannot "leak out" the secrets that it "sees" while processing the various pixmaps. For this we need to have the hypervisor ensure that all the inter-domain shared pages mapped into the GUI domain are read-only for the GUI domain, and this would imply that we need the GUI protocol, exposed by the GUI domain to other AppVMs, to be unidirectional. <br /><br />There are more challenges though, e.g. how to keep the bandwith of timing covert channels, such as those through the CPU caches, between the GUI domain and other AppVMs on a reasonably low level (please note the distinction between a covert channel, which require cooperation of two domains, and a side-channel, which requires just one domain to be malicious - the latter are much more of a theoretical problem, and are of a concern only in some very high security military systems, while the former are easy to implement in practice usually, and present a practical problem in this very scenario).<br /><br />Another problem, that was immediately pointed out by the ETISS audience, is that an attacker, who compromised the GUI domain, can manipulate the pixmaps that are being processed in the GUI subsystem to present false picture to the user (remember, the attacker should have no way to send them out anywhere). This includes attacks such as button relabeling ("OK" becomes "Cancel" and the other way around), content manipulation ("$1,000,000" instead of "$100", and vice-versa), security labels spoofing ("red"-labeled windows becoming "green"-labeled), and so on. It\'s an open question how practical these attacks are, at least when we consider automated attacks, as they require ability to extract some semantics from the pixmaps (where is the button, where is the decoration), as well as understanding the user\'s actions, intentions, and behavior (just automatically relabeling my Friefox label to "green" would be a poor attack, as I would immediately realize something is going wrong). Nevertheless this is a problem, and I\'m not sure how this could be solved with the current hardware architecture.<br /><br />But do we really need untrusted GUI domain? That depends. Currently in Qubes the GUI subsystem is located in dom0, and thus it is fully trusted, and this also means that a potential compromise of the GUI subsystem is considered fatal. We try to make an attack on GUI as hard as possible, and this is the reason we have designed and implemented special, very simple GUI protocol that is exposed to other AppVMs (instead of e.g. using the X protocol or VNC). But if we wanted to add some more "features", such as 3D hardware acceleration for the apps (3D acceleration is already available to the Window Manager in Qubes, but not for the apps), then we would not be able to keep the GUI protocol so simple anymore, and this might result in introducing exploitable fatal bugs. So, in that case it would be great to have untrusted GUI domain, because we would be able to provide feature-rich GUI protocols, with all the OpenGL-ish like things, without worrying that somebody might exploit the GUI backend. We would also not need to worry about putting all the various 3rd party software in the GUI domain, such as KDE, Xorg, and various 3rd party GPU drivers, like e.g. NVIDIA\'s closed source ones, and that some of it might be malicious.<br /><br />So, generally, yes, we would like to have untrusted GUI domain - we can live without it, but then we will not have all the fancy 3D acceleration for games, and also need to carefully choose and verify the GUI-related software (which is <span style="font-style: italic;">lots of</span> software).<br /><br />But perhaps in the next 5 years everybody will have a computer with a few dozens of cores, and also the CPU-to-DRAM bandwidth will be orders of magnitude faster than today, and so there will be no longer a need to offload graphic intensive work to a specialized GPU, because one of our 64 cores will happily do the work? Wouldn\'t that be a nicer architecture, also for many other reasons (e.g. better utilization of power/circuit real estate)? In that case nobody will need OpenGL, and so there will be no need for a richer GUI protocol than what is already implemented in Qubes...<br /><br />It\'s quite exciting to see what will happen (and what we will come up for Qubes) :)<br /><br />BTW, some people might confuse X server <span style="font-style: italic;">de-privileging</span> efforts, i.e. making the X server run without root privileges, which is being done in some Linux distros and BSDs, with what had been described in this article, namely making the GUI subsystem <span style="font-style: italic;">untrusted</span>. Please note that a de-priviliged X server doesn\'t really solve any major security problems related to GUI subsystem, as whoever controls ("0wns") the X server (depriviliged or not) can steal or manipulate all the data that this X server is processing/displaying. Apparently there are some reasons why people want to run Xorg as non-root, but in case of typical desktop OSes this provides little security benefit (unless you want to run a few X servers with different user accounts, and on different vt\'s, which most people would never do anyway).', 'guidislink': True, 'published': u'2010-09-09T18:21:00.002+02:00', u'thr_total': u'12', 'classifier': 'depriviliged'}
{'updated': u'2010-09-02T12:28:46.891+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'announcements', 'updated_parsed': time.struct_time(tm_year=2010, tm_mon=9, tm_mday=2, tm_hour=10, tm_min=28, tm_sec=46, tm_wday=3, tm_yday=245, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2010, tm_mon=9, tm_mday=2, tm_hour=8, tm_min=38, tm_sec=0, tm_wday=3, tm_yday=245, tm_isdst=0), 'tags': [{'term': u'company news', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'conferences', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'pred': u'announcements', 'title': u'Qubes, Qubes Pro, and the Future...', 'links': [{'href': u'https://www.blogger.com/feeds/24586388/posts/default/8797973337920093538', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8797973337920093538', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/09/qubes-qubes-pro-and-future.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes, Qubes Pro, and the Future...'}], 'summary': u'The work on Qubes OS has been extremely exciting and also very challenging for us. While most of the work we have been doing so far relates to solving various technical, under-the-hood challenges, the more important goals in the long-term are related more to mitigating the so called "human factor", i.e. making the system not only easy to use, but tolerant to user absentmindedness. This includes e.g. ensuring the user uses a correct AppVM (e.g. do the banking in the "banking" AppVM, and not in the "random web browsing" AppVM, and also not the other way around: don\'t do random surfing in the "banking" AppVM), and generally making the whole isolation between AppVMs as seamless as possible, but without sacrificing the security at the same time. <br /><br />This is becoming very important, as the technical level of security in Qubes is already very high, and so the "human factor" might easily become a low hanging fruit for the attacker. (<a href="http://theinvisiblethings.blogspot.com/2007/04/human-factor.html">In contrast to other OSes</a>) <br /><br />But for Qubes to become something more than just an interesting OS for Linux geeks and security enthusiasts, it is also critical to have better application support. Right now Qubes lets users run Linux apps, because each AppVM is Linux-based. But, and let\'s not be afraid to admit this: Linux sucks when it comes to application support! (Take Open Office as an example - it not only looks like MS Office 97, but is also terribly user-unfriendly, especially their presentation program, the Impress. Why is it so difficult to make it look and behave more like Apple Keynote?)<br /><br />There is only one way to provide better application support to Qubes: make it support Windows-based, or Mac-based, AppVMs. Just imagine that: being able to run most of your Windows (or Mac) applications, but at the same time benefit from the Qubes strong isolation and seamless integration on one common desktop...<br /><br />In order to implement support for Windows-based AppVMs (or alternatively Mac-based AppVM) we would need to engage significant resources (5+ very skilled developers, working full time for 1+ year), and so we\'re currently looking for an investor that would be able to provide funding for such an endeavor. The idea is to create a dedicated spin-off company that would focus entirely on Qubes and Qubes Pro, and in the future will make a profit from selling Qubes Pro licenses. Qubes Pro will become a commercial product, still based on the open source Qubes, but adding support for Windows-based or Mac-based AppVMs. I would be happy to discuss the details and business plan via email with interested potential investors.<br /><br />Speaking about the future of Qubes: next week I will speak at the European Trusted Infrastructure Summer School, where I will talk about some general stuff like why we need secure desktop systems and why trusted computing might be a way to go, but will also dive a little bit into some new things we plan for Qubes 2.0, such as storage domain and split I/O graphics model. The conference features some very reputable speakers in system-level security field, such as David Grawrock (the father of Intel TXT and TPM), and Loic Duflot (our venerable competitor in the filed of offensive system-level research), so I consider a honour to deliver an opening keynote there (Check the agenda <a href="http://www.isg.rhul.ac.uk/etiss/agenda">here</a>). <br /><br />I will have my Qubes laptop with me, of course, so if anybody is interested to see Qubes OS live (including Disposable VMs!), I would be happy to do a quick demo on the spot.', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u'The work on Qubes OS has been extremely exciting and also very challenging for us. While most of the work we have been doing so far relates to solving various technical, under-the-hood challenges, the more important goals in the long-term are related more to mitigating the so called "human factor", i.e. making the system not only easy to use, but tolerant to user absentmindedness. This includes e.g. ensuring the user uses a correct AppVM (e.g. do the banking in the "banking" AppVM, and not in the "random web browsing" AppVM, and also not the other way around: don\'t do random surfing in the "banking" AppVM), and generally making the whole isolation between AppVMs as seamless as possible, but without sacrificing the security at the same time. This is becoming very important, as the technical level of security in Qubes is already very high, and so the "human factor" might easily become a low hanging fruit for the attacker. (In contrast to other OSes) But for Qubes to become something more than just an interesting OS for Linux geeks and security enthusiasts, it is also critical to have better application support. Right now Qubes lets users run Linux apps, because each AppVM is Linux-based. But, and let\'s not be afraid to admit this: Linux sucks when it comes to application support! (Take Open Office as an example - it not only looks like MS Office 97, but is also terribly user-unfriendly, especially their presentation program, the Impress. Why is it so difficult to make it look and behave more like Apple Keynote?)There is only one way to provide better application support to Qubes: make it support Windows-based, or Mac-based, AppVMs. Just imagine that: being able to run most of your Windows (or Mac) applications, but at the same time benefit from the Qubes strong isolation and seamless integration on one common desktop...In order to implement support for Windows-based AppVMs (or alternatively Mac-based AppVM) we would need to engage significant resources (5+ very skilled developers, working full time for 1+ year), and so we\'re currently looking for an investor that would be able to provide funding for such an endeavor. The idea is to create a dedicated spin-off company that would focus entirely on Qubes and Qubes Pro, and in the future will make a profit from selling Qubes Pro licenses. Qubes Pro will become a commercial product, still based on the open source Qubes, but adding support for Windows-based or Mac-based AppVMs. I would be happy to discuss the details and business plan via email with interested potential investors.Speaking about the future of Qubes: next week I will speak at the European Trusted Infrastructure Summer School, where I will talk about some general stuff like why we need secure desktop systems and why trusted computing might be a way to go, but will also dive a little bit into some new things we plan for Qubes 2.0, such as storage domain and split I/O graphics model. The conference features some very reputable speakers in system-level security field, such as David Grawrock (the father of Intel TXT and TPM), and Loic Duflot (our venerable competitor in the filed of offensive system-level research), so I consider a honour to deliver an opening keynote there (Check the agenda here). I will have my Qubes laptop with me, of course, so if anybody is interested to see Qubes OS live (including Disposable VMs!), I would be happy to do a quick demo on the spot.', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'Qubes, Qubes Pro, and the Future...', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2010/09/qubes-qubes-pro-and-future.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2010-09-02T10:38:00.005+02:00', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-8797973337920093538', 'classifier': 'the future'}
{'updated_parsed': time.struct_time(tm_year=2010, tm_mon=9, tm_mday=2, tm_hour=8, tm_min=38, tm_sec=0, tm_wday=3, tm_yday=245, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/787574069472938268/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=787574069472938268', 'type': u'text/html', 'rel': u'replies', 'title': u'15 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/787574069472938268', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/787574069472938268', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/08/ms-dos-security-model.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'The MS-DOS Security Model'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-787574069472938268', 'published_parsed': time.struct_time(tm_year=2010, tm_mon=8, tm_mday=19, tm_hour=19, tm_min=55, tm_sec=0, tm_wday=3, tm_yday=231, tm_isdst=0), 'title': u'The MS-DOS Security Model', 'pred': u'security', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u'Back in the \'80s, there was an operating system called MS-DOS. This ancient OS, some readers might not even remember it today, had a very simple security model: every application had access to all the user files and other applications.Today, over two decades later, overwhelming majority of people still use the very same security model... Why? Because on any modern, mainstream OS, be that Linux, Mac, or Windows, all the user applications still have full access to all the user\'s files, and can manipulate all the other user\'s applications.Does it mean we haven\'t progressed anywhere from the MS-DOS age? Not quite. Modern OSes do have various anti-exploitation mechanisms, such as ASLR, NX, guard pages (well, Linux has it since last week at least), and even some more.But in my opinion there has been too much focus on anti-exploitation, and on bug finding, (and on patching, of course), while almost nothing has been done on the OS architecture level. Does anybody know why Linux Desktops offer ability to create different user accounts? What a stupid question, I hear you saying - different accounts allow to run some applications isolated from user\'s other applications! Really? No! The X server, by design, allows any GUI application to mess with all the other GUI applications being displayed by the same X server (on the same desktop). So, what good it is to have a "random_web_browsing" user, if the Firefox run under this user account would still be able to sniff or inject keystrokes to all my other GUI applications, take screenshots of them, etc...?[Yes, I know, the user accounts allows also to theoretically share a single desktop computer among more than one physical users (also known as: people), but, come on, these days it\'s that a single person has many computers, and not the other way around.] One might argue that the progress in the anti-exploitation, and also safe languages, would make it nearly impossible to e.g. exploit a Web browser in the next few years, so there would be no need to have a "random_web_browsing" user in the first place. But, we need isolation not only to protect ourselves when somebody exploits one of our application (e.g. a Web Browser, or a PDF viewer), but also, and perhaps most importantly, to protect from maliciously written applications.Take summer holiday example: imagine you\'re a scuba diver - now, being also a decently geeky person, no doubt you will want to have some dive log manager application to store the history of your dives on a computer. There are a dozen of such applications on the web, so all you need to do is to pick one (you know, the one with the nicest screenshots), and... well you need to install it on your laptop now. But, hey, why this little, made by nobody-knows-who, dive application should be given unlimited access to all your personal files, work email, bank account, and god-know-what-else-you-keep-on-your-laptop? Anti-exploitation technology would do exactly nothing to prevent your files in this case.Aha, it would be so nice if we could just create a user "diving", and run the app under this account. In the future, you could throw in some advanced deco planning application into the same account, still separated from all the other applications.But, sorry, that would not work, because the X server doesn\'t provide isolation on the GUI-level. So, again, why should anybody bother creating any additional user accounts on a Linux Desktop? Windows Vista made a little step forward in this area by introducing integrity levels, that, at least theoretically, were supposed to prevent GUI applications from messing with each other. But they didn\'t scale well (IIRC there were just 3 or 4 integrity levels available), and it still isn\'t really clear if Microsoft treats them seriously.So, why do we have user accounts on Linux Desktops and Macs is beyond me (I guess Mac\'s X server doesn\'t implement any GUI-level isolation either - if I\'m wrong, please point me out to the appropriate reference)?And we haven\'t even touched the problems that might arise from the attacker exploiting a bug in the (over-complex) GUI server/API, or in the (big fat) kernel (with hundreds of drivers). In order for those attacks to become really interesting (like the Rafal\'s attack we presented yesterday), the user would have to already be using e.g. different X servers (and switch between them using Ctrl-Shift-Fn), or some sandboxing mechanisms, such as SELinux sandbox, or, in case of Vista, a scheme similar to this one.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'The MS-DOS Security Model', 'language': None}, 'updated': u'2010-09-02T10:38:00.774+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'os security', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'fighting for a better world', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2010/08/ms-dos-security-model.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'Back in the \'80s, there was an operating system called <a href="https://secure.wikimedia.org/wikipedia/en/wiki/MS-DOS">MS-DOS</a>. This ancient OS, some readers might not even remember it today, had a very simple security model: every application had access to all the user files and other applications.<br /><br />Today, over two decades later, overwhelming majority of people still use the very same security model... Why? Because on any modern, mainstream OS, be that Linux, Mac, or Windows, all the user applications still have full access to all the user\'s files, and can manipulate all the other user\'s applications.<br /><br />Does it mean we haven\'t progressed anywhere from the MS-DOS age? Not quite. Modern OSes do have various anti-exploitation mechanisms, such as ASLR, NX, guard pages (well, Linux has it since <a href="http://lwn.net/SubscriberLink/400746/a77e1044e6ad44a3/">last week</a> at least), and even some more.<br /><br />But in my opinion there has been too much focus on anti-exploitation, and on bug finding, (and on patching, of course), while almost nothing has been done on the OS architecture level. <br /><br />Does anybody know why Linux Desktops offer ability to create different user accounts? What a stupid question, I hear you saying - different accounts allow to run some applications isolated from user\'s other applications! Really? No! The X server, by design, allows any GUI application to mess with all the other GUI applications being displayed by the same X server (on the same desktop). So, what good it is to have a "random_web_browsing" user, if the Firefox run under this user account would still be able to sniff or inject keystrokes to all my other GUI applications, take screenshots of them, etc...?<br /><br />[Yes, I know, the user accounts allows also to theoretically share a single desktop computer among more than one physical users (also known as: people), but, come on, these days it\'s that a single person has many computers, and not the other way around.] <br /><br />One might argue that the progress in the anti-exploitation, and also safe languages, would make it nearly impossible to e.g. exploit a Web browser in the next few years, so there would be no need to have a "random_web_browsing" user in the first place. But, we need isolation not only to protect ourselves when somebody exploits one of our application (e.g. a Web Browser, or a PDF viewer), but also, and perhaps most importantly, to protect from maliciously written applications.<br /><br />Take summer holiday example: imagine you\'re a scuba diver - now, being also a decently geeky person, no doubt you will want to have some dive log manager application to store the history of your dives on a computer. There are a dozen of such applications on the web, so all you need to do is to pick one (you know, the one with the nicest screenshots), and... well you need to install it on your laptop now. But, hey, why this little, made by nobody-knows-who, dive application should be given unlimited access to all your personal files, work email, bank account, and god-know-what-else-you-keep-on-your-laptop? Anti-exploitation technology would do exactly nothing to prevent your files in this case.<br /><br />Aha, it would be so nice if we could just create a user "diving", and run the app under this account. In the future, you could throw in some advanced deco planning application into the same account, still separated from all the other applications.<br /><br />But, sorry, that would not work, because the X server doesn\'t provide isolation on the GUI-level. So, again, why should anybody bother creating any additional user accounts on a Linux Desktop? <br /><br />Windows Vista made a little step forward in this area by introducing integrity levels, that, at least theoretically, were supposed to prevent GUI applications from messing with each other. But they didn\'t scale well (IIRC there were just 3 or 4 integrity levels available), and it still isn\'t really clear if Microsoft treats them <a href="http://theinvisiblethings.blogspot.com/2007/02/vista-security-model-big-joke.html">seriously</a>.<br /><br />So, why do we have user accounts on Linux Desktops and Macs is beyond me (I guess Mac\'s X server doesn\'t implement any GUI-level isolation either - if I\'m wrong, please point me out to the appropriate reference)?<br /><br />And we haven\'t even touched the problems that might arise from the attacker exploiting a bug in the (over-complex) GUI server/API, or in the (big fat) kernel (with hundreds of drivers). In order for those attacks to become really interesting (like the Rafal\'s attack <a href="http://theinvisiblethings.blogspot.com/2010/08/skeletons-hidden-in-linux-closet.html">we presented yesterday</a>), the user would have to already be using e.g. different X servers (and switch between them using Ctrl-Shift-Fn), or some sandboxing mechanisms, such as SELinux sandbox, or, in case of Vista, a scheme similar to <a href="http://theinvisiblethings.blogspot.com/2007/02/running-vista-every-day.html">this one</a>.', 'guidislink': True, 'published': u'2010-08-19T21:55:00.004+02:00', u'thr_total': u'15', 'classifier': 'attacker exploiting'}
{'updated_parsed': time.struct_time(tm_year=2010, tm_mon=9, tm_mday=2, tm_hour=8, tm_min=37, tm_sec=50, tm_wday=3, tm_yday=245, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/2413818648032561083/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=2413818648032561083', 'type': u'text/html', 'rel': u'replies', 'title': u'29 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/2413818648032561083', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/2413818648032561083', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/08/skeletons-hidden-in-linux-closet.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Skeletons Hidden in the Linux Closet: r00ting your Linux Desktop for Fun and Profit'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-2413818648032561083', 'published_parsed': time.struct_time(tm_year=2010, tm_mon=8, tm_mday=17, tm_hour=15, tm_min=18, tm_sec=0, tm_wday=1, tm_yday=229, tm_isdst=0), 'title': u'Skeletons Hidden in the Linux Closet: r00ting your Linux Desktop for Fun and Profit', 'pred': u'security', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u'A couple of months ago, while working on Qubes GUI virtualization, Rafal has come up with an interesting privilege escalation attack on Linux (a user-to-root escalation), that exploits a bug in... well, actually it doesn\'t exploit any concrete bug, which makes it so much more interesting.The attack allows a (unpriviliged) user process that has access to the X server (so, any GUI application) to unconditionally escalate to root (but again, it doesn\'t take advantage of any bug in the X server!). In other words: any GUI application (think e.g. sandboxed PDF viewer), if compromised (e.g. via malicious PDF document) can bypass all the Linux fancy security mechanisms, and escalate to root, and compromise the whole system. The attack allows even to escape from the SELinux\'s "sandbox -X" jail. To make it worse, the attack has been possible for at least several years, most likely since the introduction of kernel 2.6.You can find the details of the attack, as well as the discussion of possible solutions, including the one that has eventually been implemented, in the Rafal\'s paper.One important aspect the attack demonstrates, is how difficult it is to bring security to a desktop platform, where one of the biggest challenges is to let applications talk to the GUI layer (e.g. X server in case of Linux), which usually involves a very fat GUI protocol (think X protocol, or Win32 GUI API) and a very complex GUI server, but at the same time keep things secure. This was one of the key priories for us when designing Qubes OS architecture. (So, we believe Qubes is much more secure than other sandboxing mechanisms, such as BSD jails, or SELinux-based sandboxes, because it not only eliminates kernel-level exploits, but also dramatically slims down GUI-level attacks).The kernel-level "patch" has been implemented last week by Linus Torvalds, and pushed upstream into recent stable kernels. RedHat has also released an advisory for this attack, where they rated its severity as "high".ps. Congrats to Brad Spengler for some good guessing :)', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'Skeletons Hidden in the Linux Closet: r00ting your Linux Desktop for Fun and Profit', 'language': None}, 'updated': u'2010-09-02T10:37:50.107+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'attack', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2010/08/skeletons-hidden-in-linux-closet.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'A couple of months ago, while working on Qubes GUI virtualization, Rafal has come up with an interesting privilege escalation attack on Linux (a user-to-root escalation), that exploits a bug in... well, actually it doesn\'t exploit any concrete bug, which makes it so much more interesting.<br /><br />The attack allows a (unpriviliged) user process that has access to the X server (so, any GUI application) to unconditionally escalate to root (but again, it doesn\'t take advantage of any bug in the X server!). In other words: any GUI application (think e.g. sandboxed PDF viewer), if compromised (e.g. via malicious PDF document) can bypass all the Linux fancy security mechanisms, and escalate to root, and compromise the whole system. The attack allows even to escape from the <a href="http://danwalsh.livejournal.com/31146.html">SELinux\'s "sandbox -X" jail</a>. To make it worse, the attack has been possible for at least several years, most likely since the introduction of kernel 2.6.<br /><br />You can find the details of the attack, as well as the discussion of possible solutions, including the one that has eventually been implemented, in the <a href="http://www.invisiblethingslab.com/resources/misc-2010/xorg-large-memory-attacks.pdf">Rafal\'s paper</a>.<br /><br />One important aspect the attack demonstrates, is how difficult it is to bring security to a desktop platform, where one of the biggest challenges is to let applications talk to the GUI layer (e.g. X server in case of Linux), which usually involves a very fat GUI protocol (think X protocol, or Win32 GUI API) and a very complex GUI server, but at the same time keep things secure. This was one of the key priories for us when designing Qubes OS architecture. (So, we believe Qubes is much more secure than other sandboxing mechanisms, such as BSD jails, or SELinux-based sandboxes, because it not only eliminates kernel-level exploits, but also dramatically slims down GUI-level attacks).<br /><br />The kernel-level "patch" has been <a href="http://git.kernel.org/?p=linux/kernel/git/stable/linux-2.6.35.y.git;a=commit;h=320b2b8de12698082609ebbc1a17165727f4c893">implemented last week</a> by Linus Torvalds, and pushed upstream into recent stable kernels. RedHat has also released an <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2010-2240">advisory</a> for this attack, where they rated its severity as "high".<br /><br />ps. Congrats to Brad Spengler for some <a href="http://grsecurity.net/%7Espender/64bit_dos.c">good guessing</a> :)', 'guidislink': True, 'published': u'2010-08-17T17:18:00.005+02:00', u'thr_total': u'29', 'classifier': 'malicious'}
{'updated_parsed': time.struct_time(tm_year=2010, tm_mon=7, tm_mday=9, tm_hour=16, tm_min=20, tm_sec=27, tm_wday=4, tm_yday=190, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/3468198659527144871/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=3468198659527144871', 'type': u'text/html', 'rel': u'replies', 'title': u'2 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3468198659527144871', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3468198659527144871', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/07/qubes-alpha-2-released.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Qubes Alpha 2 released!'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-3468198659527144871', 'published_parsed': time.struct_time(tm_year=2010, tm_mon=7, tm_mday=1, tm_hour=14, tm_min=16, tm_sec=0, tm_wday=3, tm_yday=182, tm_isdst=0), 'title': u'Qubes Alpha 2 released!', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u'The Alpha 2 is out!New screenshots are here :)', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'Qubes Alpha 2 released!', 'language': None}, 'updated': u'2010-07-09T18:20:27.132+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2010/07/qubes-alpha-2-released.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'The Alpha 2 is <a href="https://groups.google.com/group/qubes-devel/browse_thread/thread/673d3e339ae2f542">out</a>!<br />New screenshots are <a href="http://qubes-os.org/Screenshots.html">here</a> :)', 'guidislink': True, 'published': u'2010-07-01T16:16:00.004+02:00', u'thr_total': u'2', 'classifier': 'are here'}
{'updated_parsed': time.struct_time(tm_year=2010, tm_mon=6, tm_mday=18, tm_hour=13, tm_min=41, tm_sec=16, tm_wday=4, tm_yday=169, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7974469624652215569/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=7974469624652215569', 'type': u'text/html', 'rel': u'replies', 'title': u'19 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7974469624652215569', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7974469624652215569', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/06/disposable-vms.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Disposable VMs'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-7974469624652215569', 'published_parsed': time.struct_time(tm_year=2010, tm_mon=6, tm_mday=1, tm_hour=21, tm_min=41, tm_sec=0, tm_wday=1, tm_yday=152, tm_isdst=0), 'title': u'Disposable VMs', 'pred': u'security', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u'While we\'re still busy with some last few tickets left for Qubes Alpha 2 milestone, Rafal has already started working on a new feature for Qubes Beta 1: on Disposable VMs. I think this is really gonna be a killer feature, and I wanted to say a few words about it.Disposable VMs will be very lightweight VMs that can be created and booted in a very short time, say To understand why Disposable VMs are important, imagine the following situation -- you receive an email from a customer that contains a PDF attachment, say an invoice or a contract. Obviously you\'re opening and reading the message in an email client running in your "work" AppVM (or "work-email" AppVM, if you\'re paranoid), just because it is a work-related correspondence, arriving at your professional email address (for many reasons it is good to use different email addresses for job-related activities and for personal life).However, chances of somebody compromising your email client by just sending you a maliciously crafted message that would exploit your body or subject parsers are very small, if you have disabled full HTML parser for message bodies (which I think most security-concious people do anyway). Perhaps a more effective attack vector would be for somebody to 0wn your email server first, and then try to exploit IMAP/POP/SMTP protocol parser in your email client. But hey, in that case, they already would get access to all your emails on the corporate server, without exploiting your email client (well, they could however gain access to your PGP keys this way -- if this bothers you, you might want to use smartcards for PGP keys). There is also a possibility to do a Man-In-The-Middle attack and try to exploit SSL protocol early parsers, but this could be prevented using a separate VPN AppVM in Qubes.But now you would like to open this PDF that a customer just sent you. It\'s quite reasonable to be afraid that the PDF might be malicious and might try to exploit your PDF viewer, and then try to steal your emails or other things you keep in the "work" AppVM (or "work-email" AppVM). It doesn\'t matter if you trust the sender, as the sender\'s OS might very well be compromised by some malware and might be infecting all outgoing PDFs without the user consent.You could try opening the PDF in one of your non-sensitive VMs, e.g. the "random" VM that you use for causal Web browsing, to make sure that even if the PDF is malicious, that it won\'t get access to any sensitive data. But what if the PDF is not malicious, and what if it contains some confidential data? In that case you might throw the baby out with the bath water (your "random" VM might have been already compromised and now it would be able to steal the secrets from your PDF file).A disposable VM is an ideal solution here. You create a clean, disposable VM, just for the purpose of viewing the PDF. Then, once you\'re done, you just throw it away. If the PDF was malicious it could done harm only to its own disposable VM, that doesn\'t contain anything except... this very PDF. At the same time, the disposable VM is always started in a clean state, so there is no way somebody could steal the document. Only the document can steal itself :)That all sounds easy, but to make it practical we need a very efficient implementation of disposable VMs, and a good system integration, so the experience was seamless to the user. E.g. the user should only be required to right-click on a file and choose "Open in a Disposable VM", and Qubes should take care about everything else: creating the VM, starting it, copying the file to the VM, and starting a MIME-associated application for this type of file (e.g. PDF) in the VM. And this all in time below 1s!Basic support for Disposable VMs is planned for Beta 1, which is scheduled sometime at the end of the summer holidays. But I can tell that\'s just the beginning. The ultimate goal, from the user\'s point of view, would be to make Qubes OS to look and behave just like a regular mainstream OS like Linux, or Windows, or even Mac, but still with all the strong security that Qubes architecture provides, deployed behind the scene. Seamless support for Disposable VM is one of the first steps to achieve this goal.Special credits go to Matt Piotrowski, who just left Berkeley University, and whose recently published thesis was a direct inspiration to implement disposable VMs in Qubes. While we did mention "one-time" VMs in our architecture document back in January (see chapter 4.6), it really was Matt\'s paper that convinced me we should really have them in Qubes. Virtics, a proof-of-concept implementation written by Matt, shares lots of similarities with Qubes, like e.g. architecture and implementation of the GUI virtualiztion. There are also differences though, and I refer readers to the Matt\'s paper for more details.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'Disposable VMs', 'language': None}, 'updated': u'2010-06-18T15:41:16.836+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2010/06/disposable-vms.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'While we\'re still busy with some <a href="http://www.qubes-os.org/trac/report/3">last few tickets</a> left for Qubes Alpha 2 milestone, Rafal has already started working on a new feature for Qubes Beta 1: on Disposable VMs. I think this is really gonna be a killer feature, and I wanted to say a few words about it.<br /><br />Disposable VMs will be very lightweight VMs that can be created and booted in a very short time, say < 1s, with a sole purpose of hosting only one application, e.g. a PDF viewer, or a Media Player.<br /><br />To understand why Disposable VMs are important, imagine the following situation -- you receive an email from a customer that contains a PDF attachment, say an invoice or a contract. Obviously you\'re opening and reading the message in an email client running in your "work" AppVM (or "work-email" AppVM, if you\'re paranoid), just because it is a work-related correspondence, arriving at your professional email address (for many reasons it is good to use different email addresses for job-related activities and for personal life).<br /><br />However, chances of somebody compromising your email client by just sending you a maliciously crafted message that would exploit your body or subject parsers are very small, if you have disabled full HTML parser for message bodies (which I think most security-concious people do anyway). Perhaps a more effective attack vector would be for somebody to 0wn your email server first, and then try to exploit IMAP/POP/SMTP protocol parser in your email client. But hey, in that case, they already would get access to all your emails on the corporate server, without exploiting your email client (well, they could however gain access to your PGP keys this way -- if this bothers you, you might want to use smartcards for PGP keys). There is also a possibility to do a Man-In-The-Middle attack and try to exploit SSL protocol early parsers, but this could be prevented using a separate VPN AppVM in Qubes.<br /><br />But now you would like to open this PDF that a customer just sent you. It\'s quite reasonable to be afraid that the PDF might be malicious and might try to exploit your PDF viewer, and then try to steal your emails or other things you keep in the "work" AppVM (or "work-email" AppVM). It doesn\'t matter if you trust the sender, as the sender\'s OS might very well be compromised by some malware and might be infecting all outgoing PDFs without the user consent.<br /><br />You could try opening the PDF in one of your non-sensitive VMs, e.g. the "random" VM that you use for causal Web browsing, to make sure that even if the PDF is malicious, that it won\'t get access to any sensitive data. But what if the PDF is not malicious, and what if it contains some confidential data? In that case you might throw the baby out with the bath water (your "random" VM might have been already compromised and now it would be able to steal the secrets from your PDF file).<br /><br />A disposable VM is an ideal solution here. You create a clean, disposable VM, just for the purpose of viewing the PDF. Then, once you\'re done, you just throw it away. If the PDF was malicious it could done harm only to its own disposable VM, that doesn\'t contain anything except... this very PDF. At the same time, the disposable VM is always started in a clean state, so there is no way somebody could steal the document. Only the document can steal itself :)<br /><br />That all sounds easy, but to make it practical we need a very efficient implementation of disposable VMs, and a good system integration, so the experience was seamless to the user. E.g. the user should only be required to right-click on a file and choose "Open in a Disposable VM", and Qubes should take care about everything else: creating the VM, starting it, copying the file to the VM, and starting a MIME-associated application for this type of file (e.g. PDF) in the VM. And this all in time below 1s!<br /><br />Basic support for Disposable VMs is planned for Beta 1, which is scheduled sometime at the end of the summer holidays. But I can tell that\'s just the beginning. The ultimate goal, from the user\'s point of view, would be to make Qubes OS to look and behave just like a regular mainstream OS like Linux, or Windows, or even Mac, but still with all the strong security that Qubes architecture provides, deployed behind the scene. Seamless support for Disposable VM is one of the first steps to achieve this goal.<br /><br />Special credits go to Matt Piotrowski, who just left Berkeley University, and whose <a href="http://radlab.cs.berkeley.edu/wiki/Virtics">recently published thesis</a> was a direct inspiration to implement disposable VMs in Qubes. While we did mention "one-time" VMs in our <a href="http://qubes-os.org/files/doc/arch-spec-0.3.pdf">architecture document</a> back in January (see chapter 4.6), it really was Matt\'s paper that convinced me we should really have them in Qubes. Virtics, a proof-of-concept implementation written by Matt, shares lots of similarities with Qubes, like e.g. architecture and implementation of the GUI virtualiztion. There are also differences though, and I refer readers to the Matt\'s paper for more details.', 'guidislink': True, 'published': u'2010-06-01T23:41:00.004+02:00', u'thr_total': u'19', 'classifier': 'non-sensitive'}
{'updated_parsed': time.struct_time(tm_year=2010, tm_mon=6, tm_mday=1, tm_hour=22, tm_min=16, tm_sec=33, tm_wday=1, tm_yday=152, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/3538836128867543324/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=3538836128867543324', 'type': u'text/html', 'rel': u'replies', 'title': u'21 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3538836128867543324', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3538836128867543324', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/05/on-formally-verified-microkernels-and.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'On Formally Verified Microkernels (and on attacking them)'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-3538836128867543324', 'published_parsed': time.struct_time(tm_year=2010, tm_mon=5, tm_mday=3, tm_hour=14, tm_min=11, tm_sec=0, tm_wday=0, tm_yday=123, tm_isdst=0), 'title': u'On Formally Verified Microkernels (and on attacking them)', 'pred': u'announcements', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/html', 'value': u'Update May 14th, 2010: Gerwin Klein, a project lead for L4.verified, has posted some insightful comments. Also it\'s worth reading their website here that clearly explains what assumptions they make, and what they really prove, and what they don\'t.You must have heard about it before: formally verified microkernels that offer 100% security... Why don\'t we use such a microkernel in Qubes then? (The difference between a micro-kernel and a type I hypervisor is blurry. Especially in case of a type I hypervisor used for running para-virtualized VMs, such as Xen used in Qubes. So I would call Xen a micro-kernel in this case, although it can also run fully-virtualized VMs, in which case it should be called a hypervisor I think.)In order to formally prove some property of any piece of code, you need to first assume certain things. One such thing is the correctness of a compiler, so that you can be sure that all the properties you proved for the source code, still hold true for the binary generated from this source code. But let\'s say it\'s a feasible assumption -- we do have mature compilers indeed.Another important assumption you need, and this is especially important in proving kernels/microkernels/hypervisors, is the model of the hardware your kernel interacts with. Not necessarily all the hardware, but at least the CPU (e.g. MMU, mode transitions, etc) and the Chipset.While the CPUs are rather well understood today, and their architecture (we\'re talking IA32 here) doesn\'t change so dramatically from season to season. The chipsets, however, are a whole different story. If you take a spec for any modern chipset, let\'s say only the MCH part, the one closer to the processor (on Core i5/i7 even integrated on the same die), there are virtually hundreds of configuration registers there. Those registers are used for all sorts of different purposes -- they configure DRAM parameters, PCIe bridges, various system memory map characteristics (e.g. the memory reclaiming feature), access to the infamous SMM memory, and finally VT-d and TXT configuration.So, how are all those details modeled in microkernels formal verification process? Well, as far as I\'m aware, they are not! They are simply ignored. The nice way of saying this in academic papers is to say that "we trust the hardware". This, however, might be incorrectly understood by readers to mean "we don\'t consider physical attacks". But this is not equal! And I will give a practical example in a moment.I can bet that even the chipset manufactures (think e.g. Intel) do not have formal models for their chipsets (again, I will give a good example to support this thesis below).But why are the chipsets so important? Perhaps they are configured "safe by default" on power on, so even if we don\'t model all the configuration registers, and their effects on the system, and if we won\'t be playing with them, maybe it\'s safe to assume all will be fine then?Well, it might be that way, if we could have secure microkernels without IOMMU/VT-d and without some trusted boot mechanism.But we need IOMMU. Without IOMMU there is no security benefit of having a microkernel vs. having a good-old monolithic kernel. Let me repeat this statement again: there is no point in building a microkernel-based system, if we don\'t correctly use IOMMU to sandbox all the drivers.Now, setting up IOMMU/VT-d permissions require programming the chipset\'s registers, and is by no means a trivial task (see the the Intel VT-d spec to get an impression, if you don\'t believe me). Correctly setting up IOMMU is one of the most security-critical tasks to be done by a hypervisor/microkernel, and so it would be logical to expect that they also formally prove that this part is done flawlessly...The next thing is the trusted boot. I will argue that without proper trusted boot implementation, the system cannot be made secure. And I\'m not talking about physical attacks, like Evil Maid. I\'m talking about true, remote, software attacks. If you haven\'t read it already, please go back and read my very recent post on "Remotely Attacking Network Cards". Building on Loic\'s and Yves-Alexis\' recent research, I describe there a scenario how we could take their attack further to compromise even such a securely designed system as Qubes. And this could be possible, because of a flaw in TXT implementation. And, indeed, we demonstrated an attack on Intel Trusted Execution Technology that exploits one such flaw before.Let\'s quickly sketch the whole attack in points:The attacker attacks a flaw in the network card processing code (Loic and Yves-Alexis)The attacker replaces the NIC\'s firmware in EEPROM to survive the reboot (Loic and Yves-Alexis)The new firmware attacks the system trusted boot via a flaw in Intel TXT (ITL)If the system uses SRTM instead, it\'s even easier -- see the previous post (ITL)If you have new SINIT module that patched our attack, there is still an avenue to attack TXT via SMM (ITL)The microkernel/hypervisor gets compromised with a rootkit and the attacker gets full control over the system:oAnd this is the practical example I mentioned above. I\'m sure readers understand that this is just one example, of what could go wrong on the hardware level (and be reachable to a software-only attacker). Don\'t ignore hardware security! Even for software attacks!A good question to ask is: would a system with a formally verified microkernel also be vulnerable to such an attack? And the answer is yes! Yes, unless we could model and prove correctness of the whole chipset and the CPU. But nobody can do that today, because it is impossible to build such a model. If it was, I\'m pretty sure Intel would already have such a model and they would not release an SINIT module with this stupid implementation bug we found and exploited in our attack.So, we see an example of a practical attack that could be used to fully compromise a well designed system, even if it had a formally verified microkernel/hypervisor. Compromise it remotely, over the network!So, are all those whole microkernel/hypervisor formal verification attempts just a waste of time? Are they only good for academics so that they could write more papers for conferences? Or for some companies to use them in marketing?Perhaps the formal verification of system software will never be able to catch up with the pace of hardware development... By the time people will learn how to build models (and how to solve them) for hardware used today, the hardware manufactures, in the meantime, will present a few new generations of the hardware. For which the academics will need another 5 years to catch up, and so on.Perhaps the industry will take a different approach. Perhaps in the coming years we will get hardware that would allow us to create untrusted hypervisors/kernels that would not be able to read/write usermode pages (Hey Howard;)? This is currently not possible with the hardware we have, but, hey, why would a hypervisor need access to the Firefox pages?And how this all will affect Qubes? Well, the Qubes project is not about building a hypervisor or a microkernel. Qubes is about how to take a secure hypervisor/microkernel, and how to build the rest of the system in a secure, and easy to use, way, using the isolation properties that this hypervisor/microkernel is expected to provide. So, whatever kernels we will have in the future (better formally verified, e.g. including the hardware in the model), or based on some exciting new hardware features, still Qubes architecture would make perfect sense, I think.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=26&max-results=25', 'type': u'text/plain', 'value': u'On Formally Verified Microkernels (and on attacking them)', 'language': None}, 'updated': u'2010-06-02T00:16:33.712+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'formal verification', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'attack', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted computing', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'philosophical', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2010/05/on-formally-verified-microkernels-and.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'<small><b>Update May 14th, 2010:</b> Gerwin Klein, a project lead for L4.verified, has posted some <a href="http://theinvisiblethings.blogspot.com/2010/05/on-formally-verified-microkernels-and.html?showComment=1273715093988#c5446971095022574368">insightful</a> <a href="http://theinvisiblethings.blogspot.com/2010/05/on-formally-verified-microkernels-and.html?showComment=1273787941705#c5663920830714525309">comments</a>. Also it\'s worth reading their website <a href="http://ertos.nicta.com.au/research/l4.verified/proof.pml">here</a> that clearly explains what assumptions they make, and what they really prove, and what they don\'t.</small><br /><br />You must have heard about it before: formally verified microkernels that offer 100% security... Why don\'t we use such a microkernel in Qubes then? (The difference between a micro-kernel and a type I hypervisor is blurry. Especially in case of a type I hypervisor used for running para-virtualized VMs, such as Xen used in Qubes. So I would call Xen a micro-kernel in this case, although it can also run fully-virtualized VMs, in which case it should be called a hypervisor I think.)<br /><br />In order to formally prove some property of any piece of code, you need to first assume certain things. One such thing is the correctness of a compiler, so that you can be sure that all the properties you proved for the source code, still hold true for the binary generated from this source code. But let\'s say it\'s a feasible assumption -- we do have mature compilers indeed.<br /><br />Another important assumption you need, and this is especially important in proving kernels/microkernels/hypervisors, is the model of the hardware your kernel interacts with. Not necessarily all the hardware, but at least the CPU (e.g. MMU, mode transitions, etc) and the Chipset.<br /><br />While the CPUs are rather well understood today, and their architecture (we\'re talking IA32 here) doesn\'t change so dramatically from season to season. The chipsets, however, are a whole different story. If you take a spec for any modern chipset, let\'s say only the MCH part, the one closer to the processor (on Core i5/i7 even integrated on the same die), there are virtually hundreds of configuration registers there. Those registers are used for all sorts of different purposes -- they configure DRAM parameters, PCIe bridges, various system memory map characteristics (e.g. the memory reclaiming feature), access to the infamous SMM memory, and finally VT-d and TXT configuration.<br /><br />So, how are all those details modeled in microkernels formal verification process? Well, as far as I\'m aware, they are not! They are simply ignored. The nice way of saying this in academic papers is to say that "we trust the hardware". This, however, might be incorrectly understood by readers to mean "we don\'t consider physical attacks". But this is not equal! And I will give a practical example in a moment.<br /><br />I can bet that even the chipset manufactures (think e.g. Intel) do not have formal models for their chipsets (again, I will give a good example to support this thesis below).<br /><br />But why are the chipsets so important? Perhaps they are configured "safe by default" on power on, so even if we don\'t model all the configuration registers, and their effects on the system, and if we won\'t be playing with them, maybe it\'s safe to assume all will be fine then?<br /><br />Well, it might be that way, if we could have secure microkernels <span style="font-style: italic;">without</span> IOMMU/VT-d and <span style="font-style: italic;">without</span> some trusted boot mechanism.<br /><br />But we need IOMMU. Without IOMMU there is no security benefit of having a microkernel vs. having a good-old monolithic kernel. Let me repeat this statement again: there is no point in building a microkernel-based system, if we don\'t correctly use IOMMU to sandbox all the drivers.<br /><br />Now, setting up IOMMU/VT-d permissions require programming the chipset\'s registers, and is by no means a trivial task (see the the <a href="http://download.intel.com/technology/computing/vptech/Intel%28r%29_VT_for_Direct_IO.pdf">Intel VT-d spec</a> to get an impression, if you don\'t believe me). Correctly setting up IOMMU is one of the most security-critical tasks to be done by a hypervisor/microkernel, and so it would be logical to expect that they also formally prove that this part is done flawlessly...<br /><br />The next thing is the trusted boot. I will argue that without proper trusted boot implementation, the system cannot be made secure. And I\'m not talking about physical attacks, like Evil Maid. I\'m talking about true, remote, software attacks. If you haven\'t read it already, please go back and read my very recent post on <a href="http://theinvisiblethings.blogspot.com/2010/04/remotely-attacking-network-cards-or-why.html">"Remotely Attacking Network Cards"</a>. Building on Loic\'s and Yves-Alexis\' recent research, I describe there a scenario how we could take their attack further to compromise even such a securely designed system as Qubes. And this could be possible, because of a flaw in TXT implementation. And, indeed, we demonstrated an attack on Intel Trusted Execution Technology that exploits one such flaw before.<br /><br />Let\'s quickly sketch the whole attack in points:<ol><br /><li>The attacker attacks a flaw in the network card processing code (Loic and Yves-Alexis)</li><br /><li>The attacker replaces the NIC\'s firmware in EEPROM to survive the reboot (Loic and Yves-Alexis)</li><br /><li>The new firmware attacks the system trusted boot via a flaw in Intel TXT (ITL)</li><br /><ul><li>If the system uses SRTM instead, it\'s even easier -- see the previous post (ITL)</li><br /><li>If you have new SINIT module that patched our attack, there is still an avenue to attack TXT via SMM (ITL)</li></ul><br /><li>The microkernel/hypervisor gets compromised with a rootkit and the attacker gets full control over the system:o</li></ol><br />And this is the practical example I mentioned above. I\'m sure readers understand that this is just <span style="font-style: italic;">one</span> example, of what could go wrong on the hardware level (and be reachable to a software-only attacker). Don\'t ignore hardware security! Even for software attacks!<br /><br />A good question to ask is: would a system with a formally verified microkernel also be vulnerable to such an attack? And the answer is yes! Yes, unless we could model and prove correctness of the whole chipset and the CPU. But nobody can do that today, because it is impossible to build such a model. If it was, I\'m pretty sure Intel would already have such a model and they would not release an SINIT module with this stupid implementation bug we found and exploited in our attack.<br /><br />So, we see an example of a practical attack that could be used to fully compromise a well designed system, even if it had a formally verified microkernel/hypervisor. Compromise it remotely, over the network!<br /><br />So, are all those whole microkernel/hypervisor formal verification attempts just a waste of time? Are they only good for academics so that they could write more papers for conferences? Or for some <a href="http://www.ghs.com/products/rtos/integrity_virtualization.html">companies</a> to use them in marketing?<br /><br />Perhaps the formal verification of system software will never be able to catch up with the pace of hardware development... By the time people will learn how to build models (and how to solve them) for hardware used today, the hardware manufactures, in the meantime, will present a few new generations of the hardware. For which the academics will need another 5 years to catch up, and so on.<br /><br />Perhaps the industry will take a different approach. Perhaps in the coming years we will get hardware that would allow us to create untrusted hypervisors/kernels that would not be able to read/write usermode pages (Hey Howard;)? This is currently not possible with the hardware we have, but, hey, why would a hypervisor need access to the Firefox pages?<br /><br />And how this all will affect Qubes? Well, the Qubes project is <span style="font-style: italic;">not</span> about building a hypervisor or a microkernel. Qubes is about how to take a secure hypervisor/microkernel, and how to build the rest of the system in a secure, and easy to use, way, using the isolation properties that this hypervisor/microkernel is expected to provide. So, whatever kernels we will have in the future (better formally verified, e.g. including the hardware in the model), or based on some exciting new hardware features, still Qubes architecture would make perfect sense, I think.', 'guidislink': True, 'published': u'2010-05-03T16:11:00.005+02:00', u'thr_total': u'21', 'classifier': 'verification attempts'}
{'updated_parsed': time.struct_time(tm_year=2010, tm_mon=5, tm_mday=13, tm_hour=12, tm_min=26, tm_sec=25, tm_wday=3, tm_yday=133, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/4492075276448270781/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=4492075276448270781', 'type': u'text/html', 'rel': u'replies', 'title': u'3 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/4492075276448270781', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/4492075276448270781', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/05/evolution.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Evolution'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-4492075276448270781', 'published_parsed': time.struct_time(tm_year=2010, tm_mon=5, tm_mday=1, tm_hour=13, tm_min=45, tm_sec=0, tm_wday=5, tm_yday=121, tm_isdst=0), 'title': u'Evolution', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'If you have been following my research over the last several years (even in the days before ITL), you will undoubtedly notice how much I have changed the profile over that time...Several years ago, myself and Alex Tereshkin (who later became ITL employee #1), were known mostly as rootkit researchers. It was back in the days when the word "rootkit" was not as much well known as it is today (It became well known sometime in the late 2005, and I remember when I was applying for a US Visa that year, the immigration officer in the Warsaw embassy asked me what I did professionally and when I replied that I was a security researcher specializing in rootkits, he was very happy to tell me that he just read about those "rootkits" somewhere, although he was not very much worried about them, because he was a Mac user...)But then, in the coming years, we decided to explore other areas, like virtualization, trusted computing, chipset security, and even touched on the CPU security briefly. Many valuable contributions in those areas have come from Rafal Wojtczuk, who joined our team some two years ago.And then, finally, we became ready to actually build something meaningful. Not just yet another nonsense trivial-to-break "security product", but something that have had a potential to really improve user\'s security. And so, the Qubes project idea has been born, and soon it became ITL\'s highest priority project.So, these days we don\'t do any reverse engineering or malware analysis any more. We\'d rather design systems so they be immune to rootkits by design (e.g. by significant TCB reduction), rather then analyze each and every new rootkit sample caught in the wild and try to come up with a detector for it.Of course, this all doesn\'t mean we\'re giving up on our offensive research. There is still a chance you will hear about some new attacks from us. But this would surely be limited only to the attacks that we consider relevant in an environment that is already designed with security in mind, like Qubes :) So, e.g. an attack against VT-d, or some CPU exploit, or a Xen exploit, might be extremely interesting. But don\'t expect to see any research on how to e.g. compromise Windows 7 or Mac kernel or break out of their primitive sandboxes -- these systems are so badly designed from a security standpoint, that coming up with a yet-another attack against them makes little sense from a scientific point of view.Naturally, I\'m all excited about this all: that I\'ve been exploring new areas, and that my work has eventually started becoming meaningful. But that is, of course, only mine subjective opinion. Specifically, this turned out not be the case for Alex, who simply enjoys reverse engineering and compiler hacking just for the sake of doing it (Alex did some excellent job on metamorphic code generators, that are years ahead of what you can read at public conferences). Unfortunately, with the current new course we took at ITL, Alex started getting less and less chances to apply his skills, and faced a decision whether to stay at ITL and do other things, i.e. other than reversing or compiler hacking, or to quit and continue doing what he has always liked to do.The reader has probably figured out by now that Alex decided to quit ITL. I fully understand his decision and wish him all the best in his new adventures!You should still be able to reach Alex using his old ITL\'s email address (alex@), or directly via his new email: alex.tereshkin at gmail.com.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Evolution', 'language': None}, 'updated': u'2010-05-13T14:26:25.690+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'company news', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2010/05/evolution.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'If you have been following my research over the last several years (even in the days before ITL), you will undoubtedly notice how much I have changed the profile over that time...<br /><br />Several years ago, myself and Alex Tereshkin (who later became ITL employee #1), were known mostly as rootkit researchers. It was back in the days when the word "rootkit" was not as much well known as it is today (It became well known sometime in the late 2005, and I remember when I was applying for a US Visa that year, the immigration officer in the Warsaw embassy asked me what I did professionally and when I replied that I was a security researcher specializing in rootkits, he was very happy to tell me that he just read about those "rootkits" somewhere, although he was not very much worried about them, because he was a Mac user...)<br /><br />But then, in the coming years, we decided to explore other areas, like virtualization, trusted computing, chipset security, and even touched on the CPU security briefly. Many valuable contributions in those areas have come from Rafal Wojtczuk, who joined our team some two years ago.<br /><br />And then, finally, we became ready to actually build something meaningful. Not just yet another nonsense trivial-to-break "security product", but something that have had a potential to really improve user\'s security. And so, the Qubes project idea has been born, and soon it became ITL\'s highest priority project.<br /><br />So, these days we don\'t do any reverse engineering or malware analysis any more. We\'d rather design systems so they be immune to rootkits by design (e.g. by significant TCB reduction), rather then analyze each and every new rootkit sample caught in the wild and try to come up with a detector for it.<br /><br />Of course, this all doesn\'t mean we\'re giving up on our offensive research. There is still a chance you will hear about some new attacks from us. But this would surely be limited only to the attacks that we consider relevant in an environment that is already designed with security in mind, like Qubes :) So, e.g. an attack against VT-d, or some CPU exploit, or a Xen exploit, might be extremely interesting. But don\'t expect to see any research on how to e.g. compromise Windows 7 or Mac kernel or break out of their primitive sandboxes -- these systems are so badly designed from a security standpoint, that coming up with a yet-another attack against them makes little sense from a scientific point of view.<br /><br />Naturally, I\'m all excited about this all: that I\'ve been exploring new areas, and that my work has eventually started becoming meaningful. But that is, of course, only mine subjective opinion. Specifically, this turned out not be the case for Alex, who simply enjoys reverse engineering and compiler hacking just for the sake of doing it (Alex did some excellent job on metamorphic code generators, that are years ahead of what you can read at public conferences). Unfortunately, with the current new course we took at ITL, Alex started getting less and less chances to apply his skills, and faced a decision whether to stay at ITL and do other things, i.e. other than reversing or compiler hacking, or to quit and continue doing what he has always liked to do.<br /><br />The reader has probably figured out by now that Alex decided to quit ITL. I fully understand his decision and wish him all the best in his new adventures!<br /><br />You should still be able to reach Alex using his old ITL\'s email address (alex@), or directly via his new email: alex.tereshkin at gmail.com.', 'guidislink': True, 'published': u'2010-05-01T15:45:00.005+02:00', u'thr_total': u'3'}
{'updated_parsed': time.struct_time(tm_year=2010, tm_mon=5, tm_mday=13, tm_hour=12, tm_min=26, tm_sec=11, tm_wday=3, tm_yday=133, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/2572700386184621224/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=2572700386184621224', 'type': u'text/html', 'rel': u'replies', 'title': u'2 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/2572700386184621224', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/2572700386184621224', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/04/remotely-attacking-network-cards-or-why.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Remotely Attacking Network Cards (or why we do need VT-d and TXT)'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-2572700386184621224', 'published_parsed': time.struct_time(tm_year=2010, tm_mon=4, tm_mday=30, tm_hour=12, tm_min=3, tm_sec=0, tm_wday=4, tm_yday=120, tm_isdst=0), 'title': u'Remotely Attacking Network Cards (or why we do need VT-d and TXT)', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'I\'ve finally found some time to study Loic Duflot\'s and Yves-Alexis Perez\'s recent presentation from the last month on remotely attacking network cards. You can get the slides here.In short, they\'re exploiting a buffer overflow in the network card\'s firmware by sending malicious packets to the card, and then they gain full control over the card\'s firmware, so they can e.g. issue DMA to/from the host memory, effectively fully controlling the host (that\'s another example of "Ring -3 rootkit" I would say). The buffer overflow is in some exotic management protocol (that I think is disabled by default, but that\'s irrelevant) implemented by the NIC\'s firmware (the NIC has its own RISC processor, and memory, and stack, which they overflow, etc.).I like this research very much, because it demonstrates several important things:First, it shows that it is definitely a good idea to isolate/sandbox all the OS networking code using IOMMU/VT-d. And this is exactly what we do in Qubes.Second, the attack provides a real-world example of why Static Root for Trust Measurement (SRTM) is inferior to Dynamic RTM (DRTM), e.g. Intel TXT. To understand why, let\'s make the following assumptions:1) The OS/VMM properly uses IOMMU to isolate the network card(s), just like e.g. Qubes does.2) Once the attacker got control over the NIC firmware, the attacker can also modify the persistent storage (EEPROM) where this firmware is kept. This has been confirmed by Loic in a private email exchange.3) The system implements trusted boot via SRTM, i.e. using just BIOS and TPM, without Intel TXT.Now, the attacker can modify the firmware in the EEPROM and this will allow the attacker to survive the platform reboot. The card\'s firmware will start executing early in the boot process, definitely before the OS/VMM gets loaded. Now, the compromised NIC, because it is capable of doing DMA to the host memory, can compromise the image of the VMM in a short time window between the time it got measured and loaded by the (trusted) OS loader, e.g. Trusted GRUB, but still before the time VMM had a chance to setup proper IOMMU/VT-d protections for itself.Of course, in practice, it might be tricky for the compromised NIC firmware to precisely know this time window when it should send a compromising DMA write request. If the DMA was issued too early, then the trusted OS loader would calculate a wrong hash and put a wrong value into a PCR register, which would later prevent the system from completing the boot, and prevent the attack. If the DMA was issued too late, the IOMMU/VT-d protections would already be in-place, and the attack would again be unsuccessful. But, hey, much harder obstacles have been worked around by smart exploit writes in the past, so don\'t comfort yourself that the attack is hard. If it\'s possible, it means this technology is flawed, period.And this is where DRTM, AKA Intel TXT, shows its advantage over simple SRTM. When you load a hypervisor using TXT, the SENTER instruction would first apply the VT-d protections around the hypervsior image, then do the measurements, and only then load it, with VT-d protections still in-place. The above is the theory. A few months ago we demonstrated an attack against this scheme, but the attack was exploiting a flaw in the TXT implementation, not in its design, so it didn\'t render TXT useless as a technology.A much bigger problem with Intel TXT is, that Intel still has done nothing to prevent SMM-based attacks against TXT. This is what we demonstrated about 1.5 years(!) ago. Our research stressed that TXT without protection from SMM is essentially useless. Intel then promised to come up with a spec on how to write an STM, and how TXT should work with STM (when to measure/load it, etc), but nothing has been released by Intel for all this time AFAIK...Now, without STM (which is supposed to provide protection from potentially compromised SMM), the TXT cannot really prevent Loic and friends from owning the system, even if it uses such a securely designed OS as Qubes. This is because Loic would be able to modify e.g. the MBR while the system boots (thanks to DMA ability of the infected NIC firmware), and then attack an SMM from this MBR (I can bet lots of money Loic & co. would easily find a few other SMM exploits in any recent BIOS if they only wanted to), and then having infected the SMM, they will be able to compromise TXT-loaded hypervisor, and finally compromise the whole system.I know there are some people from various governments reading this blog. If you really want to have secure systems, consider pushing on Intel to finally do something about the SMM-based attacks against TXT. Beware, Intel will try to tell you that, using TXT LCP you can seal your secrets to only "trusted" SMM images and would try to convince you it\'s a way to prevent SMM attacks on TXT. It is not. Only true SMM sandboxing is a proper way to address this problem.Anyway, congrats to Loic and colleagues for yet another very interesting and meaningful system-level research!', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Remotely Attacking Network Cards (or why we do need VT-d and TXT)', 'language': None}, 'updated': u'2010-05-13T14:26:11.485+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'attack', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'tpm', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted execution technology', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted computing', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'fighting for a better world', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2010/04/remotely-attacking-network-cards-or-why.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'I\'ve finally found some time to study Loic Duflot\'s and Yves-Alexis Perez\'s recent presentation from the last month on remotely attacking network cards. You can get the slides <a href="http://www.ssi.gouv.fr/IMG/pdf/csw-trustnetworkcard.pdf">here</a>.<br /><br />In short, they\'re exploiting a buffer overflow in the network card\'s firmware by sending malicious packets to the card, and then they gain full control over the card\'s firmware, so they can e.g. issue DMA to/from the host memory, effectively fully controlling the host (that\'s another example of <a href="http://invisiblethingslab.com/resources/bh09usa/Ring%20-3%20Rootkits.pdf">"Ring -3 rootkit"</a> I would say). The buffer overflow is in some exotic management protocol (that I think is disabled by default, but that\'s irrelevant) implemented by the NIC\'s firmware (the NIC has its own RISC processor, and memory, and stack, which they overflow, etc.).<br /><br />I like this research very much, because it demonstrates several important things:<br /><br />First, it shows that it is definitely a good idea to isolate/sandbox all the OS networking code using IOMMU/VT-d. And this is exactly what we do in <a href="http://www.qubes-os.org/Architecture.html">Qubes</a>.<br /><br />Second, the attack provides a real-world example of why Static Root for Trust Measurement (SRTM) is inferior to Dynamic RTM (DRTM), e.g. Intel TXT. To understand why, let\'s make the following assumptions:<br />1) The OS/VMM properly uses IOMMU to isolate the network card(s), just like e.g. Qubes does.<br />2) Once the attacker got control over the NIC firmware, the attacker can also modify the persistent storage (EEPROM) where this firmware is kept. This has been confirmed by Loic in a private email exchange.<br />3) The system implements trusted boot via SRTM, i.e. using just BIOS and TPM, without Intel TXT.<br /><br />Now, the attacker can modify the firmware in the EEPROM and this will allow the attacker to survive the platform reboot. The card\'s firmware will start executing early in the boot process, definitely before the OS/VMM gets loaded. Now, the compromised NIC, because it is capable of doing DMA to the host memory, can compromise the image of the VMM in a short time window between the time it got measured and loaded by the (trusted) OS loader, e.g. Trusted GRUB, but still before the time VMM had a chance to setup proper IOMMU/VT-d protections for itself.<br /><br />Of course, in practice, it might be tricky for the compromised NIC firmware to precisely know this time window when it should send a compromising DMA write request. If the DMA was issued too early, then the trusted OS loader would calculate a wrong hash and put a wrong value into a PCR register, which would later prevent the system from completing the boot, and prevent the attack. If the DMA was issued too late, the IOMMU/VT-d protections would already be in-place, and the attack would again be unsuccessful. But, hey, much harder obstacles have been worked around by smart exploit writes in the past, so don\'t comfort yourself that the attack is hard. If it\'s possible, it means this technology is flawed, period.<br /><br />And this is where DRTM, AKA Intel TXT, shows its advantage over simple SRTM. When you load a hypervisor using TXT, the SENTER instruction would first apply the VT-d protections around the hypervsior image, then do the measurements, and only then load it, with VT-d protections still in-place. <br /><br />The above is the theory. A few months ago we demonstrated an <a href="http://invisiblethingslab.com/resources/misc09/Another%20TXT%20Attack.pdf">attack against this scheme</a>, but the attack was exploiting a flaw in the TXT implementation, not in its design, so it didn\'t render TXT useless as a technology.<br /><br />A much bigger problem with Intel TXT is, that Intel still has done nothing to prevent SMM-based attacks against TXT. This is what we <a href="http://invisiblethingslab.com/press/itl-press-2009-01.pdf">demonstrated</a> about 1.5 years(!) ago. Our research stressed that TXT without protection from SMM is essentially useless. Intel then promised to come up with a spec on how to write an STM, and how TXT should work with STM (when to measure/load it, etc), but nothing has been released by Intel for all this time AFAIK...<br /><br />Now, without STM (which is supposed to provide protection from potentially compromised SMM), the TXT cannot really prevent Loic and friends from owning the system, even if it uses such a securely designed OS as Qubes. This is because Loic would be able to modify e.g. the MBR while the system boots (thanks to DMA ability of the infected NIC firmware), and then attack an SMM from this MBR (I can bet lots of money Loic & co. would easily find a few other SMM exploits in any recent BIOS if they only wanted to), and then having infected the SMM, they will be able to compromise TXT-loaded hypervisor, and finally compromise the whole system.<br /><br />I know there are some people from various governments reading this blog. If you really want to have secure systems, consider pushing on Intel to finally do something about the SMM-based attacks against TXT. Beware, Intel will try to tell you that, using TXT LCP you can seal your secrets to only "trusted" SMM images and would try to convince you it\'s a way to prevent SMM attacks on TXT. It is not. Only true SMM sandboxing is a proper way to address this problem.<br /><br />Anyway, congrats to Loic and colleagues for yet another very interesting and meaningful system-level research!', 'guidislink': True, 'published': u'2010-04-30T14:03:00.005+02:00', u'thr_total': u'2'}
{'cprob': 1.0, 'updated': u'2010-04-07T18:26:47.527+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'announcements', 'updated_parsed': time.struct_time(tm_year=2010, tm_mon=4, tm_mday=7, tm_hour=16, tm_min=26, tm_sec=47, tm_wday=2, tm_yday=97, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2010, tm_mon=4, tm_mday=7, tm_hour=10, tm_min=58, tm_sec=0, tm_wday=2, tm_yday=97, tm_isdst=0), 'tags': [{'term': u'qubes', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'pred': 'announcements', 'title': u'Introducing Qubes OS', 'links': [{'href': u'https://www.blogger.com/feeds/24586388/posts/default/2192095913677180808', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/2192095913677180808', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/04/introducing-qubes-os.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Introducing Qubes OS'}], 'summary': u'For the last 6 months we have been busy with a new project: Qubes. Qubes is an open source OS based on Xen, X, and Linux, designed to provide strong isolation for desktop computing. The link to the project website is at the end of the post.<br /><br />The system is currently in the <span style="font-style: italic;">alpha</span> stage, but if you\'re determined it\'s actually usable. For example I have switched to Qubes around a month ago, and two weeks ago I even decided to wipe and reinstall my Mac Book, which used to be my primary laptop previously. Now I use my old Mac Book only for making the slides (Apple Keynote really has no competition) and Web page for Qubes :) And I use Qubes for pretty much all the other daily tasks, from work, shopping, banking, random browsing, to Qubes development itself (it takes part in the "qubes" AppVM).<br /><br />Just remember to make backups regularly if you decided to use Qubes for anything else than testing and development.<br /><br />So, enough of introduction, you will find lots of details (including a 40-page PDF describing the system architecture) at the Qubes project website. Enjoy!<br /><br /><span style="font-weight: bold;">Update 7-Apr-2010 15:56 CEST:</span> The server seems to be overloaded a bit by the traffic... If you are planning to install the OS, I guess it would be wise to postpone downloading the installation packages until later this week, when the first wave of visitors goes away.<br /><br /><span style="font-weight: bold;">Update 7-Apr-2010 16:31 CEST:</span> The Wiki doesn\'t work due to lack of free memory... Talking to my provider about buying some more RAM. Sorry for the inconvenience.<br /><br /><span style="font-weight: bold;">Update 7-Apr-2010 18:28 CEST:</span> The server has been brought offline for RAM upgrade. Should be back online in some 15 minutes...<br /><br /><div style="text-align: center;"><a href="http://qubes-os.org/">http://qubes-os.org</a><br /></div><br /><img alt="" border="0" src="http://www.qubes-os.org/files/logo/Qubes4.png" style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 214px; height: 82px;" />', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'For the last 6 months we have been busy with a new project: Qubes. Qubes is an open source OS based on Xen, X, and Linux, designed to provide strong isolation for desktop computing. The link to the project website is at the end of the post.The system is currently in the alpha stage, but if you\'re determined it\'s actually usable. For example I have switched to Qubes around a month ago, and two weeks ago I even decided to wipe and reinstall my Mac Book, which used to be my primary laptop previously. Now I use my old Mac Book only for making the slides (Apple Keynote really has no competition) and Web page for Qubes :) And I use Qubes for pretty much all the other daily tasks, from work, shopping, banking, random browsing, to Qubes development itself (it takes part in the "qubes" AppVM).Just remember to make backups regularly if you decided to use Qubes for anything else than testing and development.So, enough of introduction, you will find lots of details (including a 40-page PDF describing the system architecture) at the Qubes project website. Enjoy!Update 7-Apr-2010 15:56 CEST: The server seems to be overloaded a bit by the traffic... If you are planning to install the OS, I guess it would be wise to postpone downloading the installation packages until later this week, when the first wave of visitors goes away.Update 7-Apr-2010 16:31 CEST: The Wiki doesn\'t work due to lack of free memory... Talking to my provider about buying some more RAM. Sorry for the inconvenience.Update 7-Apr-2010 18:28 CEST: The server has been brought offline for RAM upgrade. Should be back online in some 15 minutes...http://qubes-os.org', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Introducing Qubes OS', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2010/04/introducing-qubes-os.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2010-04-07T12:58:00.008+02:00', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-2192095913677180808'}
{'updated_parsed': time.struct_time(tm_year=2010, tm_mon=1, tm_mday=19, tm_hour=11, tm_min=0, tm_sec=41, tm_wday=1, tm_yday=19, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/4462141036719440454/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=4462141036719440454', 'type': u'text/html', 'rel': u'replies', 'title': u'6 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/4462141036719440454', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/4462141036719440454', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2010/01/priorities.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Priorities'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-4462141036719440454', 'published_parsed': time.struct_time(tm_year=2010, tm_mon=1, tm_mday=16, tm_hour=11, tm_min=25, tm_sec=0, tm_wday=5, tm_yday=16, tm_isdst=0), 'title': u'Priorities', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u"It's interesting how many people don't realize what are the priorities in computer security... There are many fields to secure: server security, web applications security, network security, and finally desktop security. Over the last years I met SO many people that always expressed surprise why I would like to focus on desktop systems security? They usually argue that today, as everybody knows, it is the Network that is what computing is all about and that we should focus on securing infrastructure, and forget about the desktops, which are always to be insecure. The network is the computer, as somebody said.What those people forget about, is that it is always the desktop that ultimately gets access to all the user's secretes -- all the passwords, all the keys, all the corporate documents, all the nude holiday pictures, all the secret love letters, all the credit card numbers, and many more.However secure were all the services (remote servers and network protocols) that we use, if our desktop gets compromised it's all lost. The recent incident with Google is just yet another example of that. Our desktop systems are the most crucial piece of the whole puzzle.It's funny how many people think that by using some thin client solution on their desktops they can solve the problem. Of course they cannot! Just the fact that your OS executes on a server, rather then on your hardware, doesn't make it any less prone to all the attacks that were otherwise possible when the software executed on your system.The attempts to secure desktops have been failing for so many years. While recently there is some attempt to minimize likelihood of remote attacks via Web browsers (or generally to focus on application security), this is still just the tip of the iceberg -- there are so many other attack avenue that none of the popular OSes even tries to address, that I consider myself a brave person (not to say stupid) that I actually use my laptop everyday and keep some sensitive information on it ;)Ok, so that's a nice piece of complaining you say, but what are we, at ITL, gonna do about it? Well, we just gonna sit and patiently wait for better OSes to appear some day... Oh, hell, we won't!Happy New Year :)&#60;please ignore&#62;9933 F096 8820 0E23 1AF4  078D 8BDB D97D BDEA 9E9D&#60;/&#62;", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Priorities', 'language': None}, 'updated': u'2010-01-19T12:00:41.155+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'fighting for a better world', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2010/01/priorities.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'It\u2019s interesting how many people don\u2019t realize what are the priorities in computer security... There are many fields to secure: server security, web applications security, network security, and finally desktop security. Over the last years I met SO many people that always expressed surprise why I would like to focus on desktop systems security? They usually argue that today, as everybody knows, it is the Network that is what computing is all about and that we should focus on securing infrastructure, and forget about the desktops, which are always to be insecure. The network is the computer, as somebody said.<br /><br />What those people forget about, is that it is always the desktop that ultimately gets access to all the user\u2019s secretes -- all the passwords, all the keys, all the corporate documents, all the nude holiday pictures, all the secret love letters, all the credit card numbers, and many more.<br /><br />However secure were all the services (remote servers and network protocols) that we use, if our desktop gets compromised it\u2019s all lost. The <a href="http://googleblog.blogspot.com/2010/01/new-approach-to-china.html">recent incident with Google</a> is just yet another example of that. Our desktop systems are the most crucial piece of the whole puzzle.<br /><br />It\u2019s funny how many people think that by using some thin client solution on their desktops they can solve the problem. Of course they cannot! Just the fact that your OS executes on a server, rather then on your hardware, doesn\u2019t make it any less prone to all the attacks that were otherwise possible when the software executed on your system.<br /><br />The attempts to secure desktops have been failing for so many years. While recently there is some attempt to minimize likelihood of remote attacks via Web browsers (or generally to focus on application security), this is still just the tip of the iceberg -- there are so many other attack avenue that none of the popular OSes even tries to address, that I consider myself a brave person (not to say stupid) that I actually use my laptop everyday and keep some sensitive information on it ;)<br /><br />Ok, so that\u2019s a nice piece of complaining you say, but what are we, at <a href="http://invisiblethingslab.com/itl/Resources.html">ITL</a>, gonna do about it? Well, we just gonna sit and patiently wait for better OSes to appear some day... Oh, hell, we won\u2019t!<br /><br />Happy New Year :)<br /><code><br />&#60;please ignore&#62;<br />9933 F096 8820 0E23 1AF4  078D 8BDB D97D BDEA 9E9D<br />&#60;/&#62;<br /></code>', 'guidislink': True, 'published': u'2010-01-16T12:25:00.004+01:00', u'thr_total': u'6'}
{'updated_parsed': time.struct_time(tm_year=2010, tm_mon=1, tm_mday=16, tm_hour=11, tm_min=25, tm_sec=46, tm_wday=5, tm_yday=16, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7396711639241642204/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=7396711639241642204', 'type': u'text/html', 'rel': u'replies', 'title': u'4 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7396711639241642204', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7396711639241642204', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/12/another-txt-attack.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Another TXT Attack'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-7396711639241642204', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=12, tm_mday=21, tm_hour=18, tm_min=11, tm_sec=0, tm_wday=0, tm_yday=355, tm_isdst=0), 'title': u'Another TXT Attack', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u"Earlier this year our team has presented an attack against Intel TXT that exploited a design problem with SMM mode being over privileged on PC platforms and able to interfere with the SENTER instruction. The Intel response was two-fold: to patch the SMM implementation bugs we used for the attack (this patch was for both the NVACPI SMM attacks, as well as for the SMM caching attack), and also to start (intensify?) working on STM specification, that is, we heard, planned to be published sometime in the near future. STM is a thin hypervisor concept that is supposed to provide protection against (potentially) malicious SMMs.Today we present a totally different attack that allows an attacker to trick the SENTER instruction into misconfiguring the VT-d engine, so that it doesn't protect the newly loaded hypervisor or kernel. This attack exploits an implementation flaw in a SINIT AC module. This new attack also allows for full TXT circumvention, using a software-only attack. This attack doesn't require any SMM bugs to succeed and is totally independent from the previous one.The press release is here.The full paper is here.The advisory published by Intel today can be found here.Enjoy.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Another TXT Attack', 'language': None}, 'updated': u'2010-01-16T12:25:46.578+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'attack', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted execution technology', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted computing', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'exploit', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/12/another-txt-attack.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://4.bp.blogspot.com/_Ti3q3Hdvels/Sy-7Sx0fLlI/AAAAAAAAAGA/MvXTpW6ZTTQ/s72-c/broken+chain.jpg', 'width': u'72', 'height': u'72'}], 'summary': u'<img alt="" border="0" id="BLOGGER_PHOTO_ID_5417754808035520082" src="http://4.bp.blogspot.com/_Ti3q3Hdvels/Sy-7Sx0fLlI/AAAAAAAAAGA/MvXTpW6ZTTQ/s200/broken+chain.jpg" style="float: right; margin: 0 0 10px 10px; cursor: pointer; cursor: hand; width: 200px; height: 148px;" />Earlier this year our team has <a href="http://invisiblethingslab.com/press/itl-press-2009-02.pdf">presented</a> an attack against Intel TXT that exploited a design problem with SMM mode being over privileged on PC platforms and able to interfere with the SENTER instruction. The Intel response was two-fold: to <a href="http://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00018&amp;languageid=en-fr">patch</a> the SMM implementation bugs we used for the attack (this patch was for both the NVACPI SMM attacks, as well as for the <a href="http://theinvisiblethings.blogspot.com/2009/03/attacking-smm-memory-via-intel-cpu.html">SMM caching attack</a>), and also to start (intensify?) working on STM specification, that is, we heard, planned to be published sometime in the near future. STM is a thin hypervisor concept that is supposed to provide protection against (potentially) malicious SMMs.<br /><br />Today we present a totally different attack that allows an attacker to trick the SENTER instruction into misconfiguring the VT-d engine, so that it doesn\u2019t protect the newly loaded hypervisor or kernel. This attack exploits an implementation flaw in a SINIT AC module. This new attack also allows for full TXT circumvention, using a software-only attack. This attack doesn\'t require any SMM bugs to succeed and is totally independent from the previous one.<br /><br />The press release is <a href="http://invisiblethingslab.com/press/itl-press-2009-04.pdf">here</a>.<br /><br />The full paper is <a href="http://invisiblethingslab.com/resources/misc09/Another%20TXT%20Attack.pdf">here</a>.<br /><br />The advisory published by Intel today can be found <a href="http://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00021&amp;languageid=en-fr">here</a>.<br /><br />Enjoy.', 'guidislink': True, 'published': u'2009-12-21T19:11:00.005+01:00', u'thr_total': u'4'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=11, tm_mday=3, tm_hour=0, tm_min=2, tm_sec=54, tm_wday=1, tm_yday=307, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/1384385046456881063/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=1384385046456881063', 'type': u'text/html', 'rel': u'replies', 'title': u'55 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1384385046456881063', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1384385046456881063', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/10/evil-maid-goes-after-truecrypt.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Evil Maid goes after TrueCrypt!'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-1384385046456881063', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=10, tm_mday=15, tm_hour=22, tm_min=30, tm_sec=0, tm_wday=3, tm_yday=288, tm_isdst=0), 'title': u'Evil Maid goes after TrueCrypt!', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'From time to time it\'s good to take a break from all the ultra-low-level stuff, like e.g. chipset or TXT hacking, and do something simple, yet still important. Recently Alex Tereshkin and I got some spare time and we implemented the Evil Maid Attack against TrueCrypt system disk encryption in a form of a small bootable USB stick image that allows to perform the attack in an easy plug-and-play way. The whole infection process takes about 1 minute, and it\'s well suited to be used by hotel maids.The AttackLet\'s quickly recap the Evil Maid Attack. The scenario we consider is when somebody left an encrypted laptop e.g. in a hotel room. Let\'s assume the laptop uses full disk encryption like e.g. this provided by TrueCrypt or PGP Whole Disk Encryption.Many people believe, including some well known security experts, that it is advisable to fully power down your laptop when you use full disk encryption in order to prevent attacks via FireWire/PCMCIA or Coldboot attacks.So, let\'s assume we have a reasonably paranoid user, that uses full disk encryption on his or her laptop, and also powers it down every time they leave it alone in a hotel room, or somewhere else.Now, this is where our Evil Maid stick comes into play. All the attacker needs to do is to sneak into the user\'s hotel room and boot the laptop from the Evil Maid USB Stick. After some 1-2 minutes, the target laptop\'s gets infected with Evil Maid Sniffer that will record the disk encryption passphrase when the user enters it next time. As any smart user might have guessed already, this part is ideally suited to be performed by hotel maids, or people pretending to be them.So, after our victim gets back to the hotel room and powers up his or her laptop, the passphrase will be recorded and e.g. stored somewhere on the disk, or maybe transmitted over the network (not implemented in current version).Now we can safely steal/confiscate the user\'s laptop, as we know how to decrypt it. End of story.Quick StartDownload the USB image here. In order to burn the Evil Maid use the following commands on Linux (you need to be root to do dd):dd if=evilmaidusb.img of=/dev/sdXWhere /dev/sdX should be replaced with the device representing your USB stick, e.g. /dev/sdb. Please be careful, as choosing a wrong device might result in damaging your hard disk or other media! Also, make sure to use the device representing the whole disk (e.g. /dev/sdb), rather than a disk partition (e.g. /dev/sdb1).On Windows you would need to get a dd-like program, e.g. this one, and the command would look more or less like this one (depending on the actual dd implementation you use):dd if=evilmaidusb.img of=\\\\?\\Device\\HarddiskX\\Partition0 bs=1Mwhere HarddiskX should be replaced with the actual device the represents your stick.After preparing the Evil Maid USB stick, you\'re ready to test it against some TrueCrypt-encrypted laptop (more technically: a laptop that uses TrueCrypt system disk encryption). Just boot the laptop from the stick, confirm you want to run the tool (press \u2018E\') and the TrueCrypt loader on your laptop should be infected.Now, Evil Maid will be logging the passphrases provided during the boot time. To retrieve the recorded passphrase just boot again from the Evil Maid USB -- it should detect that the target is already infected and display the sniffed password.The current implementation of Evil Maid always stores the last passphrase entered, assuming this is the correct one, in case the user entered the passphrase incorrectly at earlier attempts.NOTE: It\'s probably illegal to use Evil Maid to obtain password from other people without their consent. You should always obtain permission from other people before testing Evil Maid against their laptops!CAUTION: The provided USB image and source code should be considered proof-of-concept only. Use this code at your own risk, and never run it against a production system. Invisible Things Lab cannot be held responsible for any potential damages this code or its derivates might cause.How the Evil Maid USB worksThe provided implementation is extremely simple. It first reads the first 63 sectors of the primary disk (/dev/sda) and checks (looking at the first sector) if the code there looks like a valid TrueCrypt loader. If it does, the rest of the code is unpacked (using gzip) and hooked. Evil Maid hooks the TC\'s function that asks user for the passphrase, so that the hook records whatever passphrase is provided to this function. We also take care about adjusting some fields in the MBR,  like the boot loader size and its checksum. After the hooking is done, the loader is packed again and written back to the disk.You can get the source code for the Evil Maid infector here.Possible WorkaroundsSo, how should we protect against such Evil Maid attacks? There are a few approaches...1. Protect your laptop when you leave it aloneSeveral months ago I had a discussion with one of the TrueCrypt developers about possible means of preventing the Evil Maid Attack, perhaps using TPM (see below). Our dialog went like this (reproduced here with permission from the TrueCrypt developer):TrueCrypt Developer: We generally disregard "janitor" attacks since they inherently make the machine untrusted. We never consider the feasibility of hardware attacks; we simply have to assume the worst. After an attacker has "worked" with your hardware, you have to stop using it for sensitive data. It is impossible for TPM to prevent hardware attacks (for example, using hardware key loggers, which are readily available to average Joe users in computer shops, etc.)Joanna Rutkowska: And how can you determine that the attacker have or have not  "worked" with your hardware? Do you carry your laptop with you all the time?TrueCrypt Developer: Given the scope of our product, how the user ensures physical security is not our problem. Anyway, to answer your question (as a side note), you could use e.g. a proper safety case with a proper lock (or, when you cannot have it with you, store it in a good strongbox). Joanna Rutkowska:  If I could arrange for a proper lock or an impenetrable strongbox, then why in the world should I need encryption?TrueCrypt Developer: Your question was: "And how can you determine that the attacker has or has not worked with your hardware?" My answer was a good safety case or strongbox with a good lock. If you use it, then you will notice that the attacker has accessed your notebook inside (as the case or strongbox will be damaged and it cannot be replaced because you had the correct key with you). If the safety case or strongbox can be opened without getting damaged &amp; unusable, then it\'s not a good safety case or strongbox. ;-)That\'s a fair point, but this means that for the security of our data we must relay on the infeasibility to open our strongbox lock in a "clean" way, i.e. without visually damaging it. Plus it means we need to carry a good strongbox with us to any travel we go. I think we need a better solution...Note that TrueCrypt authors do mention the possibility of physical attacks in the  documentation:If an attacker can physically access the computer hardware and you use it after the attacker has physically accessed it, then TrueCrypt may become unable to secure data on the computer. This is because the attacker may modify the hardware or attach a malicious hardware component to it (such as a hardware keystroke logger) that will capture the password or encryption key (e.g. when you mount a TrueCrypt volume) or otherwise compromise the security of the computer.However, they do not explicitly warn users of a possibility of something as simple and cheap as the Evil Maid Attack. Sure, they write "or otherwise compromise the security of the computer", which does indeed cover e.g. the Evil Maid Attack, but my bet is that very few users would realize what it really means. The examples of physical attacks given in the documentation, e.g. modifying the hardware or attaching a malicious hardware, is something that most users would disregard as too expensive an attack to be afraid of. But note that our Evil Maid attack is an example of a physical attack, that doesn\'t require any hardware modification and is extremely cheap.Of course it is a valid point, that if we allow a possibility of a physical attack, then the attacker can e.g. install a hardware keylogger. But doing that is really not so easy as we discuss in the next paragraph. On the other hand, spending two minutes to boot the machine from an Evil Maid USB stick is just trivial and is very cheap (the price of the USB stick, plus the tip for the maid).2. The Trusted Computing ApproachAs explained a few months ago on this blog, a reasonably good solution against Evil Maid attack seems to be to take advantage of either static or dynamic root of trust offered by TPM. The first approach (SRTM) is what has been implemented in Vista Bitlocker. However Bitlocker doesn\'t try to authenticate to the user (e.g. via displaying a custom picture shot by the user, with the picture decrypted using a key unsealed from a TPM), so it\'s still possible to create a similar attack against Bitlocker, but with a bit different user experience. Namely the Evil Maid for Bitlocker would have to display a fake Bitlocker prompt (that could be identical to the real Bitlocker prompt), but after obtaining a correct password from the user Evil Maid would not be able to pass the execution to the real Bitlocker code, as the SRTM chain will be broken. Instead, Evil Maid would have to pretend that the password was wrong, uninstall itself, and then reboot the platform. Thus, a Bitlocker user that is confident that he or she entered the correct password, but the OS didn\'t boot correctly, should destroy the laptop.The dynamic root of trust approach (DRTM) is possible thanks to Intel TXT technology, but currently there is no full disk encryption software that would make use of it. One can try to implement it using Intel\'s tboot and some Linux disk encryption, e.g. LUKS.Please also note that even if we assume somebody cracked the TPM chip (e.g. using an electron microscope, or NSA backdoor), that doesn\'t mean this person can automatically get access to the encrypted disk contents. This is not the case, as the TPM is used only for ensuring trusted boot. After cracking the TPM, the attacker would still have to mount an Evil Maid attack in order to obtain the passphrase or key. Without TPM this attack is always possible.Are those trusted computing-based approaches 100% foolproof? Of course not. As signalized in the previous paragraph, if an attacker was able to mount a hardware-based keylogger into your laptop (which is non-trivial, but possible), then the attacker would be able to capture your passphrase regardless of the trusted boot. A user can prevent such an attack by using two-factor authentication (RSA challenge-response implemented in a USB token) or e.g. one-time passwords, so that there is no benefit for the attacker to capture the keystrokes. But the attacker might go to the extreme and e.g. replace the DRAM, or even the CPU with malicious DRAM or CPU that would sniff and store the decryption key for later access. We\'re talking here about attack that very few entities can probably afford (think NSA), but nevertheless they are theoretically possible. (Note that an attack with inserting a malicious PCI device that would try to sniff the key using DMA can be prevented using TXT+VT-d technology).However, just because the NSA can theoretically replace your CPU with a malicious one, doesn\'t mean TPM-based solutions are useless. As for the great majority of other people that do not happen to be on the Terrorist Top 10, these represent a reasonable solution that could prevent Evil Maid attacks, and, when combined with a proper two-factor authentication, also simple hardware based attacks, e.g. keylogger, cameras, remote keystroke sniffing using laser, etc. I really cannot think of a more reasonable solution here.3. The Poor Man\'s SolutionPersonally I would love to see TrueCrypt implementing TPM-based trusted boot for its loader, but, well, what can I do? Keep bothering TrueCrypt developers with Evil Maid attacks and hope they will eventually consider implementing TPM support...So, in the meantime we have come up with a temporary poor man\'s solution that we use at our lab. We call it Disk Hasher. It\'s a bootable Linux-based USB stick that can be configured in quite a flexible way to calculate hashes of selected disk sectors and partitions. The correct hashes are stored also on the stick (of course everything is encrypted with a custom laptop-specific passphrase). We use this stick to verify the unencrypted portions of our laptops (typically the first 63 sectors of sda, and also the whole /boot partition in case of Linux-based laptops where we use LUKS/dm-crypt).Of course there are many problems with such a solution. E.g. somebody who can get access to my Disk Hasher USB (e.g. when I\'m in a swimming pool), can infect it in such a way that it would report correct hashes, even though the disk of my laptop would be evilmaided...Another problem with Disk Hasher solution is that it only looks at the disk, but cannot validate e.g. the BIOS. So if the attacker found a way to bypass the BIOS reflashing protection on my laptop, then he or she can install a rootkit there that would sniff my passphrase or the decryption key (in case I used one time passwords).Nevertheless, our Disk Hasher stick seems like a reasonable solution and we use it often internally at ITL to validate our laptops. In fact this is the most we can do, if we want to use TrueCrypt, PGP WDE, or LUKS/dm-crypt.FAQQ: Is this Evil Maid Attack some l33t new h4ck?Nope, the concept behind the Evil Maid Attack is neither new, nor l33t in any way.Q: So, why did you write it?Because we believe it demonstrates an important problem, and we would like more attention to be paid in the industry to solving it.Q: I\'m using two-factor authentication, am I protected against EM?While a two-factor authentication or one time passwords are generally a good idea (e.g. they can prevent various keylogger attacks), they alone do not provide protection from Evil Maid-like attacks, because the attacker might modify his or her sniffer to look for the final decryption key (that would be calculated after the 2-factor authentication completes).Q: How is Evil Maid different from Stoned-Bootkit?The Stoned Bootkit, released a few months ago by an individual describing himself as Software Dev. Guru in Vienna, is also claimed to be capable of "bypassing TrueCrypt", which we take to mean a capability to sniff TC\'s passphrases or keys. Still, the biggest difference between Stoned Bootkit and Evil Maid USB is that in case of our attack you don\'t need to start the victim\'s OS in order to install Evil Maid, all you need to do is to boot from a USB stick, wait about 1 minute for the minimal Linux to start, and then press \u2018E\', wait some 2 more seconds, and you\'re done. With the Stoned Bootkit, according to the author\'s description, you need to get admin access to the target OS in order to install it, so you either need to know the Windows admin password first, or use some exploit to get the installer executing on the target OS. Alternatively, you can install it from a bootable Windows CD, but this, according to the author, works only against unencrypted volumes, so no use in case of TrueCrypt compromise.Q: I\'ve disabled boot from USB in BIOS and my BIOS is password protected, am I protected against EM?No. Taking out your HDD, hooking it up to a USB enclosure case and later installing it back to your laptop increases the attack time by some 5-15 minutes at most. A maid has to carry her own laptop to do this though.Q: What about using a HDD with built-in hardware-based encryption?We haven\'t tested such encryption systems, so we don\'t know. There are many open questions here: how is the passphrase obtained from the user? Using software stored on the disk or in the BIOS? If on the disk, is this portion of disk made read-only? If so, does it mean it is non-updatable? Even if it is truly read-only, if the attacker can reflash the BIOS, then he or she can install a passphrase sniffer there in the BIOS. Of course that would make the attack non-trivial and much more expensive than the original Evil Maid USB we presented here.Q: Which TrueCrypt versions are supported by the current Evil Maid USB?We have tested our Evil Maid USB against TrueCrypt versions 6.0a - 6.2a (the latest version currently available). Of course, if the shape of the TrueCrypt loader changed dramatically in the future, then Evil Maid USB would require updating.Q: Why did you choose TrueCrypt and not some other product?Because we believe TrueCrypt is a great product, we use it often in our lab, and we would love to see it getting some better protection against such attacks.Q: Why there is no TPM support in TrueCrypt?The TrueCrypt Foundation published official generalized response to TPM-related feature requests here.Acknowledgments Thanks to the ennead@truecrypt.org for all the polemics we had which allowed me to better gather my thoughts on the topic. The same thanks to Alex and Rafal, for all the polemics I have had with them (it\'s customary for ITL to spend a lot of time finding bugs in each other\'s reasoning).', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Evil Maid goes after TrueCrypt!', 'language': None}, 'updated': u'2009-11-03T01:02:54.209+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'disk encryption', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'attack', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'tpm', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted computing', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'fighting for a better world', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/10/evil-maid-goes-after-truecrypt.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://2.bp.blogspot.com/_Ti3q3Hdvels/Stdj6EwsmvI/AAAAAAAAAFg/eVbBLzSlq-E/s72-c/evil+maid.jpg', 'width': u'72', 'height': u'72'}], 'summary': u'From time to time it\u2019s good to take a break from all the ultra-low-level stuff, like e.g. chipset or TXT hacking, and do something simple, yet still important. Recently <span style="font-weight: bold;">Alex Tereshkin</span> and I got some spare time and we implemented the <a href="http://theinvisiblethings.blogspot.com/2009/01/why-do-i-miss-microsoft-bitlocker.html">Evil Maid Attack</a> against TrueCrypt system disk encryption in a form of a small bootable USB stick image that allows to perform the attack in an easy \u201cplug-and-play\u201d way. The whole infection process takes about 1 minute, and it\u2019s well suited to be used by hotel maids.<br /><br /><span style="font-weight: bold; font-size: 130%;">The Attack</span><br />Let\u2019s quickly recap the Evil Maid Attack. The scenario we consider is when somebody left an encrypted laptop e.g. in a hotel room. Let\u2019s assume the laptop uses full disk encryption like e.g. this provided by <a href="http://www.truecrypt.org/">TrueCrypt </a>or <a href="http://www.pgp.com/products/wholediskencryption/index.html">PGP Whole Disk Encryption</a>.<br /><br />Many people believe, including some well known <a href="http://citp.princeton.edu/memory/faq/">security</a> <a href="http://www.tomshardware.com/reviews/dino-dai-zovi,2260-5.html">experts</a>, that it is advisable to fully power down your laptop when you use full disk encryption in order to prevent attacks via FireWire/<a href="http://theinvisiblethings.blogspot.com/2009/05/thoughts-about-trusted-computing.html">PCMCIA </a>or <a href="http://citp.princeton.edu/memory/">\u201dColdboot\u201d attacks</a>.<br /><br />So, let\u2019s assume we have a reasonably paranoid user, that uses full disk encryption on his or her laptop, and also powers it down every time they leave it alone in a hotel room, or somewhere else.<br /><br />Now, this is where our Evil Maid stick comes into play. All the attacker needs to do is to sneak into the user\u2019s hotel room and boot the laptop from the Evil Maid USB Stick. After some 1-2 minutes, the target laptop\u2019s gets infected with Evil Maid Sniffer that will record the disk encryption passphrase when the user enters it next time. As any smart user might have guessed already, this part is ideally suited to be performed by hotel maids, or people pretending to be them.<br /><br />So, after our victim gets back to the hotel room and powers up his or her laptop, the passphrase will be recorded and e.g. stored somewhere on the disk, or maybe transmitted over the network (not implemented in current version).<br /><br /><img alt="" border="0" id="BLOGGER_PHOTO_ID_5392888928161012466" src="http://2.bp.blogspot.com/_Ti3q3Hdvels/Stdj6EwsmvI/AAAAAAAAAFg/eVbBLzSlq-E/s200/evil+maid.jpg" style="margin: 0px auto 10px; display: block; text-align: center; width: 200px; height: 130px;" />Now we can safely steal/confiscate the user\u2019s laptop, as we know how to decrypt it. End of story.<br /><br /><span style="font-size: 130%;"><span style="font-weight: bold;">Quick Start</span></span><br />Download the USB image <a href="http://invisiblethingslab.com/resources/evilmaid/evilmaidusb-1.01.img">here</a>. In order to \u201cburn\u201d the Evil Maid use the following commands on Linux (you need to be root to do dd):<br /><code><br />dd if=evilmaidusb.img of=/dev/sdX<br /></code><br />Where <code>/dev/sdX</code> should be replaced with the device representing your USB stick, e.g. <code>/dev/sdb</code>. Please be careful, as choosing a wrong device might result in damaging your hard disk or other media! Also, make sure to use the device representing the whole disk (e.g. <code>/dev/sdb</code>), rather than a disk partition (e.g. <code>/dev/sdb1</code>).<br /><br />On Windows you would need to get a dd-like program, e.g. this <a href="http://www.chrysocome.net/dd">one</a>, and the command would look more or less like this one (depending on the actual dd implementation you use):<br /><code><br />dd if=evilmaidusb.img of=\\\\?\\Device\\HarddiskX\\Partition0 bs=1M<br /></code><br />where <code>HarddiskX</code> should be replaced with the actual device the represents your stick.<br /><br />After preparing the Evil Maid USB stick, you\u2019re ready to test it against some TrueCrypt-encrypted laptop (more technically: a laptop that uses TrueCrypt system disk encryption). Just boot the laptop from the stick, confirm you want to run the tool (press \u2018E\u2019) and the TrueCrypt loader on your laptop should be infected.<br /><br /><a href="http://2.bp.blogspot.com/_Ti3q3Hdvels/Stdls03RIgI/AAAAAAAAAFo/t-h8arbkmvo/s1600-h/em1.gif"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5392890899578561026" src="http://2.bp.blogspot.com/_Ti3q3Hdvels/Stdls03RIgI/AAAAAAAAAFo/t-h8arbkmvo/s320/em1.gif" style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 320px; height: 178px;" /></a>Now, Evil Maid will be logging the passphrases provided during the boot time. To retrieve the recorded passphrase just boot again from the Evil Maid USB -- it should detect that the target is already infected and display the sniffed password.<br /><br /><a href="http://3.bp.blogspot.com/_Ti3q3Hdvels/Stdly_rCP0I/AAAAAAAAAFw/MIGLEThUux4/s1600-h/em2.gif"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5392891005559258946" src="http://3.bp.blogspot.com/_Ti3q3Hdvels/Stdly_rCP0I/AAAAAAAAAFw/MIGLEThUux4/s320/em2.gif" style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 320px; height: 178px;" /></a>The current implementation of Evil Maid always stores the last passphrase entered, assuming this is the correct one, in case the user entered the passphrase incorrectly at earlier attempts.<br /><br /><span style="font-size: 85%;"><span style="font-style: italic;">NOTE: It\u2019s probably illegal to use Evil Maid to obtain password from other people without their consent. You should always obtain permission from other people before testing Evil Maid against their laptops!</span></span><br /><br /><span style="font-style: italic; font-size: 85%;">CAUTION: The provided USB image and source code should be considered proof-of-concept only. Use this code at your own risk, and never run it against a production system. Invisible Things Lab cannot be held responsible for any potential damages this code or its derivates might cause.</span><br /><br /><span style="font-size: 130%;"><span style="font-weight: bold;">How the Evil Maid USB works</span></span><br />The provided implementation is extremely simple. It first reads the first 63 sectors of the primary disk (<code>/dev/sda</code>) and checks (looking at the first sector) if the code there looks like a valid TrueCrypt loader. If it does, the rest of the code is unpacked (using gzip) and hooked. Evil Maid hooks the TC\u2019s function that asks user for the passphrase, so that the hook records whatever passphrase is provided to this function. We also take care about adjusting some fields in the MBR,  like the boot loader size and its checksum. After the hooking is done, the loader is packed again and written back to the disk.<br /><br />You can get the source code for the Evil Maid infector <a href="http://invisiblethingslab.com/resources/evilmaid/evilmaid-src-1.0.tgz">here</a>.<br /><br /><span style="font-size: 130%;"><span style="font-weight: bold;">Possible Workarounds</span></span><br />So, how should we protect against such Evil Maid attacks? There are a few approaches...<br /><br /><span style="font-weight: bold;">1. Protect your laptop when you leave it alone</span><br />Several months ago I had a discussion with one of the TrueCrypt developers about possible means of preventing the Evil Maid Attack, perhaps using TPM (see below). Our dialog went like this (reproduced here with permission from the TrueCrypt developer):<br /><br /><span style="font-style: italic;"><span style="font-weight: bold;"></span></span><blockquote><span style="font-style: italic;"><span style="font-weight: bold;">TrueCrypt Developer:</span> We generally disregard "janitor" attacks since they inherently make the machine untrusted. We never consider the feasibility of hardware attacks; we simply have to assume the worst. After an attacker has "worked" with your hardware, you have to stop using it for sensitive data. It is impossible for TPM to prevent hardware attacks (for example, using hardware key loggers, which are readily available to average Joe users in computer shops, etc.)</span><br /><br /><span style="font-style: italic;"><span style="font-weight: bold;">Joanna Rutkowska:</span> And how can you determine that the attacker have or have not  "worked" with your hardware? Do you carry your laptop with you all the time?</span><br /><br /><span style="font-style: italic;"><span style="font-weight: bold;">TrueCrypt Developer:</span> Given the scope of our product, how the user ensures physical security is not our problem. Anyway, to answer your question (as a side note), you could use e.g. a proper safety case with a proper lock (or, when you cannot have it with you, store it in a good strongbox). </span><br /><br /><span style="font-style: italic;"><span style="font-weight: bold;">Joanna Rutkowska:</span>  If I could arrange for a proper lock or an impenetrable strongbox, then why in the world should I need encryption?</span><br /><br /><span style="font-style: italic;"><span style="font-weight: bold;">TrueCrypt Developer:</span> Your question was: "And how can you determine that the attacker has or has not worked with your hardware?" My answer was a good safety case or strongbox with a good lock. If you use it, then you will notice that the attacker has accessed your notebook inside (as the case or strongbox will be damaged and it cannot be replaced because you had the correct key with you). If the safety case or strongbox can be opened without getting damaged &amp; unusable, then it\'s not a good safety case or strongbox. ;-)</span><br /></blockquote><br />That\'s a fair point, but this means that for the security of our data we must relay on the infeasibility to open our strongbox lock in a "clean" way, i.e. without visually damaging it. Plus it means we need to carry a good strongbox with us to any travel we go. I think we need a better solution...<br /><br />Note that TrueCrypt authors do mention the possibility of physical attacks in the  <a href="http://www.truecrypt.org/docs/physical-security">documentation</a>:<br /><blockquote style="font-style: italic;"><span style="font-size: 85%;">If an attacker can physically access the computer hardware and you use it after the attacker has physically accessed it, then TrueCrypt may become unable to secure data on the computer. This is because the attacker may modify the hardware or attach a malicious hardware component to it (such as a hardware keystroke logger) that will capture the password or encryption key (e.g. when you mount a TrueCrypt volume) or otherwise compromise the security of the computer.</span></blockquote>However, they do not explicitly warn users of a possibility of something as simple and cheap as the Evil Maid Attack. Sure, they write "or otherwise compromise the security of the computer", which does indeed cover e.g. the Evil Maid Attack, but my bet is that very few users would realize what it really means. The examples of physical attacks given in the documentation, e.g. modifying the hardware or attaching a malicious hardware, is something that most users would disregard as too expensive an attack to be afraid of. But note that our Evil Maid attack is an example of a \u201cphysical\u201d attack, that doesn\u2019t require any hardware modification and is extremely cheap.<br /><br />Of course it is a valid point, that if we allow a possibility of a physical attack, then the attacker can e.g. install a hardware keylogger. But doing that is really not so easy as we discuss in the next paragraph. On the other hand, spending two minutes to boot the machine from an Evil Maid USB stick is just trivial and is very cheap (the price of the USB stick, plus the tip for the maid).<br /><br /><span style="font-weight: bold;">2. The Trusted Computing Approach</span><br />As <a href="http://theinvisiblethings.blogspot.com/2009/01/why-do-i-miss-microsoft-bitlocker.html">explained </a>a few months ago on this blog, a reasonably good solution against Evil Maid attack seems to be to take advantage of either static or dynamic root of trust offered by TPM. The first approach (SRTM) is what has been implemented in Vista Bitlocker. However Bitlocker doesn\u2019t try to authenticate to the user (e.g. via displaying a custom picture shot by the user, with the picture decrypted using a key unsealed from a TPM), so it\u2019s still possible to create a similar attack against Bitlocker, but with a bit different user experience. Namely the Evil Maid for Bitlocker would have to display a fake Bitlocker prompt (that could be identical to the real Bitlocker prompt), but after obtaining a correct password from the user Evil Maid would not be able to pass the execution to the real Bitlocker code, as the SRTM chain will be broken. Instead, Evil Maid would have to pretend that the password was wrong, uninstall itself, and then reboot the platform. Thus, a Bitlocker user that is confident that he or she entered the correct password, but the OS didn\u2019t boot correctly, should destroy the laptop.<br /><br />The dynamic root of trust approach (DRTM) is possible thanks to Intel TXT technology, but currently there is no full disk encryption software that would make use of it. One can try to implement it using Intel\u2019s <a href="http://sourceforge.net/projects/tboot/">tboot </a>and some Linux disk encryption, e.g. LUKS.<br /><br />Please also note that even if we assume somebody \u201ccracked\u201d the TPM chip (e.g. using an electron microscope, or NSA backdoor), that doesn\u2019t mean this person can automatically get access to the encrypted disk contents. This is not the case, as the TPM is used only for ensuring trusted boot. After cracking the TPM, the attacker would still have to mount an Evil Maid attack in order to obtain the passphrase or key. Without TPM this attack is always possible.<br /><br />Are those trusted computing-based approaches 100% foolproof? Of course not. As signalized in the previous paragraph, if an attacker was able to mount a hardware-based keylogger into your laptop (which is non-trivial, but possible), then the attacker would be able to capture your passphrase regardless of the trusted boot. A user can prevent such an attack by using two-factor authentication (RSA challenge-response implemented in a USB token) or e.g. one-time passwords, so that there is no benefit for the attacker to capture the keystrokes. But the attacker might go to the extreme and e.g. replace the DRAM, or even the CPU with malicious DRAM or CPU that would sniff and store the decryption key for later access. We\u2019re talking here about attack that very few entities can probably afford (think NSA), but nevertheless they are theoretically possible. (Note that an attack with inserting a malicious PCI device that would try to sniff the key using DMA can be <a href="http://theinvisiblethings.blogspot.com/2009/03/trusting-hardware.html">prevented </a>using TXT+VT-d technology).<br /><br />However, just because the NSA can theoretically replace your CPU with a malicious one, doesn\u2019t mean TPM-based solutions are useless. As for the great majority of other people that do not happen to be on the Terrorist Top 10, these represent a reasonable solution that could prevent Evil Maid attacks, and, when combined with a proper two-factor authentication, also simple hardware based attacks, e.g. keylogger, cameras, remote keystroke sniffing using laser, etc. I really cannot think of a more reasonable solution here.<br /><br /><span style="font-weight: bold;">3. The Poor Man\u2019s Solution</span><br />Personally I would love to see TrueCrypt implementing TPM-based trusted boot for its loader, but, well, what can I do? Keep bothering TrueCrypt developers with Evil Maid attacks and hope they will eventually consider implementing TPM support...<br /><br />So, in the meantime we have come up with a temporary poor man\u2019s solution that we use at our lab. We call it Disk Hasher. It\u2019s a bootable Linux-based USB stick that can be configured in quite a flexible way to calculate hashes of selected disk sectors and partitions. The correct hashes are stored also on the stick (of course everything is encrypted with a custom laptop-specific passphrase). We use this stick to verify the unencrypted portions of our laptops (typically the first 63 sectors of sda, and also the whole /boot partition in case of Linux-based laptops where we use LUKS/dm-crypt).<br /><br />Of course there are many problems with such a solution. E.g. somebody who can get access to my Disk Hasher USB (e.g. when I\u2019m in a swimming pool), can infect it in such a way that it would report correct hashes, even though the disk of my laptop would be \u201cevilmaided\u201d...<br /><br />Another problem with Disk Hasher solution is that it only looks at the disk, but cannot validate e.g. the BIOS. So if the attacker found a way to bypass the BIOS reflashing protection on my laptop, then he or she can install a rootkit there that would sniff my passphrase or the decryption key (in case I used one time passwords).<br /><br />Nevertheless, our Disk Hasher stick seems like a reasonable solution and we use it often internally at ITL to validate our laptops. In fact this is the most we can do, if we want to use TrueCrypt, PGP WDE, or LUKS/dm-crypt.<br /><br /><span style="font-size: 130%;"><span style="font-weight: bold;">FAQ</span></span><br /><br /><span style="font-weight: bold;">Q: Is this Evil Maid Attack some l33t new h4ck?</span><br />Nope, the concept behind the Evil Maid Attack is neither new, nor l33t in any way.<br /><br /><span style="font-weight: bold;">Q: So, why did you write it?</span><br />Because we believe it demonstrates an important problem, and we would like more attention to be paid in the industry to solving it.<br /><br /><span style="font-weight: bold;">Q: I\u2019m using two-factor authentication, am I protected against EM?</span><br />While a two-factor authentication or one time passwords are generally a good idea (e.g. they can prevent various keylogger attacks), they alone do not provide protection from Evil Maid-like attacks, because the attacker might modify his or her sniffer to look for the final decryption key (that would be calculated after the 2-factor authentication completes).<br /><br /><span style="font-weight: bold;">Q: How is Evil Maid different from Stoned-Bootkit?</span><br />The <a href="http://www.stoned-vienna.com/">Stoned Bootkit</a>, released a few months ago by an individual describing himself as \u201cSoftware Dev. Guru in Vienna\u201d, is also claimed to be capable of "bypassing TrueCrypt", which we take to mean a capability to sniff TC\'s passphrases or keys. Still, the biggest difference between Stoned Bootkit and Evil Maid USB is that in case of our attack you don\u2019t need to start the victim\'s OS in order to install Evil Maid, all you need to do is to boot from a USB stick, wait about 1 minute for the minimal Linux to start, and then press \u2018E\u2019, wait some 2 more seconds, and you\u2019re done. With the Stoned Bootkit, according to the author\u2019s description, you need to get admin access to the target OS in order to install it, so you either need to know the Windows admin password first, or use some exploit to get the installer executing on the target OS. Alternatively, you can install it from a bootable Windows CD, but this, according to the author, works only against unencrypted volumes, so no use in case of TrueCrypt compromise.<br /><br /><span style="font-weight: bold;">Q: I\'ve disabled boot from USB in BIOS and my BIOS is password protected, am I protected against EM?</span><br />No. Taking out your HDD, hooking it up to a USB enclosure case and later installing it back to your laptop increases the attack time by some 5-15 minutes at most. A maid has to carry her own laptop to do this though.<br /><br /><span style="font-weight: bold;">Q: What about using a HDD with built-in hardware-based encryption?</span><br />We haven\u2019t tested such encryption systems, so we don\u2019t know. There are many open questions here: how is the passphrase obtained from the user? Using software stored on the disk or in the BIOS? If on the disk, is this portion of disk made read-only? If so, does it mean it is non-updatable? Even if it is truly read-only, if the attacker can <a href="http://invisiblethingslab.com/resources/bh09usa/Attacking%20Intel%20BIOS.pdf">reflash the BIOS</a>, then he or she can install a passphrase sniffer there in the BIOS. Of course that would make the attack non-trivial and much more expensive than the original Evil Maid USB we presented here.<br /><br /><span style="font-weight: bold;">Q: Which TrueCrypt versions are supported by the current Evil Maid USB?</span><br />We have tested our Evil Maid USB against TrueCrypt versions 6.0a - 6.2a (the latest version currently available). Of course, if the \u201cshape\u201d of the TrueCrypt loader changed dramatically in the future, then Evil Maid USB would require updating.<br /><br /><span style="font-weight: bold;">Q: Why did you choose TrueCrypt and not some other product?</span><br />Because we believe TrueCrypt is a great product, we use it often in our lab, and we would love to see it getting some better protection against such attacks.<br /><br /><span style="font-weight: bold;">Q: Why there is no TPM support in TrueCrypt?</span><br />The TrueCrypt Foundation published official generalized response to TPM-related feature requests <a href="http://www.truecrypt.org/faq#tpm">here</a>.<br /><br /><span style="font-size: 130%;"><span style="font-weight: bold;">Acknowledgments</span> </span><br />Thanks to the ennead@truecrypt.org for all the polemics we had which allowed me to better gather my thoughts on the topic. The same thanks to Alex and Rafal, for all the polemics I have had with them (it\'s customary for ITL to spend a lot of time finding bugs in each other\'s reasoning).', 'guidislink': True, 'published': u'2009-10-16T00:30:00.005+02:00', u'thr_total': u'55'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=10, tm_mday=15, tm_hour=20, tm_min=2, tm_sec=3, tm_wday=3, tm_yday=288, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7770784580268995591/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=7770784580268995591', 'type': u'text/html', 'rel': u'replies', 'title': u'7 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7770784580268995591', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7770784580268995591', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/09/intel-security-summit-slides.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Intel Security Summit: the slides'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-7770784580268995591', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=9, tm_mday=22, tm_hour=14, tm_min=55, tm_sec=0, tm_wday=1, tm_yday=265, tm_isdst=0), 'title': u'Intel Security Summit: the slides', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'Last week I was invited to Hillsboro to speak at the Intel\'s internal conference on security. My presentation title was "A Quest To The Core: Thoughts on present and future attacks on system core technologies", and my goal was to somehow make a quick summary of the recent research our team has done over the last 12 months or so, and explain why we\'re so keen on hacking the low-level system components, while all the rest of the world is excited about browser and flash player bugs.The slides (converted to PDF) can be found here. As you will see, I decided to remove most of the slides from the "Future" chapter. One reason for that was that we didn\'t want to hint Loic our competition as to some of our new toys we\'re working on;) The other reason was that, I think, the value of presenting only thoughts about attacks, i.e. unproven thoughts, or, should I even say, feelings about future attacks, has little research value, and while I can understand such information being important to Intel, I don\'t see how others could benefit from them.I must say it was nice and interesting to meet in person with various Intel architects, i.e. the people that actually design and create our basic "universe" we all operate in. You can always change the OS (or even write your own!), but still you must stick to the rules, or "laws", of the platform (unless you can break them ;)', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Intel Security Summit: the slides', 'language': None}, 'updated': u'2009-10-15T22:02:03.973+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'philosophical', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'conferences', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/09/intel-security-summit-slides.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'paper', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://4.bp.blogspot.com/_Ti3q3Hdvels/SrjsKTA0I0I/AAAAAAAAAFY/530BI2suM5Y/s72-c/Fotolia_6441375_XS.jpg', 'width': u'72', 'height': u'72'}], 'summary': u'Last week I was invited to Hillsboro to speak at the Intel\'s internal conference on security. My presentation title was "A Quest To The Core: Thoughts on present and future attacks on system core technologies", and my goal was to somehow make a quick summary of the recent research our team has done over the last 12 months or so, and explain why we\'re so keen on hacking the low-level system components, while all the rest of the world is excited about browser and flash player bugs.<br /><br />The slides (converted to PDF) can be found <a href="http://invisiblethingslab.com/resources/misc09/Quest%20To%20The%20Core%20(public).pdf">here</a>. As you will see, I decided to remove most of the slides from the "Future" chapter. One reason for that was that we didn\'t want to hint <strike>Loic</strike> our competition as to some of our new toys we\'re working on;) The other reason was that, I think, the value of presenting only thoughts about attacks, i.e. <i>unproven</i> thoughts, or, should I even say, <i>feelings</i> about future attacks, has little research value, and while I can understand such information being important to Intel, I don\'t see how others could benefit from them.<br /><br />I must say it was nice and interesting to meet in person with various Intel architects, i.e. the people that actually design and create our basic "universe" we all operate in. You can always change the OS (or even write your own!), but still you must stick to the rules, or "laws", of the platform (unless you can break them ;)<br /><br /><img alt="" border="0" id="BLOGGER_PHOTO_ID_5384313016167965506" src="http://4.bp.blogspot.com/_Ti3q3Hdvels/SrjsKTA0I0I/AAAAAAAAAFY/530BI2suM5Y/s320/Fotolia_6441375_XS.jpg" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 320px; height: 212px;" />', 'guidislink': True, 'published': u'2009-09-22T16:55:00.005+02:00', u'thr_total': u'7'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=10, tm_mday=15, tm_hour=20, tm_min=0, tm_sec=21, tm_wday=3, tm_yday=288, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/8958558851864832778/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=8958558851864832778', 'type': u'text/html', 'rel': u'replies', 'title': u'23 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8958558851864832778', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8958558851864832778', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/09/about-apples-security-foundations-or.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'About Apple\u2019s Security Foundations, Or Lack Of Thereof...'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-8958558851864832778', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=9, tm_mday=2, tm_hour=14, tm_min=19, tm_sec=0, tm_wday=2, tm_yday=245, tm_isdst=0), 'title': u"About Apple's Security Foundations, Or Lack Of Thereof...", 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u"Every once in a while it's healthy to reinstall your system... I know, I know, it's almost a heresy to say that, but that's reality in the world where our systems are totally unverifiable. In fact I don't even attempt to verify if my Mac laptop has been compromised in any way (most system files are not signed anyway). But sometimes, you got this feeling that something might be wrong and you decide to reinstall to start your (digital) life all over again :)So, every time I (re)install a Mac-based system, I end up cursing horribly at Apple's architects. Why? Because in the Apple World they seem to totally ignore the concept of files integrity, to such extent that it's virtually impossible to get any assurance that the programs I install are in any way authentic (i.e. not tampered by some 3rd party, e.g. by somebody controlling my Internet connection).Take any Apple installer package, e.g. Thunderbird. In most cases an installer package on Mac is a .dmg file, that represents an installation disk image. Now, when you open such a file under Mac, the OS will never display any information about if this file is somehow signed (e.g. by who) or not. In fact, I'm pretty sure it's never signed. What you end up with, is a .dmg file that you just downloaded over plaintext HTTP and you have absolutely no way of verifying if it is the original file the vendor really published. And you're just about to grant admin privileges to the installer program that is inside this file -- after all it's an installer, so must got root privileges, right (well, not quite maybe)? Beautiful...Interestingly, this very same Thunderbird installer, but for Windows, is correctly signed, and Windows, correctly, displays that information (together with the ability to examine the certificate) and allows the user to make a choice of whether to allow it to run or not.Sure, the certificate doesn't guarantee that Mozilla didn't put a nasty backdoor in there, nor that the file was not compromised due to Mozilla's internal server compromise. Or that the certificate (the private key) wasn't somehow stolen from Mozilla, or that the issuing authority didn't make a mistake and maybe issued this certificate to some random guy, who just happened to be named Mozilla.But the certificate provides liability. If it indeed turns out that this very Thunderbird installer was somehow malicious, I could take this signed file to the court and sue either Mozilla, or the certification authority for all the damages it might have done to me. Without the certificate I cannot do that, because I (and nobody) cannot know if the file was tampered while being downloaded (e.g. malicious ISP) or maybe because my system was already compromised.But in case of Apple, we have no such choice -- we need to take the risk every time we download a program from the Internet. We must bet the security of our whole system, that at this very moment nobody is tampering with out (unsecured) HTTP connection, and also that nobody compromised the vendor's Web Server, and, of course, we hope that the vendor didn't put any malicious code into its product (as we could not sue them for it).So that sucks. That sucks terribly! Without ability to check the integrity of programs we want to install, we cannot build any solid foundations. It's funny how people divagate whether Apple implemented ASLR correctly in Snow Leopard, or not? Or whether NX is bypassable. It's meaningless to dive into such advanced topics, if we cannot even assure that at the day 0 our system is clean. We need to start building our systems from the ground up, and not starting from the roof! Ability to assure the software we install is not tampered seems like a reasonable very first step. (Sure it could be compromised 5 minutes later, and to protect against this we should have other mechanisms, like e.g. mentioned above ASLR and NX).And Apple should not blame the vendors for such a situation (Vendors would never pay $300 for a certificate, blah, blah), as it is just enough to have a look at the Windows versions of the same products, and that most of them do have signed installers (gee, even open-source TrueCrypt, has a signed installer for Windows!).One should say that a few vendors, seeing this problem on Mac, do publish PGP signatures for their installation files. This includes e.g. PGP Desktop for Mac, KeePassX, TrueCrypt for Mac, and a few others. But these are just exceptions and I wonder how many users will be disciplined (and savvy) enough to correctly verify those PGP signatures (in general it requires you to download the vendor keys many months before, keep it in your ring, to minimize possibility that somebody alters both the installer files and the keys you download). Some other vendors offer pseudo-integrity by displaying MD5/SHA1 sums on their websites. That would make some sense only if the website on which the hashes are displayed was itself SSL-protected (still the file signature is a better option), as otherwise we can be sure that the attacker that is tampering with the installer file, will also take care about adjusting the hash on the website... But of course this never is the case -- have a look e.g. at the VMWare download page for the Mac Fusion (one need to register first). Very smart, VMWare! (Needles to say, the VMWare Workstation installer for Windows is properly signed).BTW, anybody checked if the Apple updates are digitally signed somehow?All I wrote here in this post is just trivial. It should be just obvious for every decently educated software engineer. Believe me it's really is much more fun for me to write about things like new attacks on chipsets or virtualization. But I have this little hope that maybe somebody at Apple will read this little post and fix their OS. Because I really like Apple products for their aesthetics...", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'About Apple\u2019s Security Foundations, Or Lack Of Thereof...', 'language': None}, 'updated': u'2009-10-15T22:00:21.812+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'fighting for a better world', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/09/about-apples-security-foundations-or.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://1.bp.blogspot.com/_Ti3q3Hdvels/Sp5_8M68juI/AAAAAAAAAFQ/-_lxhA_Yg6o/s72-c/thunderbird+installer+on+vista.jpg', 'width': u'72', 'height': u'72'}], 'summary': u'Every once in a while it\u2019s healthy to reinstall your system... I know, I know, it\u2019s almost a heresy to say that, but that\u2019s reality in the world where our systems are totally <a href="http://theinvisiblethings.blogspot.com/2007/01/towards-verifiable-operating-systems.html">unverifiable</a>. In fact I don\u2019t even attempt to verify if my Mac laptop has been compromised in any way (most system files are not signed anyway). But sometimes, you got this feeling that something might be wrong and you decide to reinstall to start your (digital) life all over again :)<br /><br />So, every time I (re)install a Mac-based system, I end up cursing horribly at Apple\u2019s architects. Why? Because in the Apple World they seem to totally ignore the concept of files integrity, to such extent that it\u2019s virtually impossible to get any assurance that the programs I install are in any way authentic (i.e. not tampered by some 3rd party, e.g. by somebody controlling my Internet connection).<br /><br />Take any Apple installer package, e.g. <a href="http://www.mozillamessaging.com/en-US/thunderbird/download/?product=thunderbird-2.0.0.23&amp;os=osx&amp;lang=en-US">Thunderbird</a>. In most cases an installer package on Mac is a .dmg file, that represents an installation disk image. Now, when you open such a file under Mac, the OS will never display any information about if this file is somehow signed (e.g. by who) or not. In fact, I\u2019m pretty sure it\u2019s never signed. What you end up with, is a .dmg file that you just downloaded over plaintext HTTP and you have absolutely no way of verifying if it is the original file the vendor really published. And you\u2019re just about to grant admin privileges to the installer program that is inside this file -- after all it\u2019s an installer, so must got root privileges, right (well, <a href="http://theinvisiblethings.blogspot.com/2007/02/running-vista-every-day.html">not quite maybe</a>)? Beautiful...<br /><br />Interestingly, this very same Thunderbird installer, but for Windows, is correctly signed, and Windows, correctly, displays that information (together with the ability to examine the certificate) and allows the user to make a choice of whether to allow it to run or not.<br /><br /><a href="http://1.bp.blogspot.com/_Ti3q3Hdvels/Sp5_8M68juI/AAAAAAAAAFQ/-_lxhA_Yg6o/s1600-h/thunderbird+installer+on+vista.jpg"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5376875677364293346" src="http://1.bp.blogspot.com/_Ti3q3Hdvels/Sp5_8M68juI/AAAAAAAAAFQ/-_lxhA_Yg6o/s320/thunderbird+installer+on+vista.jpg" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 320px; height: 245px;" /></a><br /><br />Sure, the certificate doesn\u2019t guarantee that Mozilla didn\u2019t put a nasty backdoor in there, nor that the file was not compromised due to Mozilla\u2019s internal server compromise. Or that the certificate (the private key) wasn\u2019t somehow stolen from Mozilla, or that the issuing authority didn\u2019t make a mistake and maybe issued this certificate to some random guy, who just happened to be named Mozilla.<br /><br />But the certificate provides liability. If it indeed turns out that this very Thunderbird installer was somehow malicious, I could take this signed file to the court and sue either Mozilla, or the certification authority for all the damages it might have done to me. Without the certificate I cannot do that, because I (and nobody) cannot know if the file was tampered while being downloaded (e.g. malicious ISP) or maybe because my system was already compromised.<br /><br />But in case of Apple, we have no such choice -- we need to take the risk every time we download a program from the Internet. We must bet the security of our whole system, that at this very moment nobody is tampering with out (unsecured) HTTP connection, and also that nobody compromised the vendor\u2019s Web Server, and, of course, we hope that the vendor didn\u2019t put any malicious code into its product (as we could not sue them for it).<br /><br />So that sucks. That sucks terribly! Without ability to check the integrity of programs we want to install, we cannot build any solid foundations. It\u2019s funny how people divagate whether Apple implemented ASLR correctly in Snow Leopard, or not? Or whether NX is bypassable. It\u2019s meaningless to dive into such advanced topics, if we cannot even assure that at the day 0 our system is clean. We need to start building our systems from the ground up, and not starting from the roof! Ability to assure the software we install is not tampered seems like a reasonable very first step. (Sure it could be compromised 5 minutes later, and to protect against this we should have other mechanisms, like e.g. mentioned above ASLR and NX).<br /><br />And Apple should not blame the vendors for such a situation (\u201cVendors would never pay $300 for a certificate\u201d, blah, blah), as it is just enough to have a look at the Windows versions of the same products, and that most of them do have signed installers (gee, even open-source TrueCrypt, has a signed installer for Windows!).<br /><br />One should say that a few vendors, seeing this problem on Mac, do publish PGP signatures for their installation files. This includes e.g. PGP Desktop for Mac, KeePassX, TrueCrypt for Mac, and a few others. But these are just exceptions and I wonder how many users will be disciplined (and savvy) enough to correctly verify those PGP signatures (in general it requires you to download the vendor keys many months before, keep it in your ring, to minimize possibility that somebody alters both the installer files and the keys you download). Some other vendors offer pseudo-integrity by displaying MD5/SHA1 sums on their websites. That would make some sense only if the website on which the hashes are displayed was itself SSL-protected (still the file signature is a <a href="http://theinvisiblethings.blogspot.com/2009/08/pdf-signing-and-beyond.html">better option</a>), as otherwise we can be sure that the attacker that is tampering with the installer file, will also take care about adjusting the hash on the website... But of course this never is the case -- have a look e.g. at the VMWare download page for the Mac Fusion (one need to <a href="http://www.vmware.com/download/fusion/">register first</a>). Very smart, VMWare! (Needles to say, the VMWare Workstation installer for Windows is properly signed).<br /><br />BTW, anybody checked if the Apple updates are digitally signed somehow?<br /><br />All I wrote here in this post is just trivial. It should be just obvious for every decently educated software engineer. Believe me it\u2019s really is much more fun for me to write about things like new attacks on chipsets or virtualization. But I have this little hope that maybe somebody at Apple will read this little post and fix their OS. Because I really like Apple products for their aesthetics...', 'guidislink': True, 'published': u'2009-09-02T16:19:00.004+02:00', u'thr_total': u'23'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=10, tm_mday=15, tm_hour=19, tm_min=59, tm_sec=53, tm_wday=3, tm_yday=288, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/3613638502091357780/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=3613638502091357780', 'type': u'text/html', 'rel': u'replies', 'title': u'8 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3613638502091357780', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3613638502091357780', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/08/pdf-signing-and-beyond.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'PDF signing and beyond'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-3613638502091357780', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=8, tm_mday=26, tm_hour=19, tm_min=48, tm_sec=0, tm_wday=2, tm_yday=238, tm_isdst=0), 'title': u'PDF signing and beyond', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'Today I got an advertising email from GlobalSign (where I previously bought a code signing certificate for Vista kernel drivers some years ago) highlighting their new (?) type of certificates for signing of Adobe PDF files. It made me curious, because, frankly, I\'ve been recently more and more missing this feature. After a quick online research it turned out that this whole Adobe Certified Documents Services (CDS) seem to be nothing new, as apparently even Adobe Reader 6.0 had support for verifying those CDS certificates. The certificates are also available from other popular certification authorities like e.g. Entrust and Verisign, and a couple of others.So, I immediately felt stupid that I haven\'t been aware of such a great feature, which apparently is out there for a few years now. Why I thought it was so great a feature? Consider the following scenario\u2026At our Invisible Things Lab resources page we offer a handful of files to download \u2014 slides and some proof of concept code. The website is served over a plaintext HTTP. This means that if you\'re downloading anything over a public WiFi (hotel, airport lounge, etc) you never know if the PDF you actually get has not been infected somewhere in the middle, e.g. by a guy in the lobby that is messing with the hotel WiFi.So, one might argue that I should have paid a few hundred bucks and get an SSL certificate for my website and start serving it over HTTPS. But here\'s the problem \u2014 I, as zillions of other small businesses and individuals, host my website on some 5-dollar-a-month one-of-the-thousands hosting provider. I have zero knowledge about what people work there and if they can be trusted, and I also know nothing (and have zero impact) on how secure (or not, for that matter) the server is. (Same applies to my cell phone carrier, ISP, etc, BTW). Now, the SSL certificate for the website "knows" nothing about how the files on my website should look like, in particular if they are compromised or not. All the SSL certificate does is to give assurance to the remote client that he or she downloaded the actual files that were on the server in the moment of downloading \u2014 whether they were the original ones authored by me, or perhaps maliciously modified by somebody who got access to the server.So, the solution with an SSL certificate would work only if I trusted my web server, which could be assumed only if I run my own dedicated server. That, however, would be an overkill for a small company like ITL, especially that our business is not based on our web presence \u2014 in fact the website is maintained mainly for other researchers and students, who can easily download our papers and code from there, and also for the reporters so they can e.g. download a press release from there.Surprisingly, the website has never been compromised, probably because it doesn\'t present an interesting target for any skilled person (or maybe exceptionally skilled people work at the hosting provider?). But I cannot know for sure, as I don\'t constantly monitor all the hashes of all the files, as this would require\u2026 well a dedicated server that would be running an SHA1 calculating script in a loop for 24/7 :)Of course, zillions of other websites works this very same way and present the very same problems.Now, ability to sign PDFs would be just a great solution here, because I could sign all those files with my certificate, and then all the people downloading stuff from ITL could know they are getting original PDFs that were created on one of the ITL members desktop computers, no matter how compromised the web server or the network connection is.For the same reasons, I would welcome if others started doing the same, as currently I simply must assume every PDF I download from the net (and PDFs account for the majority of file downloads I do) to be potentially malicious. So, I always open them in my Red or Yellow VM (depending on the source of the download), and only if it "looks good" (very fuzzy term, I know), I might decide to move it to my host desktop (it\'s easier to work with PDFs on your host, and actually you should use your host desktop for something). (Yes, I know, Kostya Kortchinsky, or Rafal, can sometimes escape from VMWare, but still I believe that today the best isolation I can get on a desktop, without sacrificing much convince, is via a type II hypervisor. It\'s horribly inelegant, but well, that\'s life).So, I read some more about this Adobe CDS, being all excited about it, and ready to spend a few hundred euros on a certificate, only to realize that it doesn\'t look as good as I thought.First disappointment comes from the fact that you must create a PDF using Adobe Acrobat software (not the Reader, but the commercial one). I\'ve created all my PDFs using either Office (in the past) or iWork (today), and none of them seem to offer a way to digitally sign the PDF. I would like to get a simple tool, say pdfsign.exe, that I could use to sign any PDF I have, no matter how I generated it. Also, not surprisingly, the Mac native PDF viewer (Preview) doesn\'t seem to recognize the digital signature, and I bet some Linux PDF viewers do not as well.Worst of all, even the Acrobat Reader 9, that I tested under Windows, and that correctly displayed all the CDS information, does one unbelievably stupid thing \u2014 it parses and renders the whole PDF before displaying the signature info. So, if you downloaded a malicious PDF, Acrobat Reader will happily open it and parse, without asking you a question of whether you would like to open it (as it is perhaps unsigned). At least I was unable to find an option that would force it to do that. So, if this PDF contained an exploit for the reader, it surely would get executed. Compare this with the (correct) behavior of Vista UAC where it presents the executable signature details before executing it.You can see how your software works with Adobe PDF signatures, e.g. by looking at this exemplary file signed by GlobalSign.So, Adobe CDS, in the form they are today, seem to be pretty useless, as far as protection from potentially malicious PDFs is considered (they surely have other positive applications, e.g. to certify about authenticity of e.g. a diploma).But wouldn\'t it be great to have such a file signing mechanism globally adopted and not only for PDFs, but for any sort of files, including ZIPs, tgz\'s, heck, even plain text files? And have our main OSes generically recognize those signatures and display unified prompts of whether we want to allow an application to to open the file or not? Perhaps, in some situations, we could even define policies for specific applications. This seems easy to do from the technical point of view \u2014 we just need to "hook" (oh, God, did I say "hook"?) high-level OS API\'s like e.g. open() or CreateFile().What about PGP and possibility of using this for signing any sort of files? Well, we use PGP a lot at ITL, but mainly for securing peer-to-peer communication (e.g. between us and our clients). There really is no good way to publish one\'s PGP key \u2014 the concept of Web of Trust might be good for some closed groups of people, but not for publishing files "to the world". And, of course, the first thing that an attacker who subverted PDFs on our website will do is to also subvert the PGP key displayed on the website. I also tried once to publish a PGP key to a key server, but got discouraged immediately after I noticed it didn\'t use SSL for submission. BTW, anybody knows if the key servers today use SSL? If not, how the trust is established? Maybe email clients, e.g. Thunderbird, come with built in PGP keys for select key servers?So, I guess that was the main point of writing this post \u2014 to express how madly I would welcome a generic, OS-based, non-obligatory, signature verification for files, based on PKI :)Ah, before a dozen of people jumps to the comment box to tell me that digital signatures do not assure non-maliciousness of anything \u2014 please don\'t do that, because I actually know that. In fact, it is not possible to assure non-maliciousness of pretty much anything, especially without strictly defining an ethical system we would like to use first. What the signatures provide is the liability, so that I know who to sue, in case my naked holiday pictures got leaked to the public because of some malicious PDF exploiting my system. In that case I can sue either the actual person who signed the PDF (if this person is identifiable) or the certification authority who issued the certificate to a wrong (unidentifiable) person.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'PDF signing and beyond', 'language': None}, 'updated': u'2009-10-15T21:59:53.837+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'philosophical', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'fighting for a better world', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/08/pdf-signing-and-beyond.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'Today I got an advertising email from GlobalSign (where I previously bought a code signing certificate for Vista kernel drivers some years ago) highlighting their new (?) type of certificates for <a href="http://www.adobe.com/security/partners_cds.html">signing of Adobe PDF files</a>. It made me curious, because, frankly, I\'ve been recently more and more missing this feature. After a quick online research it turned out that this whole <a href="http://www.adobe.com/security/partners_cds.html">Adobe Certified Documents Services</a> (CDS) seem to be nothing new, as apparently even Adobe Reader 6.0 had support for verifying those CDS certificates. The certificates are also available from other popular certification authorities like e.g. Entrust and Verisign, and a couple of others.<br /><br />So, I immediately felt stupid that I haven\'t been aware of such a great feature, which apparently is out there for a few years now. Why I thought it was so great a feature? Consider the following scenario\u2026<br /><br />At our <a href="http://invisiblethingslab.com/itl/Resources.html">Invisible Things Lab resources page</a> we offer a handful of files to download \u2014 slides and some proof of concept code. The website is served over a plaintext HTTP. This means that if you\'re downloading anything over a public WiFi (hotel, airport lounge, etc) you never know if the PDF you actually get has not been infected somewhere in the middle, e.g. by a guy in the lobby that is messing with the hotel WiFi.<br /><br />So, one might argue that I should have paid a few hundred bucks and get an SSL certificate for my website and start serving it over HTTPS. But here\'s the problem \u2014 I, as zillions of other small businesses and individuals, host my website on some 5-dollar-a-month one-of-the-thousands hosting provider. I have zero knowledge about what people work there and if they can be trusted, and I also know nothing (and have zero impact) on how secure (or not, for that matter) the server is. (Same applies to my cell phone carrier, ISP, etc, BTW). <br /><br />Now, the SSL certificate for the website "knows" nothing about how the files on my website should look like, in particular if they are compromised or not. All the SSL certificate does is to give assurance to the remote client that he or she downloaded the actual files that were on the server in the moment of downloading \u2014 whether they were the original ones authored by me, or perhaps maliciously modified by somebody who got access to the server.<br /><br />So, the solution with an SSL certificate would work only if I trusted my web server, which could be assumed only if I run my own dedicated server. That, however, would be an overkill for a small company like ITL, especially that our business is not based on our web presence \u2014 in fact the website is maintained mainly for other researchers and students, who can easily download our papers and code from there, and also for the reporters so they can e.g. download a press release from there.<br /><br />Surprisingly, the website has never been compromised, probably because it doesn\'t present an interesting target for any skilled person (or maybe exceptionally skilled people work at the hosting provider?). But I cannot know for sure, as I don\'t constantly monitor all the hashes of all the files, as this would require\u2026 well a dedicated server that would be running an SHA1 calculating script in a loop for 24/7 :)<br /><br />Of course, zillions of other websites works this very same way and present the very same problems.<br /><br />Now, ability to sign PDFs would be just a great solution here, because I could sign all those files with my certificate, and then all the people downloading stuff from ITL could know they are getting original PDFs that were created on one of the ITL members desktop computers, no matter how compromised the web server or the network connection is.<br /><br />For the same reasons, I would welcome if others started doing the same, as currently I simply must assume every PDF I download from the net (and PDFs account for the majority of file downloads I do) to be potentially malicious. So, I always open them in <a href="http://www.tomshardware.com/reviews/joanna-rutkowska-rootkit,2356-6.html">my Red or Yellow VM</a> (depending on the source of the download), and only if it "looks good" (very fuzzy term, I know), I might decide to move it to my host desktop (it\'s easier to work with PDFs on your host, and actually you should use your host desktop for something). <br /><br />(Yes, I know, Kostya Kortchinsky, or Rafal, can sometimes escape from VMWare, but still I believe that today the best isolation I can get on a desktop, without sacrificing much convince, is via a type II hypervisor. It\'s horribly inelegant, but well, that\'s life).<br /><br />So, I read some more about this Adobe CDS, being all excited about it, and ready to spend a few hundred euros on a certificate, only to realize that it doesn\'t look as good as I thought.<br /><br />First disappointment comes from the fact that you must create a PDF using Adobe Acrobat software (not the Reader, but the commercial one). I\'ve created all my PDFs using either Office (in the past) or iWork (today), and none of them seem to offer a way to digitally sign the PDF. I would like to get a simple tool, say pdfsign.exe, that I could use to sign any PDF I have, no matter how I generated it. Also, not surprisingly, the Mac native PDF viewer (Preview) doesn\'t seem to recognize the digital signature, and I bet some Linux PDF viewers do not as well.<br /><br />Worst of all, even the Acrobat Reader 9, that I tested under Windows, and that correctly displayed all the CDS information, does one unbelievably stupid thing \u2014 it parses and renders the whole PDF before displaying the signature info. So, if you downloaded a malicious PDF, Acrobat Reader will happily open it and parse, without asking you a question of whether you would like to open it (as it is perhaps unsigned). At least I was unable to find an option that would force it to do that. So, if this PDF contained an exploit for the reader, it surely would get executed. Compare this with the (correct) behavior of Vista UAC where it presents the executable signature details before executing it.<br /><br />You can see how your software works with Adobe PDF signatures, e.g. by looking at <a href="http://www.globalsign.com/resources/CDS_Consumer_Guide.pdf">this exemplary file</a> signed by GlobalSign.<br /><br />So, Adobe CDS, in the form they are today, seem to be pretty useless, as far as protection from potentially malicious PDFs is considered (they surely have other positive applications, e.g. to certify about authenticity of e.g. a diploma).<br /><br />But wouldn\'t it be great to have such a file signing mechanism globally adopted and not only for PDFs, but for any sort of files, including ZIPs, tgz\'s, heck, even plain text files? And have our main OSes generically recognize those signatures and display unified prompts of whether we want to allow an application to to open the file or not? Perhaps, in some situations, we could even define policies for specific applications. This seems easy to do from the technical point of view \u2014 we just need to "hook" (oh, God, did I say "hook"?) high-level OS API\'s like e.g. <code>open()</code> or <code>CreateFile()</code>.<br /><br />What about PGP and possibility of using this for signing any sort of files? Well, we use PGP a lot at ITL, but mainly for securing peer-to-peer communication (e.g. between us and our clients). There really is no good way to publish one\'s PGP key \u2014 the concept of Web of Trust might be good for some closed groups of people, but not for publishing files "to the world". And, of course, the first thing that an attacker who subverted PDFs on our website will do is to also subvert the PGP key displayed on the website. I also tried once to publish a PGP key to a key server, but got discouraged immediately after I noticed it didn\'t use SSL for submission. BTW, anybody knows if the key servers today use SSL? If not, how the trust is established? Maybe email clients, e.g. Thunderbird, come with built in PGP keys for select key servers?<br /><br />So, I guess that was the main point of writing this post \u2014 to express how madly I would welcome a generic, OS-based, non-obligatory, signature verification for files, based on PKI :)<br /><br />Ah, before a dozen of people jumps to the comment box to tell me that digital signatures do not assure non-maliciousness of anything \u2014 please don\'t do that, because I actually know that. In fact, it is not possible to assure non-maliciousness of pretty much anything, especially without strictly defining an ethical system we would like to use first. What the signatures provide is the liability, so that I know who to sue, in case my naked holiday pictures got leaked to the public because of some malicious PDF exploiting my system. In that case I can sue either the actual person who signed the PDF (if this person is identifiable) or the certification authority who issued the certificate to a wrong (unidentifiable) person.', 'guidislink': True, 'published': u'2009-08-26T21:48:00.004+02:00', u'thr_total': u'8'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=10, tm_mday=15, tm_hour=20, tm_min=0, tm_sec=4, tm_wday=3, tm_yday=288, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/3052797530568154320/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=3052797530568154320', 'type': u'text/html', 'rel': u'replies', 'title': u'0 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3052797530568154320', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3052797530568154320', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/08/vegas-toys-part-i-ring-3-tools.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Vegas Toys (Part I): The Ring -3 Tools'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-3052797530568154320', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=8, tm_mday=25, tm_hour=9, tm_min=59, tm_sec=0, tm_wday=1, tm_yday=237, tm_isdst=0), 'title': u'Vegas Toys (Part I): The Ring -3 Tools', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'We\'ve just published the proof of concept code for the Alex\'s and Rafal\'s "Ring -3 Rootkits" talk, presented last month at the Black Hat conference in Vegas. You can download the code from our website here. It\'s highly recommended that one (re)reads the slides before playing with the code.In short, the code demonstrates injection of an arbitrary ARC4 code into a vPro-compatible chipset AMT/ME memory using the chipset memory reclaiming attack. Check the README and the slides for more information.The actual ARC4 code we distribute here is very simple: it sets a DMA write transaction to the host memory every ca. 15 seconds in order to write the "ITL" string at the predefined physical addresses (increased by 4 with every iteration). Of course one can do DMA read as well.The ability to do DMA from the ARC4 code to/from the host memory is, in fact, all that is necessary to write a sophisticated rootkit or any sort of malware, from funny jokers to sophisticated secret sniffers. Your imagination (and good pattern searching) is the only limit here.The OS, nor any software running on the host OS, cannot access our rootkit code, unless, of course, it used the same remapping attack we used to insert our code there :) But the rootkit might even cut off this way by locking down the remapping registers, so fixing the vulnerability on the fly, after exploiting it (of course it would be insane for any AV to use our remapping attack in order to scan ME space, but just for completeness;)An OS might attempt to protect itself from DMA accesses from the rootkit in the chipset by carefully setting VT-d protections. Xen 3.3/3.4, for example, sets VT-d protections in such a way that our rootkit cannot access the Xen hypervisor memory. We can, however, access all the other parts of the system which includes all the domains memory (i.e. where all the interesting data are located). Still, it should be possible to modify Xen so that it set VT-d mappings in such a strict way, that the AMT code (and the AMT rootkit) could not access any useful information in any of the domains. This, in fact, would be a good idea anyway, as it would also prevent any sort of hardware-based backdoors (except for the backdoors in the CPU).An AMT rootkit can, however, get around such a savvy OS because it can modify the OS\'s VT-d initialization code before it sets the VT-d protections. Alternatively, if the protections are set before the rootkit was activated, the rootkit can force the system to reboot and boot it from the AMT Virtual CDROM (In fact AMT has been designed to be able to do exactly that), which would contain rootkit agent code that would modify the OS/VMM to-be-loaded image, so that it doesn\'t setup VT-d properly.Of course, the proper solution against such an attack would be to use e.g. Intel TXT to assure trusted boot of the system. In theory this should work. In practice, as you might recall, we have already shown how to bypass Intel TXT. This TXT bypass attack still works on most (all?) hardware, as there is still no STM available in the wild (all that is needed for the attack is to have a working SMM attack, and last month we showed 2 such attacks \u2014 see the slides for the BIOS talk).Intel has released a patch a day before our presentation at Black Hat. This is a cumulative patch that is also targeting a few other, unrelated, problems, like e.g. the SMM caching attack (also reported by Loic), the SMM nvacpi attack, and the Q45 BIOS reflashing attack (for which the code will be also published shortly).Some of you might remember that Intel has patched this very remapping bug last year, after our Xen 0wning Trilogy presentations, where we used the very same bug to get around Xen hypervisor protections. However, Intel forgot about one small detail \u2014 namely it was perfectly possible for malware to downgrade BIOS to the previous, pre-Black-Hat-2008 version, without any user consent (after all this old BIO file was also digitally signed by Intel). So, with just one additional reboot (but without a user intervention needed) malware could still use the old remapping bug, this time to get access to the AMT memory. The recent patch mentioned above solves this problem by displaying a prompt during reflash boot, if reflashing to an older version of BIOS. So now it requires user intervention (a physical presence). This "downgrade protection" works, however, only if we have administrator password enabled in BIOS.We could get into the AMT memory on Q35, however, even if the downgrade attack was not possible. In that case we could use our BIOS reflashing exploit (the other Black Hat presentation).However, this situation looks differently on Intel latest Q45 chipsets (that also have AMT). As explained in the presentation, we were unable to get access to the AMT memory on those chipsets, even though we can reflash the BIOS there, and consequently, even though we can get rid of all the chipset locks (e.g. the remapping locks). Still, the remapping doesn\'t seem to work for this one memory range, where the AMT code resides. This suggest Intel added some additional hardware to the Q45 chipset (and other Series 4 chipsets) to prevent this very type of attacks. But we\'re not giving up on Q45 yet, and we will be trying other attacks, as soon as we recover from the holiday laziness ;)Finally, the nice picture of the Q35 chipset (MCH), where our rootkit lives :) The ARC4 processor is somewhere inside...', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Vegas Toys (Part I): The Ring -3 Tools', 'language': None}, 'updated': u'2009-10-15T22:00:04.114+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'rootkits', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'chipset', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'exploit', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/08/vegas-toys-part-i-ring-3-tools.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://4.bp.blogspot.com/_Ti3q3Hdvels/SpO6Tov88rI/AAAAAAAAAFI/0RkGsL5rM28/s72-c/Ring+-3+Rootkit+White+Diagram.png', 'width': u'72', 'height': u'72'}], 'summary': u'We\'ve just published the proof of concept code for the Alex\'s and Rafal\'s "Ring -3 Rootkits" talk, presented last month at the Black Hat conference in Vegas. You can download the code from our website <a href="http://invisiblethingslab.com/resources/bh09usa/ring-minus-3-tools-1.3.tgz">here</a>. It\'s highly recommended that one (re)reads the <a href="http://invisiblethingslab.com/resources/bh09usa/Ring%20-3%20Rootkits.pdf">slides </a>before playing with the code.<br /><br />In short, the code demonstrates injection of an arbitrary ARC4 code into a vPro-compatible chipset AMT/ME memory using the chipset memory reclaiming attack. Check the README and the slides for more information.<br /><br /><a href="http://4.bp.blogspot.com/_Ti3q3Hdvels/SpO6Tov88rI/AAAAAAAAAFI/0RkGsL5rM28/s1600-h/Ring+-3+Rootkit+White+Diagram.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5373843626901959346" src="http://4.bp.blogspot.com/_Ti3q3Hdvels/SpO6Tov88rI/AAAAAAAAAFI/0RkGsL5rM28/s400/Ring+-3+Rootkit+White+Diagram.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 400px; height: 300px;" /></a><br />The actual ARC4 code we distribute here is very simple: it sets a DMA write transaction to the host memory every ca. 15 seconds in order to write the "ITL" string at the predefined physical addresses (increased by 4 with every iteration). Of course one can do DMA read as well.<br /><br /><a href="http://4.bp.blogspot.com/_Ti3q3Hdvels/SpO3SVS9H-I/AAAAAAAAAE4/V5LXdY1PAxQ/s1600-h/ring-minus-3-tools.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5373840305965309922" src="http://4.bp.blogspot.com/_Ti3q3Hdvels/SpO3SVS9H-I/AAAAAAAAAE4/V5LXdY1PAxQ/s400/ring-minus-3-tools.png" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 400px; height: 294px;" /></a><br />The ability to do DMA from the ARC4 code to/from the host memory is, in fact, all that is necessary to write a sophisticated rootkit or any sort of malware, from funny jokers to sophisticated secret sniffers. Your imagination (and good pattern searching) is the only limit here.<br /><br />The OS, nor any software running on the host OS, cannot access our rootkit code, unless, of course, it used the same remapping attack we used to insert our code there :) But the rootkit might even cut off this way by locking down the remapping registers, so fixing the vulnerability on the fly, after exploiting it (of course it would be insane for any AV to use our remapping attack in order to scan ME space, but just for completeness;)<br /><br />An OS might attempt to protect itself from DMA accesses from the rootkit in the chipset by carefully setting VT-d protections. Xen 3.3/3.4, for example, sets VT-d protections in such a way that our rootkit cannot access the Xen hypervisor memory. We can, however, access all the other parts of the system which includes all the domains memory (i.e. where all the interesting data are located). Still, it should be possible to modify Xen so that it set VT-d mappings in such a strict way, that the AMT code (and the AMT rootkit) could not access any useful information in any of the domains. This, in fact, would be a good idea anyway, as it would also prevent any sort of <a href="http://theinvisiblethings.blogspot.com/2009/03/trusting-hardware.html">hardware-based backdoors</a> (except for the backdoors in the CPU).<br /><br />An AMT rootkit can, however, get around such a savvy OS because it can modify the OS\'s VT-d initialization code before it sets the VT-d protections. Alternatively, if the protections are set before the rootkit was activated, the rootkit can force the system to reboot and boot it from the AMT Virtual CDROM (In fact AMT has been designed to be able to do exactly that), which would contain rootkit agent code that would modify the OS/VMM to-be-loaded image, so that it doesn\'t setup VT-d properly.<br /><br />Of course, the proper solution against such an attack would be to use e.g. Intel TXT to assure trusted boot of the system. In theory this should work. In practice, as you might recall, we have already shown <a href="http://theinvisiblethings.blogspot.com/2009/02/attacking-intel-txt-paper-and-slides.html">how to bypass Intel TXT</a>. This TXT bypass attack still works on most (all?) hardware, as there is still no STM available in the wild (all that is needed for the attack is to have a working SMM attack, and last month we showed 2 such attacks \u2014 see the slides for the BIOS talk).<br /><br />Intel has released a <a href="http://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00018&amp;languageid=en-fr&amp;cid=rss-172465-c1-236761">patch </a>a day before our presentation at Black Hat. This is a cumulative patch that is also targeting a few other, unrelated, problems, like e.g. the SMM caching attack (also reported by Loic), the SMM nvacpi attack, and the Q45 BIOS reflashing attack (for which the code will be also published shortly).<br /><br />Some of you might remember that Intel has patched this very remapping bug last year, after our Xen 0wning Trilogy presentations, where we used the very same bug to get around Xen hypervisor protections. However, Intel forgot about one small detail \u2014 namely it was perfectly possible for malware to downgrade BIOS to the previous, pre-Black-Hat-2008 version, without any user consent (after all this old BIO file was also digitally signed by Intel). So, with just one additional reboot (but without a user intervention needed) malware could still use the old remapping bug, this time to get access to the AMT memory. The recent patch mentioned above solves this problem by displaying a prompt during reflash boot, if reflashing to an older version of BIOS. So now it requires user intervention (a physical presence). This "downgrade protection" works, however, only if we have administrator password enabled in BIOS.<br /><br />We could get into the AMT memory on Q35, however, even if the downgrade attack was not possible. In that case we could use our BIOS reflashing exploit (the other Black Hat presentation).<br /><br />However, this situation looks differently on Intel latest Q45 chipsets (that also have AMT). As explained in the presentation, we were unable to get access to the AMT memory on those chipsets, even though we can reflash the BIOS there, and consequently, even though we can get rid of all the chipset locks (e.g. the remapping locks). Still, the remapping doesn\'t seem to work for this one memory range, where the AMT code resides. <br /><br />This suggest Intel added some additional hardware to the Q45 chipset (and other Series 4 chipsets) to prevent this very type of attacks. But we\'re not giving up on Q45 yet, and we will be trying other attacks, as soon as we recover from the holiday laziness ;)<br /><br />Finally, the nice picture of the Q35 chipset (MCH), where our rootkit lives :) The ARC4 processor is somewhere inside...<br /><br /><a href="http://4.bp.blogspot.com/_Ti3q3Hdvels/SpO5ZKYGogI/AAAAAAAAAFA/2IhQkwwOtRw/s1600-h/WBChipset.jpg"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5373842622316454402" src="http://4.bp.blogspot.com/_Ti3q3Hdvels/SpO5ZKYGogI/AAAAAAAAAFA/2IhQkwwOtRw/s320/WBChipset.jpg" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 320px; height: 254px;" /></a>', 'guidislink': True, 'published': u'2009-08-25T11:59:00.007+02:00', u'thr_total': u'0'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=8, tm_mday=25, tm_hour=9, tm_min=59, tm_sec=22, tm_wday=1, tm_yday=237, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/9064869513973571664/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=9064869513973571664', 'type': u'text/html', 'rel': u'replies', 'title': u'7 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/9064869513973571664', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/9064869513973571664', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/07/black-hat-2009-slides.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Black Hat 2009 Slides'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-9064869513973571664', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=7, tm_mday=30, tm_hour=21, tm_min=18, tm_sec=0, tm_wday=3, tm_yday=211, tm_isdst=0), 'title': u'Black Hat 2009 Slides', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'The wait is over. The slides are here. The press release is here. Unless you\'re a chipset/BIOS engineer kind of person, I strongly recommend reading the press release first, before opening the slides.So, the "Ring -3 Rootkit" presentation is about vPro/AMT chipset compromises. The "Attacking Intel BIOS" presentation is about exploiting a heap overflow in BIOS environment in order to bypass reflashing protection, that otherwise allows only Intel-signed updates to be flashed.We will publish the code some time after get back from Vegas.Enjoy.ps. Let me remind my dear readers that all the files hosted on the ITL website are not digitally signed and are served over a plaintext connection (HTTP). In addition, the ITL\'s website is hosted on a 3rd party provider\'s server, on which we have totally no control (which is the reason why we don\'t buy an SSL certificate for the website). Never trust unsigned files that you download from the Internet. ITL cannot be liable for any damages caused by the files downloaded from our website, unless they are digitally signed.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Black Hat 2009 Slides', 'language': None}, 'updated': u'2009-08-25T11:59:22.095+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'chipset', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'BIOS', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'attack', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'smm', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'exploit', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/07/black-hat-2009-slides.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'paper', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'The wait is over. The slides are <a href="http://invisiblethingslab.com/itl/Resources.html">here</a>. The press release is <a href="http://invisiblethingslab.com/press/itl-press-2009-03.pdf">here</a>. Unless you\'re a chipset/BIOS engineer kind of person, I strongly recommend reading the press release first, before opening the slides.<br /><br />So, the "Ring -3 Rootkit" presentation is about vPro/AMT chipset compromises. The "Attacking Intel BIOS" presentation is about exploiting a heap overflow in BIOS environment in order to bypass reflashing protection, that otherwise allows only Intel-signed updates to be flashed.<br /><br />We will publish the code some time after get back from Vegas.<br /><br />Enjoy.<br /><br />ps. Let me remind my dear readers that all the files hosted on the ITL website are not digitally signed and are served over a plaintext connection (HTTP). In addition, the ITL\'s website is hosted on a 3rd party provider\'s server, on which we have totally no control (which is the reason why we don\'t buy an SSL certificate for the website). Never trust unsigned files that you download from the Internet. ITL cannot be liable for any damages caused by the files downloaded from our website, unless they are digitally signed.', 'guidislink': True, 'published': u'2009-07-30T23:18:00.006+02:00', u'thr_total': u'7'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=8, tm_mday=25, tm_hour=9, tm_min=59, tm_sec=13, tm_wday=1, tm_yday=237, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/4456369931211035223/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=4456369931211035223', 'type': u'text/html', 'rel': u'replies', 'title': u'11 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/4456369931211035223', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/4456369931211035223', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/07/interview.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Interview'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-4456369931211035223', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=7, tm_mday=16, tm_hour=22, tm_min=12, tm_sec=0, tm_wday=3, tm_yday=197, tm_isdst=0), 'title': u'Interview', 'pred': 'announcements', 'cprob': 0.983, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u"Alan Dang from Tom's Hardware did an interview with me. I talk there about quite a lot of things, many of which I would probably write about on this blog sooner or later (or already had), so I thought it might be of interest to the readers of this blog.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Interview', 'language': None}, 'updated': u'2009-08-25T11:59:13.263+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'general', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/07/interview.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'Alan Dang from Tom\'s Hardware did an <a href="http://www.tomshardware.com/reviews/joanna-rutkowska-rootkit,2356.html#xtor=RSS-182">interview</a> with me. I talk there about quite a lot of things, many of which I would probably write about on this blog sooner or later (or already had), so I thought it might be of interest to the readers of this blog.', 'guidislink': True, 'published': u'2009-07-17T00:12:00.004+02:00', u'thr_total': u'11'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=8, tm_mday=25, tm_hour=9, tm_min=59, tm_sec=2, tm_wday=1, tm_yday=237, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7377753647053577701/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=7377753647053577701', 'type': u'text/html', 'rel': u'replies', 'title': u'0 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7377753647053577701', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7377753647053577701', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/06/virtualization-insecurity-training-in.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Virtualization (In)Security Training in Vegas'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-7377753647053577701', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=6, tm_mday=12, tm_hour=12, tm_min=8, tm_sec=0, tm_wday=4, tm_yday=163, tm_isdst=0), 'title': u'Virtualization (In)Security Training in Vegas', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'VM escapes, hypervisor compromises (via "classic" rootkits, as well as Bluepill-like rootkits), hypervisor protection strategies, SMM attacks, TXT bypassing, and more \u2014 these are some of the topics that will be covered by our brand new training on Virtualization (In)Security at the upcoming Black Hat USA.The training offers quite a unique chance, I think, to absorb the results of 1+ year of the research done by our team within... just 2 days. This will be provided via detailed lectures and unique hands-on exercises.Unlike our previous training on stealth malware (that will also be offered this year, BTW), this time we will offer attendees a bit of hope :) We will be stressing that some of the new hardware technologies (Intel TXT, VT, TPM), if used properly, have potential to dramatically increase security of our computer systems. Sure, we will be showing attacks against those technologies (e.g. TXT), but nevertheless we will be stressing that this is the proper way to go in the long run.Interestingly, I\'m not aware of any similar training of this kind, that would be covering the security issues related to virtualization systems and bare metal hypervisors. Hope we will not get into troubles with the Antitrust Commission for monopolizing this field ;)The training brochure (something for your boss) is here.The detailed agenda spanning 2 full days can be downloaded here.The Black Hat signup page is here.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Virtualization (In)Security Training in Vegas', 'language': None}, 'updated': u'2009-08-25T11:59:02.603+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'xen hacking', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'company news', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/06/virtualization-insecurity-training-in.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://1.bp.blogspot.com/_Ti3q3Hdvels/SjJF-ePDEUI/AAAAAAAAAEo/5ealWjYcCn4/s72-c/neurons.jpg', 'width': u'72', 'height': u'72'}], 'summary': u'VM escapes, hypervisor compromises (via "classic" rootkits, as well as Bluepill-like rootkits), hypervisor protection strategies, SMM attacks, TXT bypassing, and more \u2014 these are some of the topics that will be covered by our brand new training on Virtualization (In)Security at the upcoming Black Hat USA.<br /><br />The training offers quite a unique chance, I think, to absorb the results of 1+ year of the research done by our team within... just 2 days. This will be provided via detailed lectures and unique hands-on exercises.<br /><br />Unlike our previous training on stealth malware (that will also <a href="http://blackhat.com/html/bh-usa-09/train-bh-usa-09-jrk-at.html">be offered</a> this year, BTW), this time we will offer attendees a bit of hope :) We will be stressing that some of the new hardware technologies (Intel TXT, VT, TPM), if used properly, have potential to dramatically increase security of our computer systems. Sure, we will be showing attacks against those technologies (e.g. TXT), but nevertheless we will be stressing that this is the proper way to go in the long run.<br /><br />Interestingly, I\'m not aware of any similar training of this kind, that would be covering the security issues related to virtualization systems and bare metal hypervisors. Hope we will not get into troubles with the Antitrust Commission for monopolizing this field ;)<br /><br />The training brochure (something for your boss) is <a href="http://invisiblethingslab.com/resources/training_virtsec/VirtSecTraining-Overview.pdf">here</a>.<br /><br />The detailed agenda spanning 2 full days can be downloaded <a href="http://invisiblethingslab.com/resources/training_virtsec/VirtSecTraining-Agenda-0.9.pdf">here</a>.<br /><br />The Black Hat signup page is <a href="http://www.blackhat.com/html/bh-usa-09/train-bh-usa-09-jrk-virt.html">here</a>.<br /><br /><img alt="" border="0" id="BLOGGER_PHOTO_ID_5346412647212585282" src="http://1.bp.blogspot.com/_Ti3q3Hdvels/SjJF-ePDEUI/AAAAAAAAAEo/5ealWjYcCn4/s320/neurons.jpg" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand; width: 320px; height: 240px;" />', 'guidislink': True, 'published': u'2009-06-12T14:08:00.003+02:00', u'thr_total': u'0'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=8, tm_mday=25, tm_hour=9, tm_min=58, tm_sec=49, tm_wday=1, tm_yday=237, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/360542347844086177/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=360542347844086177', 'type': u'text/html', 'rel': u'replies', 'title': u'8 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/360542347844086177', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/360542347844086177', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/06/quest-to-core.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Quest to The Core'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-360542347844086177', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=6, tm_mday=9, tm_hour=13, tm_min=10, tm_sec=0, tm_wday=1, tm_yday=160, tm_isdst=0), 'title': u'Quest to The Core', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'If you think SMM rootkits or PCI backdoors is low-level, then you should certainly see our talks in Vegas \u2014 ITL is going to define what does the "low-level" adjective really mean at the end of the decade ;)In case you haven\'t noticed it at the Black Hat website yet \u2014 Alex and Rafal will be giving two presentations in Vegas:1) Introducing Ring -3 Rootkits (description)2) Attacking Intel  BIOS (description)Let me stress that we have been in touch with Intel for quite some time about the above attacks, and that Intel is planning to release appropriate fixes a few weeks before our presentations at Black Hat.There is more than just this coming at this year\'s Black Hat \u2014 most notably we will also be debuting with our Virtualization (In)Security Training. I will write a separate post about this training (containing a detailed agenda) in the coming days, so stay tuned.Quite exciting.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Quest to The Core', 'language': None}, 'updated': u'2009-08-25T11:58:49.731+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'company news', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'attack', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/06/quest-to-core.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'If you think SMM rootkits or PCI backdoors is low-level, then you should certainly see our talks in Vegas \u2014 ITL is going to define what does the "low-level" adjective really mean at the end of the decade ;)<br /><br />In case you haven\'t noticed it at the <a href="http://blackhat.com/html/bh-usa-09/bh-usa-09-schedule.html">Black Hat website</a> yet \u2014 Alex and Rafal will be giving two presentations in Vegas:<br /><br />1) Introducing Ring -3 Rootkits (<a href="http://blackhat.com/html/bh-usa-09/bh-usa-09-speakers.html#Tereshkin">description</a>)<br /><br />2) Attacking Intel\xae BIOS (<a href="http://blackhat.com/html/bh-usa-09/bh-usa-09-speakers.html#Wojtczuk">description</a>)<br /><br />Let me stress that we have been in touch with Intel for quite some time about the above attacks, and that Intel is planning to release appropriate fixes a few weeks before our presentations at Black Hat.<br /><br />There is more than just this coming at this year\'s Black Hat \u2014 most notably we will also be debuting with our <a href="http://blackhat.com/html/bh-usa-09/train-bh-usa-09-jrk-virt.html">Virtualization (In)Security Training</a>. I will write a separate post about this training (containing a detailed agenda) in the coming days, so stay tuned.<br /><br />Quite exciting.', 'guidislink': True, 'published': u'2009-06-09T15:10:00.004+02:00', u'thr_total': u'8'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=8, tm_mday=25, tm_hour=9, tm_min=58, tm_sec=39, tm_wday=1, tm_yday=237, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/2058775943106512545/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=2058775943106512545', 'type': u'text/html', 'rel': u'replies', 'title': u'25 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/2058775943106512545', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/2058775943106512545', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/06/more-thoughts-on-cpu-backdoors.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'More Thoughts on CPU backdoors'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-2058775943106512545', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=6, tm_mday=1, tm_hour=22, tm_min=16, tm_sec=0, tm_wday=0, tm_yday=152, tm_isdst=0), 'title': u'More Thoughts on CPU backdoors', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'I\'ve recently exchanged a few emails with Loic Duflot about CPU-based backdoors. It turned out that he recently wrote a paper about hypothetical CPU-backdoors and also implemented some proof-of-concept ones using QEMU (for he doesn\'t happen to own a private CPU production line). The paper can be bought here. (Loic is an academic, and so he must follow some of the strange customs in the academic world, one of them being that papers are not freely published, but rather being sold on a publisher website\u2026 Heck, even we, the ultimately commercialized researchers, still publish our papers and code for free).Let me stress that what Loic writes about in the paper are only hypothetical backdoors, i.e. no actual backdoors have been found on any real CPU (ever, AFAIK!). What he does is he considers how Intel or AMD could implement a backdoor, and then he simulate this process by using QEMU and implementing those backdoors inside QEMU.Loic also focuses on local privilege escalation backdoors only. You should however not underestimate a good local privilege escalation \u2014 such things could be used to break out of any virtual machine, like VMWare, or potentially even out of a software VMs like e.g. Java VM.The backdoors Loic considers are somewhat similar in principle to the simple pseudo-code one-liner backdoor I used in my previous post about hardware backdoors, only more complicated in the actual implementation, as he took care about a few important details, that I naturally didn\'t concern. (BTW, the main message of my previous post about  was how cool technology this VT-d is, being able to prevent PCI-based backdoors, and not about how doomed we are because of Intel- or AMD-induced potential backdoors).Some people believe that processor backdoors do not exist in reality, because if they did, the competing CPU makers would be able to find them in each others\' products, and later would likely cause a "leak" to the public about such backdoors (think: Black PR). Here people make an assumption that AMD or Intel is technically capable of reversing each others processors, which seems to be a natural consequence of them being able to produce them.I don\'t think I fully agree with such an assumption though. Just the fact that you are capable of designing and producing a CPU, doesn\'t mean you can also reverse engineer it. Just the fact that Adobe can write a few hundred megabyte application, doesn\'t mean they are automatically capable of also reverse engineering similar applications of that size. Even if we assumed that it is technically feasible to use some electron microscope to scan and map all the electronic elements from the processor, there is still a problem of interpreting of how all those hundreds of millions of transistors actually work. Anyway, a few more thoughts about properties of a hypothetical backdoors that Intel or AMD might use (be using).First, I think that in such a backdoor scenario everything besides the "trigger" would be encrypted. The trigger is something that you must execute first, in order to activate the backdoor (e.g. the CMP instruction with particular, i.e. magic, values of some registers, say EAX, EBX, ECX, EDX). Only then the backdoor gets activated and e.g. the processor auto-magically escalates into Ring 0. Loic considers this in more detail in his paper. So, my point is that all the attacker\'s code that executes afterwards, think of it as of a shellcode for the backdoor, that is specific for the OS, is fetched by the processor in an encrypted form and decrypted only internally inside the CPU. That should be trivial to implement, while at the same time should complicate any potential forensic analysis afterwards \u2014 it would be highly non-trivial to understand what the backdoor actually have done.Another crucial thing for a processor backdoor, I think, should be some sort of an anti-reply attack protection. Normally, if a smart admin had been recording all the network traffic, and also all the executables that ever got executed on the host, chances are that he or she would catch the triggering code and the shellcode (which might be encrypted, but still). So, no matter how subtle the trigger is, it is still quite possible that a curious admin will eventually find out that some tetris.exe somehow managed to breakout of a hardware VM and did something strange, e.g. installed a rootkit in a hypervisor (or some Java code somehow was able to send over all our DOCX files from our home directory).Eventually the curious admin will find out that strange CPU instruction (the trigger) after which all the strange things had happened. Now, if the admin was able to take this code and replicate it, post it to Daily Dave, then, assuming his message would pass through the Moderator (Hi Dave), he would effectively compromise the processor vendor\'s reputation.An anti-replay mechanism could ideally be some sort of a challenge-response protocol used in a trigger. So, instead having you always to put 0xdeadbeaf, 0xbabecafe, and 0x41414141 into EAX, EBX and EDX and execute some magic instruction (say CMP), you would have to put a magic that is a result of some crypto operation, taking current date and magic key as input:Magic = MAGIC (Date, IntelSecretKey).The obvious problem is how the processor can obtain current date? It would have to talk to the south-bridge at best, which is 1) nontrivial, and 2) observable on a bus, and 3) spoof\'able.A much better idea would be to equip a processor with some sort of an eeprom memory, say big enough to hold one 64-bit or maybe 128-bit value. Each processor would get a different value flashed there when leaving the factory. Now, in order to trigger the backdoor, the processor vendor (or backdoor operator, think: NSA) would have to do the following:1) First execute some code that would read this unique value stored in eeprom for the particular target processor, and send this back to them,2) Now, they could generate the actual magic for the trigger:Magic = MAGIC (UniqeValueInEeprom, IntelSecretKey)3) ...and send the actual code to execute the backdoor and shellcode, with the correct trigger embedded, based on the magic value.Now, the point is that the processor will automatically increment the unique number stored in the eeprom, so the same backdoor-exploiting code would not work twice for the same processor (while at the same time it would be easy for NSA to send another exploit, as they know what the next value in the eeprom should be). Also, such a customized exploit would not work on any other CPU, as the assumption was that each CPU gets a different value at the factory, so again it would not be possible to replicate the attack and proved that the particular code has ever done something wrong.So, the moment I learn that processors have built-in eeprom memory, I will start thinking seriously there are backdoors out there :)One thing that bothers me with all those divagations about hypothetical backdoors in processors is that I find them pretty useless in at the end of the day. After all, by talking about those backdoors, and how they might be created, we do not make it any easier to protect against them, as there simply is no possible defense here. Also this doesn\'t make it any easier for us to build such backdoors (if we wanted to become the bad guys for a change). It might only be of an interest to Intel or AMD, or whatever else processor maker, but I somewhat feel they have already spent much more time thinking about it, and chances are they probably can only laugh at what we are saying here, seeing how unsophisticated our proposed backdoors are. So, my Dear Reader, I think you\'ve been just wasting time reading this post ;) Sorry for tricking you into this and I hope to write something more practical next time :)', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'More Thoughts on CPU backdoors', 'language': None}, 'updated': u'2009-08-25T11:58:39.136+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'philosophical', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'backdoors', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/06/more-thoughts-on-cpu-backdoors.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'I\'ve recently exchanged a few emails with Loic Duflot about CPU-based backdoors. It turned out that he recently wrote a paper about hypothetical CPU-backdoors and also implemented some proof-of-concept ones using QEMU (for he doesn\'t happen to own a private CPU production line). The paper can be bought <a href="http://www.springerlink.com/content/jp07870p24560678/">here</a>. (Loic is an academic, and so he must follow some of the strange customs in the academic world, one of them being that papers are not freely published, but rather being sold on a publisher website\u2026 Heck, even we, the ultimately commercialized researchers, still publish our papers and code for free).<br /><br />Let me stress that what Loic writes about in the paper are only hypothetical backdoors, i.e. no actual backdoors have been found on any real CPU (ever, AFAIK!). What he does is he considers how Intel or AMD could implement a backdoor, and then he simulate this process by using QEMU and implementing those backdoors inside QEMU.<br /><br />Loic also focuses on local privilege escalation backdoors only. You should however not underestimate a good local privilege escalation \u2014 such things could be used to break out of any virtual machine, like VMWare, or potentially even out of a software VMs like e.g. Java VM.<br /><br />The backdoors Loic considers are somewhat similar in principle to the simple pseudo-code one-liner backdoor I used in <a href="http://theinvisiblethings.blogspot.com/2009/03/trusting-hardware.html">my previous post</a> about hardware backdoors, only more complicated in the actual implementation, as he took care about a few important details, that I naturally didn\'t concern. (BTW, the main message of my previous post about  was how cool technology this VT-d is, being able to prevent PCI-based backdoors, and not about how doomed we are because of Intel- or AMD-induced potential backdoors).<br /><br />Some people believe that processor backdoors do not exist in reality, because if they did, the competing CPU makers would be able to find them in each others\' products, and later would likely cause a "leak" to the public about such backdoors (think: Black PR). Here people make an assumption that AMD or Intel is technically capable of reversing each others processors, which seems to be a natural consequence of them being able to produce them.<br /><br />I don\'t think I fully agree with such an assumption though. Just the fact that you are capable of designing and producing a CPU, doesn\'t mean you can also reverse engineer it. Just the fact that Adobe can write a few hundred megabyte application, doesn\'t mean they are automatically capable of also reverse engineering similar applications of that size. Even if we assumed that it is technically feasible to use some electron microscope to scan and map all the electronic elements from the processor, there is still a problem of interpreting of how all those hundreds of millions of transistors actually work. <br /><br />Anyway, a few more thoughts about properties of a hypothetical backdoors that Intel or AMD might use (be using).<br /><br />First, I think that in such a backdoor scenario everything besides the "trigger" would be encrypted. The trigger is something that you must execute first, in order to activate the backdoor (e.g. the CMP instruction with particular, i.e. magic, values of some registers, say EAX, EBX, ECX, EDX). Only then the backdoor gets activated and e.g. the processor auto-magically escalates into Ring 0. Loic considers this in more detail in his paper. So, my point is that all the attacker\'s code that executes afterwards, think of it as of a shellcode for the backdoor, that is specific for the OS, is fetched by the processor in an encrypted form and decrypted only internally inside the CPU. That should be trivial to implement, while at the same time should complicate any potential forensic analysis afterwards \u2014 it would be highly non-trivial to understand what the backdoor actually have done.<br /><br />Another crucial thing for a processor backdoor, I think, should be some sort of an anti-reply attack protection. Normally, if a smart admin had been recording all the network traffic, and also all the executables that ever got executed on the host, chances are that he or she would catch the triggering code and the shellcode (which might be encrypted, but still). So, no matter how subtle the trigger is, it is still quite possible that a curious admin will eventually find out that some tetris.exe somehow managed to breakout of a hardware VM and did something strange, e.g. installed a rootkit in a hypervisor (or some Java code somehow was able to send over all our DOCX files from our home directory).<br /><br />Eventually the curious admin will find out that strange CPU instruction (the trigger) after which all the strange things had happened. Now, if the admin was able to take this code and replicate it, post it to Daily Dave, then, assuming his message would pass through the Moderator (Hi Dave), he would effectively compromise the processor vendor\'s reputation.<br /><br />An anti-replay mechanism could ideally be some sort of a challenge-response protocol used in a trigger. So, instead having you always to put 0xdeadbeaf, 0xbabecafe, and 0x41414141 into EAX, EBX and EDX and execute some magic instruction (say CMP), you would have to put a magic that is a result of some crypto operation, taking current date and magic key as input:<br /><br />Magic = MAGIC (Date, IntelSecretKey).<br /><br />The obvious problem is how the processor can obtain current date? It would have to talk to the south-bridge at best, which is 1) nontrivial, and 2) observable on a bus, and 3) spoof\'able.<br /><br />A much better idea would be to equip a processor with some sort of an eeprom memory, say big enough to hold one 64-bit or maybe 128-bit value. Each processor would get a different value flashed there when leaving the factory. Now, in order to trigger the backdoor, the processor vendor (or backdoor operator, think: NSA) would have to do the following:<br /><br />1) First execute some code that would read this unique value stored in eeprom for the particular target processor, and send this back to them,<br /><br />2) Now, they could generate the actual magic for the trigger:<br /><br />Magic = MAGIC (UniqeValueInEeprom, IntelSecretKey)<br /><br />3) ...and send the actual code to execute the backdoor and shellcode, with the correct trigger embedded, based on the magic value.<br /><br />Now, the point is that the processor will automatically increment the unique number stored in the eeprom, so the same backdoor-exploiting code would not work twice for the same processor (while at the same time it would be easy for NSA to send another exploit, as they know what the next value in the eeprom should be). Also, such a customized exploit would not work on any other CPU, as the assumption was that each CPU gets a different value at the factory, so again it would not be possible to replicate the attack and proved that the particular code has ever done something wrong.<br /><br />So, the moment I learn that processors have built-in eeprom memory, I will start thinking seriously there are backdoors out there :)<br /><br />One thing that bothers me with all those divagations about hypothetical backdoors in processors is that I find them pretty useless in at the end of the day. After all, by talking about those backdoors, and how they might be created, we do not make it any easier to protect against them, as there simply is no possible defense here. Also this doesn\'t make it any easier for us to build such backdoors (if we wanted to become the bad guys for a change). It might only be of an interest to Intel or AMD, or whatever else processor maker, but I somewhat feel they have already spent much more time thinking about it, and chances are they probably can only laugh at what we are saying here, seeing how unsophisticated our proposed backdoors are. So, my Dear Reader, I think you\'ve been just wasting time reading this post ;) Sorry for tricking you into this and I hope to write something more practical next time :)', 'guidislink': True, 'published': u'2009-06-02T00:16:00.003+02:00', u'thr_total': u'25'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=8, tm_mday=1, tm_hour=17, tm_min=36, tm_sec=41, tm_wday=5, tm_yday=213, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/6453215149663280165/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=6453215149663280165', 'type': u'text/html', 'rel': u'replies', 'title': u'6 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6453215149663280165', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6453215149663280165', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/05/thoughts-about-trusted-computing.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Thoughts About Trusted Computing'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-6453215149663280165', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=5, tm_mday=27, tm_hour=22, tm_min=58, tm_sec=0, tm_wday=2, tm_yday=147, tm_isdst=0), 'title': u'Thoughts About Trusted Computing', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'Here are the slides about Trusted Computing I used for my presentations at the EuSecWest today, and at the Confidence conference last week.As this was supposed to be a keynote, the slides are much less technical then our other slides, and also there are no new attacks presented there. Still, I hope they might be useful as some sort of an "alternative" introduction to Trusted Computing :)A cool presentation I saw today was about PCI-based backdoors by Christophe Devine and Guillaume Vissian. They basically took a general-purpose FPGA programmable PC-card (AKA PCMCIA), flashed it with an FPGA "program" that implemented a simple state machine. The purpose of the state machine was to wait until its DMA engine gets initialized and then to modify certain bytes in the host memory, that happened to be part of the winlogon.exe process (IIRC they changed XOR AL, AL into MOV AL, 1, or something like that, at the end of some password verification function inside the winlogon.exe process). The slides should be available soon on the conference website. I also hope they will publish all the source code needed to flash your own personal "winlogon unlocker".The live demo was really impressive \u2014 they showed a winlogon screen, tried to login a few times with wrong passwords, of course all the attempts failed, then they inserted their magic, $300 worth, PC-card, and\u2026 2 seconds later they could log in using any password they wanted.While not necessary being a breakthrough, as everybody has known such things could be done for years, I think it is still important that somebody eventually implemented this, discussed the technical details (FPGA-related), and also showed how to implement it with a cheap generic "reflashable" hardware without using a soldering iron.Of course I have also discussed in my presentation how to prevent PCI-based backdoors (like the one discussed here) using VT-d, but this defense is currently only available if you use Xen 3.3 or later, and also requires that you manually create driver domain partitions and come up with a reasonable scheme for assigning devices to driver domains. All in all 99.9% of users are not (and will not be anytime soon) protected against such attacks. Oh, wait, there is actually a relatively simple software-based workaround (besides putting a glue into your PC-card slot, which is not a very subtle one)\u2026 I wonder who else will find out :)', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Thoughts About Trusted Computing', 'language': None}, 'updated': u'2009-08-01T19:36:41.267+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'trusted computing', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'philosophical', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/05/thoughts-about-trusted-computing.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'<a href="http://invisiblethingslab.com/resources/misc09/trusted_computing_thoughts.pdf">Here</a> are the slides about Trusted Computing I used for my presentations at the <a href="http://eusecwest.com/agenda.html">EuSecWest</a> today, and at the <a href="http://2009.confidence.org.pl/agenda">Confidence</a> conference last week.<br /><br />As this was supposed to be a keynote, the slides are much less technical then our other slides, and also there are no new attacks presented there. Still, I hope they might be useful as some sort of an "alternative" introduction to Trusted Computing :)<br /><br />A cool presentation I saw today was about <a href="http://eusecwest.com/agenda.html">PCI-based backdoors</a> by Christophe Devine and Guillaume Vissian. They basically took a general-purpose FPGA programmable PC-card (AKA PCMCIA), flashed it with an FPGA "program" that implemented a simple state machine. The purpose of the state machine was to wait until its DMA engine gets initialized and then to modify certain bytes in the host memory, that happened to be part of the winlogon.exe process (IIRC they changed <span style="font-size: 85%;"><span style="font-family: courier new;">XOR AL, AL</span></span> into <span style="font-size: 85%;"><span style="font-family: courier new;">MOV AL, 1</span></span>, or something like that, at the end of some password verification function inside the winlogon.exe process). The slides should be available soon on the conference website. I also hope they will publish all the source code needed to flash your own personal "winlogon unlocker".<br /><br />The live demo was really impressive \u2014 they showed a winlogon screen, tried to login a few times with wrong passwords, of course all the attempts failed, then they inserted their magic, $300 worth, PC-card, and\u2026 2 seconds later they could log in using any password they wanted.<br /><br />While not necessary being a breakthrough, as everybody has known such things could be done for years, I think it is still important that somebody eventually implemented this, discussed the technical details (FPGA-related), and also showed how to implement it with a cheap generic "reflashable" hardware without using a soldering iron.<br /><br />Of course I have also discussed in my presentation how to prevent PCI-based backdoors (like the one discussed here) using VT-d, but this defense is currently only available if you use Xen 3.3 or later, and also requires that you manually create driver domain partitions and come up with a reasonable scheme for assigning devices to driver domains. All in all 99.9% of users are not (and will not be anytime soon) protected against such attacks. Oh, wait, there is actually a relatively simple software-based workaround (besides putting a glue into your PC-card slot, which is not a very subtle one)\u2026 I wonder who else will find out :)', 'guidislink': True, 'published': u'2009-05-28T00:58:00.004+02:00', u'thr_total': u'6'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=6, tm_mday=5, tm_hour=10, tm_min=19, tm_sec=15, tm_wday=4, tm_yday=156, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/2606319367477937236/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=2606319367477937236', 'type': u'text/html', 'rel': u'replies', 'title': u'33 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/2606319367477937236', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/2606319367477937236', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/03/trusting-hardware.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Trusting Hardware'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-2606319367477937236', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=13, tm_min=37, tm_sec=0, tm_wday=2, tm_yday=84, tm_isdst=0), 'title': u'Trusting Hardware', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'So, you\'re a decent paranoid person, running only open source software on your box: Linux, GNU, etc. You have the feeling you could, if you only wanted to, review every single line of code (of course you will probably never do this, but anyway). You might be even more paranoid and also try running an open source BIOS. You feel satisfied and cannot understand all those stupid people running closed source systems like e.g. Windows. Right?But here\'s where you are stuck \u2014 you still must trust your hardware. Trust that your hardware vendor has not e.g. built in a backdoor into your network card micro-controller\u2026So, if we buy a laptop from vendor X, that might be based in some not-fully-democratic country, how do we know they didn\'t put backdoors there? And not only to spy on Americans, also to spy on their own citizens? When was the last time you reverse-engineered all the PCI devices on your motherboard?Scared? Good!Enters the game-changer: IOMMU (known as VT-d on Intel). With proper OS/VMM design,  this technology can address the very problem of most of the hardware backdoors. A good example of a practical system that allows for that is Xen 3.3, which supports VT-d and allows you to move drivers into a separate, unprivileged driver domain(s). This way each PCI device can be limited to DMA only to the memory region occupied by its own driver.The network card\'s microcontroller can still compromise the network card driver, but nothing else. Assuming we are using only encrypted communication, there is not much an attacker can gain by compromising this network card driver, besides doing a DoS. Similarly for the disk driver \u2014 if we use full disk encryption (which is a good idea anyway), there is not much an attacker can gain from compromising the low-level disk driver.Obviously the design of such a system (especially used for desktop computing) is not trivial ans needs to be thoroughly thought out. But it is possible today(!), thanks to those new virtualization technologies.It seems than, that we could protect ourselves against potentially malicious hardware. With one exception however\u2026 we still need to trust the CPU and also the memory controller (AKA northbridge AKA chipset), that implements that IOMMU.On AMD systems, the memory controller has long been integrated into the processor. Also Intel\'s recent Nehalem processors integrate the memory controller on the same die.This all means we need to trust only one vendor (Intel or AMD) and only one component, i.e. The Processor. But should we blindly trust them? After all it would be trivial for Intel or AMD to build in a backdoor into their processor. Even something as simple as:if (rax == MAGIC_1 &amp;&amp; rcx == MAGIC_2) jmp [rbx]Just a few more gates in the CPU I guess (there are apparently already about 780 million gates on Core i7, so a few more should not make much difference), and no performance penalty. Exploitable remotely on most systems and any more complex program I guess. Yet, totally undetectable for anybody without an electron microscope (and tons of skills and knowledge).And this is just the simplest example that comes to mind within just a few minutes. I\'m sure one could come up with something even more universal and reliable. The fact is \u2014 if you are the CPU vendor, it is trivial for you to build in an effective backdoor.It\'s funny how various people, e.g. European government institutions, are afraid of using closed source software, e.g. Windows, because they are afraid of Microsoft putting backdoors there. Yet, they are not concerned about using processors made by some other US companies. It is significantly more risky for Microsoft to put a backdoor into its software, where even a skilled teenager equipped with IDA Pro can find it, than it is for Intel or AMD, where effectively nobody can find it.So, I wonder whether various government and large corporate customers from outside the US will start asking Intel and AMD to provide them with the exact blueprints of their processors. After all they already require Microsoft to provide them with the source code under an NDA, right? So, why not the "source code" for the processor?Unfortunately there is nothing that could stop a processor vendor to provide its customers with a different blueprints than those that are used to actually "burn" the processors. So, the additional requirement would be needed that they also allow to audit their manufacturing process. Another solution would be to hire some group of independent researchers, equip them with an electron microscope and let them reverse engineer some randomly chosen processors\u2026 Hmmm, I even know a team that would love to do that ;)A quick summary in case you get lost already:On most systems we are not protected against hardware backdoors, e.g. in the network card controller.New technologies, e.g. Intel VT-d, can allow to protect against potentially malicious hardware (requires specially designed OS, e.g. specially configured Xen)\u2026\u2026 except for the potential backdoors in the processor.If we don\'t trust Microsoft, why should we trust Intel or AMD?BTW, in May I will be speaking at the Confidence conference in Krakow, Poland. This is gonna be a keynote, so don\'t expect new attacks to be revealed, but rather some more philosophical stuff about trusted computing (why it is not evil) and problems like the one discussed today. See you there!', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Trusting Hardware', 'language': None}, 'updated': u'2009-06-05T12:19:15.291+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'trusted computing', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'philosophical', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'backdoors', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/03/trusting-hardware.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'So, you\'re a decent paranoid person, running only open source software on your box: Linux, GNU, etc. You have the feeling you could, if you only wanted to, review every single line of code (of course you will probably never do this, but anyway). You might be even more paranoid and also try running an <a href="http://www.openfirmware.info/">open source BIOS</a>. You feel satisfied and cannot understand all those stupid people running closed source systems like e.g. Windows. Right?<br /><br />But here\'s where you are stuck \u2014 you still must trust your hardware. Trust that your hardware vendor has not e.g. built in a backdoor into your network card micro-controller\u2026<br /><br />So, if we buy a laptop from vendor X, that might be based in some not-fully-democratic country, how do we know they didn\'t put backdoors there? And not only to spy on Americans, also to spy on their own citizens? When was the last time you reverse-engineered all the PCI devices on your motherboard?<br /><br />Scared? Good!<br /><br />Enters the game-changer: IOMMU (known as VT-d on Intel). With proper OS/VMM design,  this technology can address the very problem of most of the hardware backdoors. A good example of a practical system that allows for that is Xen 3.3, which supports VT-d and allows you to move drivers into a separate, unprivileged driver domain(s). This way each PCI device can be limited to DMA only to the memory region occupied by its own driver.<br /><br />The network card\'s microcontroller can still compromise the network card driver, but nothing else. Assuming we are using only encrypted communication, there is not much an attacker can gain by compromising this network card driver, besides doing a DoS. Similarly for the disk driver \u2014 if we use full disk encryption (which is a good idea anyway), there is not much an attacker can gain from compromising the low-level disk driver.<br /><br />Obviously the design of such a system (especially used for desktop computing) is not trivial ans needs to be thoroughly thought out. But it is possible today(!), thanks to those new virtualization technologies.<br /><br />It seems than, that we could protect ourselves against potentially malicious hardware. With one exception however\u2026 we still need to trust the CPU and also the memory controller (AKA northbridge AKA chipset), that implements that IOMMU.<br /><br />On AMD systems, the memory controller has long been integrated into the processor. Also Intel\'s recent Nehalem processors integrate the memory controller on the same die.<br /><br />This all means we need to trust only one vendor (Intel or AMD) and only one component, i.e. The Processor. But should we blindly trust them? After all it would be trivial for Intel or AMD to build in a backdoor into their processor. Even something as simple as:<br /><br /><span style="font-family: courier new;">if (rax == MAGIC_1 &amp;&amp; rcx == MAGIC_2) jmp [rbx]</span><br /><br />Just a few more gates in the CPU I guess (there are apparently already about 780 million gates on Core i7, so a few more should not make much difference), and no performance penalty. Exploitable remotely on most systems and any more complex program I guess. Yet, totally undetectable for anybody without an electron microscope (and tons of skills and knowledge).<br /><br />And this is just the simplest example that comes to mind within just a few minutes. I\'m sure one could come up with something even more universal and reliable. The fact is \u2014 if you are the CPU vendor, it is trivial for you to build in an effective backdoor.<br /><br />It\'s funny how various people, e.g. European government institutions, are afraid of using closed source software, e.g. Windows, because they are afraid of Microsoft putting backdoors there. Yet, they are not concerned about using processors made by some other US companies. It is significantly more risky for Microsoft to put a backdoor into its software, where even a skilled teenager equipped with IDA Pro can find it, than it is for Intel or AMD, where effectively nobody can find it.<br /><br />So, I wonder whether various government and large corporate customers from outside the US will start asking Intel and AMD to provide them with the exact blueprints of their processors. After all they already require Microsoft to provide them with the source code under an NDA, right? So, why not the "source code" for the processor?<br /><br />Unfortunately there is nothing that could stop a processor vendor to provide its customers with a different blueprints than those that are used to actually "burn" the processors. So, the additional requirement would be needed that they also allow to audit their manufacturing process. Another solution would be to hire some group of independent researchers, equip them with an electron microscope and let them reverse engineer some randomly chosen processors\u2026 Hmmm, I even know a team that would love to do that ;)<br /><br />A quick summary in case you get lost already:<br /><ol><li>On most systems we are not protected against hardware backdoors, e.g. in the network card controller.</li><li>New technologies, e.g. Intel VT-d, can allow to protect against potentially malicious hardware (requires specially designed OS, e.g. specially configured Xen)\u2026</li><li>\u2026 except for the potential backdoors in the processor.</li><li>If we don\'t trust Microsoft, why should we trust Intel or AMD?</li></ol>BTW, in May I will be speaking at the <a href="http://2009.confidence.org.pl/agenda">Confidence conference</a> in Krakow, Poland. This is gonna be a keynote, so don\'t expect new attacks to be revealed, but rather some more philosophical stuff about trusted computing (why it is not evil) and problems like the one discussed today. See you there!', 'guidislink': True, 'published': u'2009-03-25T14:37:00.008+01:00', u'thr_total': u'33'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=6, tm_mday=5, tm_hour=10, tm_min=18, tm_sec=45, tm_wday=4, tm_yday=156, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/6224623698776609952/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=6224623698776609952', 'type': u'text/html', 'rel': u'replies', 'title': u'11 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6224623698776609952', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6224623698776609952', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/03/sky-is-falling.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'The Sky Is Falling?'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-6224623698776609952', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=20, tm_hour=16, tm_min=20, tm_sec=0, tm_wday=4, tm_yday=79, tm_isdst=0), 'title': u'The Sky Is Falling?', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'A few reporters asked me if our recent paper on SMM attacking via CPU cache poisoning means the sky is really falling now?Interestingly, not many people seem to have noticed that this is the 3rd attack against SMM our team has found in the last 10 months. OMG :oBut anyway, does the fact we can easily compromise the SMM today, and write SMM-based malware, does that mean the sky is falling for the average computer user?No! The sky has actually fallen many years ago\u2026 Default users with admin privileges, monolithic kernels everywhere, most software unsigned and downloadable over plaintext HTTP \u2014 these are the main reasons we cannot trust our systems today.  And those pathetic attempts to fix it, e.g. via restricting admin users on Vista, but still requiring full admin rights to install any piece of stupid software. Or selling people illusion of security via A/V programs, that cannot even protect themselves properly\u2026It\'s also funny how so many people focus on solving the security problems by "Security by Correctness" or "Security by Obscurity"  approaches \u2014 patches, patches, NX and ASLR \u2014 all good, but it is not gonna work as an ultimate protection (if it could, it would worked out already).On the other hand, there are some emerging technologies out there that could allow us to implement effective "Security by Isolation" approach. Such technologies as VT-x/AMD-V, VT-d/IOMMU or Intel TXT and TPM.So we, at ITL, focus on analyzing those new technologies, even though almost nobody uses them today. Because those technologies could actually make the difference. Unlike A/V programs or Patch Tuesdays, those technologies can change the level of sophistication required for the attacker dramatically.The attacks we focus on are important for those new technologies \u2014 e.g. today Intel TXT is pretty much useless without protection from SMM attacks. And currently there is no such protection, which sucks. SMM rootkits sound sexy, but, frankly, the bad guys are doing just fine using traditional kernel mode malware (due to the fact that A/V is not effective). Of course, SMM rootkits are just yet another annoyance for the traditional A/V programs, which is good, but they might not be the most important consequence of SMM attacks.So, should the average Joe Dow care about our SMM attacks? Absolutely not!', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'The Sky Is Falling?', 'language': None}, 'updated': u'2009-06-05T12:18:45.340+02:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'philosophical', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'fighting for a better world', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/03/sky-is-falling.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'A few reporters asked me if our <a href="http://theinvisiblethings.blogspot.com/2009/03/attacking-smm-memory-via-intel-cpu.html">recent paper on SMM attacking</a> via CPU cache poisoning means the sky is really falling now?<br /><br />Interestingly, not many people seem to have noticed that this is the 3rd attack against SMM our team has found in the last 10 months. OMG :o<br /><br />But anyway, does the fact we can easily compromise the SMM today, and write SMM-based malware, does that mean the sky is falling for the average computer user?<br /><br />No! The sky has actually fallen many years ago\u2026 Default users with admin privileges, monolithic kernels everywhere, most software unsigned and downloadable over plaintext HTTP \u2014 these are the main reasons we cannot trust our systems today.  And those pathetic attempts to fix it, e.g. via restricting admin users on Vista, but still requiring full admin rights to install any piece of stupid software. Or selling people illusion of security via A/V programs, that cannot even protect themselves properly\u2026<br /><br />It\'s also funny how so many people focus on solving the security problems by <a href="http://theinvisiblethings.blogspot.com/2008/09/three-approaches-to-computer-security.html">"Security by Correctness" or "Security by Obscurity"</a>  approaches \u2014 patches, patches, NX and ASLR \u2014 all good, but it is not gonna work as an ultimate protection (if it could, it would worked out already).<br /><br />On the other hand, there are some emerging technologies out there that could allow us to implement effective <a href="http://theinvisiblethings.blogspot.com/2008/09/three-approaches-to-computer-security.html">"Security by Isolation"</a> approach. Such technologies as VT-x/AMD-V, VT-d/IOMMU or Intel TXT and TPM.<br /><br />So we, at ITL, <a href="http://invisiblethingslab.com/itl/Resources.html">focus on</a> analyzing those new technologies, even though almost nobody uses them today. Because those technologies could actually make the difference. Unlike A/V programs or Patch Tuesdays, those technologies can change the level of sophistication required for the attacker dramatically.<br /><br />The attacks we focus on are important for those new technologies \u2014 e.g. today Intel TXT is pretty much useless without protection from SMM attacks. And currently there is no such protection, which sucks. SMM rootkits sound sexy, but, frankly, the bad guys are doing just fine using traditional kernel mode malware (due to the fact that A/V is not effective). Of course, SMM rootkits are just yet another annoyance for the traditional A/V programs, which is good, but they might not be the most important consequence of SMM attacks.<br /><br />So, should the average Joe Dow care about our SMM attacks? Absolutely not!', 'guidislink': True, 'published': u'2009-03-20T17:20:00.003+01:00', u'thr_total': u'11'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=14, tm_min=8, tm_sec=59, tm_wday=2, tm_yday=84, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7397577755549629314/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=7397577755549629314', 'type': u'text/html', 'rel': u'replies', 'title': u'22 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7397577755549629314', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7397577755549629314', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/03/attacking-smm-memory-via-intel-cpu.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Attacking SMM Memory via Intel\xae CPU Cache Poisoning'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-7397577755549629314', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=19, tm_hour=16, tm_min=2, tm_sec=0, tm_wday=3, tm_yday=78, tm_isdst=0), 'title': u'Attacking SMM Memory via Intel  CPU Cache Poisoning', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u"As promised, the paper and the proof of concept code has just been posted on the ITL website here.A quote from the paper:In this paper we have described practical exploitation of the CPU cache poisoning in order to read or write into (otherwise protected) SMRAM memory. We have implemented two working exploits: one for dumping the content of SMRAM and the other one for arbitrary code execution in SMRAM. This is the third attack on SMM memory our team has found within the last 10 months, affecting Intel-based systems. It seems that current state of firmware security, even in case of such reputable vendors as Intel, is quite unsatisfying.The potential consequence of attacks on SMM might include SMM rootkits [9], hypervisor compromises [8], or OS kernel protection bypassing [2].Don't worry, the shellcode we use in the exploit is totally harmless (have really no idea how some people concluded we were going to release an SMM rootkit today?) \u2014 it only increases an internal counter on every SMI and jumps back to the original handler. If you want something more fancy, AKA SMM rootkits, you might want to re-read Sherri's and Shawn's last year's Black Hat paper and try writing something they describe there.The attack presented in the paper has been fixed on some systems according to Intel. We have however found out that even the relatively new boards, like e.g. Intel DQ35 are still vulnerable (the very recent Intel DQ45 doesn't seem to be vulnerable though). The exploit attached is for DQ35 board \u2014 the offsets would have to be changed to work on other boards (please do not ask how to do this).Keep in mind this is a different SMM attack than the one we mentioned during our last month's Black Hat presentation on TXT bypassing (the VU#127284). We are planning to present that other attack at the upcoming Black Hat Vegas. Hopefully this will not be the only one thing that ITL will entertain you with in Vegas \u2014  Alex and Rafal are already working now on something even cooler (and even lower level) for the show, so cross your fingers!And good luck to Loic with his presentation that is about to start just now...", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Attacking SMM Memory via Intel\xae CPU Cache Poisoning', 'language': None}, 'updated': u'2009-03-25T15:08:59.440+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'attack', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'smm', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'exploit', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/03/attacking-smm-memory-via-intel-cpu.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'As <a href="http://theinvisiblethings.blogspot.com/2009/03/independent-attack-discoveries.html">promised</a>, the paper and the proof of concept code has just been posted on the ITL website <a href="http://invisiblethingslab.com/itl/Resources.html">here</a>.<br /><br />A quote from the paper:<br /><blockquote>In this paper we have described practical exploitation of the CPU cache poisoning in order to read or write into (otherwise protected) SMRAM memory. We have implemented two working exploits: one for dumping the content of SMRAM and the other one for arbitrary code execution in SMRAM. This is the third attack on SMM memory our team has found within the last 10 months, affecting Intel-based systems. It seems that current state of firmware security, even in case of such reputable vendors as Intel, is quite unsatisfying.<br /><br />The potential consequence of attacks on SMM might include SMM rootkits [9], hypervisor compromises [8], or OS kernel protection bypassing [2].<br /></blockquote>Don\'t worry, the shellcode we use in the exploit is totally harmless (have really no idea how some people concluded we were going to release an SMM rootkit today?) \u2014 it only increases an internal counter on every SMI and jumps back to the original handler. If you want something more fancy, AKA SMM rootkits, you might want to re-read Sherri\'s and Shawn\'s last year\'s <a href="http://www.eecs.ucf.edu/%7Eczou/research/SMM-Rootkits-Securecom08.pdf">Black Hat paper</a> and try writing something they describe there.<br /><br />The attack presented in the paper has been fixed on some systems according to Intel. We have however found out that even the relatively new boards, like e.g. <a href="http://www.intel.com/products/desktop/motherboards/DQ35JO/DQ35JO-overview.htm">Intel DQ35</a> are still vulnerable (the very recent <a href="http://www.intel.com/products/desktop/motherboards/DQ45CB/DQ45CB-overview.htm">Intel DQ45</a> doesn\'t seem to be vulnerable though). The exploit attached is for DQ35 board \u2014 the offsets would have to be changed to work on other boards (please do not ask how to do this).<br /><br />Keep in mind this is a different SMM attack than the one we mentioned during our last month\'s Black Hat presentation on <a href="http://invisiblethingslab.com/resources/bh09dc/Attacking%20Intel%20TXT%20-%20slides.pdf">TXT bypassing</a> (the VU#127284). We are planning to present that other attack at the upcoming Black Hat Vegas. Hopefully this will not be the only one thing that ITL will entertain you with in Vegas \u2014  Alex and Rafal are already working now on something even cooler (and even lower level) for the show, so cross your fingers!<br /><br />And good luck to Loic with <a href="http://cansecwest.com/agenda.html">his presentation</a> that is about to start just now...', 'guidislink': True, 'published': u'2009-03-19T17:02:00.001+01:00', u'thr_total': u'22'}
{'cprob': 1.0, 'updated': u'2009-03-19T22:18:53.049+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'security', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=19, tm_hour=21, tm_min=18, tm_sec=53, tm_wday=3, tm_yday=78, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=13, tm_hour=12, tm_min=22, tm_sec=0, tm_wday=4, tm_yday=72, tm_isdst=0), 'title': u'Independent Attack Discoveries', 'pred': 'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/8073648126971577076/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=8073648126971577076', 'type': u'text/html', 'rel': u'replies', 'title': u'17 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8073648126971577076', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8073648126971577076', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/03/independent-attack-discoveries.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Independent Attack Discoveries'}], 'summary': u'Next week\'s Thursday, March 19th, 1600 UTC, we will publish a paper (+ exploits) on exploiting Intel\xae CPU cache mechanisms.<br /><br />The attack allows for privilege escalation from Ring 0 to the SMM on many recent motherboards with Intel CPUs. Interestingly,<span style="font-style: italic;"> the very same attack</span> will be presented by another researcher, Loic Duflot, at the CanSecWest conference in Vancouver, Canada, on... <a href="http://cansecwest.com/agenda.html">Thursday 19th, 1600 UTC</a>. BTW, this is a <span style="font-style: italic;">different </span>SMM-targeting attack than the one we mentioned during our recent <a href="http://invisiblethingslab.com/itl/Resources.html">TXT talk</a> and that is scheduled to be presented later this year.<br /><br />Here\'s the full story (there is also a moral at the end) \u2026<br /><br />Just after our presentation at the Black Hat last month, we (i.e. Rafal and I) have been independently approached by some person (or two different persons \u2014 we haven\'t figured that out actually \u2014 there were some ca. 30 people willing to ask us questions after the talk, so it\'s hard to remember all the faces), who was very curious about our SMM attacks (whose details we haven\'t discussed, of course, because Intel is still working on a fix). This person(s) started asking various questions about the attacks and one of the questions, that was asked to both me and Rafal, was if the attack used caching. Later that day, during a private ITL dinner, one of us brought this issue, and we started thinking if it was indeed possible to perform an SMM attack via CPU caching. By the end of the dinner we have sketched out the attack, and later when we got back to Poland, Rafal implemented a working exploit with code execution in SMM in  a matter of just a few hours. (I think I used way too many parenthesis in this paragraph).<br /><br />So, being the good and responsible guys that we are, we immediately reported the new bug to Intel (actually talking to Intel\'s PSIRT is getting more and more routined for us in the recent months ;). And this is how we learnt that Loic came up with the same attack (back then there was no talk description at the conference website) \u2014 apparently he approached Intel about this back in October 2008, so 3-4 months before us \u2014 and also that he\'s planning to present it at the CanSecWest conference in March. So, we contacted Loic and agreed to do coordinated disclosure next Thursday.<br /><br />Interestingly, however, none of us was even close to being the first discoverer of the underlying problem that our attacks exploit. In fact, the first mention of the possible attack using caching for compromising SMM has been discussed in certain documents authored as early as the end of 2005 (!) by nobody else than... Intel\'s own employees. Stay tuned for the details in our upcoming paper.<br /><br /><span style="font-weight: bold;">Conclusion<br /><br /></span>If there is a bug somewhere and if it stays unpatched for enough time, it is almost guaranteed that various people will (re)discover and exploit it, sooner or later. So, don\'t blame researchers that they find and publish information about bugs \u2014 they actually do a favor to our society. Remember the guy who asked us if our attack used caching? I bet he (or his associates) also have had exploits for this caching bug, but apparently didn\'t notify the vendor. Hmm, what they might have been doing with the exploit? When was the last time you scanned your system for SMM rootkits? ;)<br /><br />Anyways, congrats to Loic for being the first one who wrote exploits for this bug. Also congrats to Intel employees who originally noticed the problem back in 2005.', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u"Next week's Thursday, March 19th, 1600 UTC, we will publish a paper (+ exploits) on exploiting Intel  CPU cache mechanisms.The attack allows for privilege escalation from Ring 0 to the SMM on many recent motherboards with Intel CPUs. Interestingly, the very same attack will be presented by another researcher, Loic Duflot, at the CanSecWest conference in Vancouver, Canada, on... Thursday 19th, 1600 UTC. BTW, this is a different SMM-targeting attack than the one we mentioned during our recent TXT talk and that is scheduled to be presented later this year.Here's the full story (there is also a moral at the end) \u2026Just after our presentation at the Black Hat last month, we (i.e. Rafal and I) have been independently approached by some person (or two different persons \u2014 we haven't figured that out actually \u2014 there were some ca. 30 people willing to ask us questions after the talk, so it's hard to remember all the faces), who was very curious about our SMM attacks (whose details we haven't discussed, of course, because Intel is still working on a fix). This person(s) started asking various questions about the attacks and one of the questions, that was asked to both me and Rafal, was if the attack used caching. Later that day, during a private ITL dinner, one of us brought this issue, and we started thinking if it was indeed possible to perform an SMM attack via CPU caching. By the end of the dinner we have sketched out the attack, and later when we got back to Poland, Rafal implemented a working exploit with code execution in SMM in  a matter of just a few hours. (I think I used way too many parenthesis in this paragraph).So, being the good and responsible guys that we are, we immediately reported the new bug to Intel (actually talking to Intel's PSIRT is getting more and more routined for us in the recent months ;). And this is how we learnt that Loic came up with the same attack (back then there was no talk description at the conference website) \u2014 apparently he approached Intel about this back in October 2008, so 3-4 months before us \u2014 and also that he's planning to present it at the CanSecWest conference in March. So, we contacted Loic and agreed to do coordinated disclosure next Thursday.Interestingly, however, none of us was even close to being the first discoverer of the underlying problem that our attacks exploit. In fact, the first mention of the possible attack using caching for compromising SMM has been discussed in certain documents authored as early as the end of 2005 (!) by nobody else than... Intel's own employees. Stay tuned for the details in our upcoming paper.ConclusionIf there is a bug somewhere and if it stays unpatched for enough time, it is almost guaranteed that various people will (re)discover and exploit it, sooner or later. So, don't blame researchers that they find and publish information about bugs \u2014 they actually do a favor to our society. Remember the guy who asked us if our attack used caching? I bet he (or his associates) also have had exploits for this caching bug, but apparently didn't notify the vendor. Hmm, what they might have been doing with the exploit? When was the last time you scanned your system for SMM rootkits? ;)Anyways, congrats to Loic for being the first one who wrote exploits for this bug. Also congrats to Intel employees who originally noticed the problem back in 2005.", 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Independent Attack Discoveries', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2009/03/independent-attack-discoveries.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2009-03-13T13:22:00.004+01:00', u'thr_total': u'17', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-8073648126971577076'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=19, tm_hour=21, tm_min=23, tm_sec=4, tm_wday=3, tm_yday=78, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/6448095799043943721/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=6448095799043943721', 'type': u'text/html', 'rel': u'replies', 'title': u'2 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6448095799043943721', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6448095799043943721', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/02/attacking-intel-txt-paper-and-slides.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Attacking Intel TXT: paper and slides'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-6448095799043943721', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=2, tm_mday=19, tm_hour=21, tm_min=23, tm_sec=0, tm_wday=3, tm_yday=50, tm_isdst=0), 'title': u'Attacking Intel TXT: paper and slides', 'pred': 'announcements', 'cprob': 0.997, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u"The new press release covering the basic details about our TXT attack is here.The paper is here.The slides converted to a PDF format are here. There is also an original version of slides in the Keynote format here for the Mac people. And for all the other people who don't use Mac, but still value the aesthetics (?!), I have also generated a QuickTime clickable movie out from the Keynote slides -- it can be found here, but it weighs 80MB.Enjoy.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Attacking Intel TXT: paper and slides', 'language': None}, 'updated': u'2009-03-19T22:23:04.772+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'attack', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'tpm', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted execution technology', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted computing', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'smm', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'exploit', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/02/attacking-intel-txt-paper-and-slides.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'paper', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'The new press release covering the basic details about our TXT attack is <a href="http://invisiblethingslab.com/press/itl-press-2009-02.pdf">here</a>.<br /><br />The paper is <a href="http://invisiblethingslab.com/resources/bh09dc/Attacking%20Intel%20TXT%20-%20paper.pdf">here</a>.<br /><br />The slides converted to a PDF format are <a href="http://invisiblethingslab.com/resources/bh09dc/Attacking%20Intel%20TXT%20-%20slides.pdf">here</a>. There is also an original version of slides in the Keynote format <a href="http://invisiblethingslab.com/resources/bh09dc/Attacking%20Intel%20TXT%20-%20slides.key.zip">here</a> for the Mac people. And for all the other people who don\'t use Mac, but still value the aesthetics (?!), I have also generated a QuickTime clickable movie out from the Keynote slides -- it can be found <a href="http://invisiblethingslab.com/resources/bh09dc/Attacking%20Intel%20TXT%20-%20slides.mov">here</a>, but it weighs 80MB.<br /><br />Enjoy.', 'guidislink': True, 'published': u'2009-02-19T22:23:00.005+01:00', u'thr_total': u'2'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=19, tm_hour=21, tm_min=19, tm_sec=50, tm_wday=3, tm_yday=78, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/8942873381242351403/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=8942873381242351403', 'type': u'text/html', 'rel': u'replies', 'title': u'1 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8942873381242351403', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8942873381242351403', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/02/nesting-vmms-reloaded.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Nesting VMMs, Reloaded.'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-8942873381242351403', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=2, tm_mday=10, tm_hour=17, tm_min=30, tm_sec=0, tm_wday=1, tm_yday=41, tm_isdst=0), 'title': u'Nesting VMMs, Reloaded.', 'pred': 'announcements', 'cprob': 0.997, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u"Besides breaking the Intel's stuff, we have also been doing other things over at our lab. Thought I would share this cool screenshot of a Virtual PC running inside Xen. More precisely what you see on the pic is: Windows XP running inside Virtual PC, that runs inside Vista, which itself runs inside a Xen's HVM VM. Both the Virtual PC and Xen are using the Intel's hardware virtualization (VT-x is always used for HVM guests on Xen).Our Nested Xen patch is part of a work done for a customer, so it is not going to be published. Besides it is currently a bit unstable ;) It's just a prototype that shows such a thing could be done.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Nesting VMMs, Reloaded.', 'language': None}, 'updated': u'2009-03-19T22:19:50.619+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'xen hacking', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'nested virtualization', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/02/nesting-vmms-reloaded.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://3.bp.blogspot.com/_Ti3q3Hdvels/SZG7hylIacI/AAAAAAAAAD4/hjm246CQygk/s72-c/XP+inside+VPC+inside+Vista+inside+Xen.001.png', 'width': u'72', 'height': u'72'}], 'summary': u'Besides <a href="http://theinvisiblethings.blogspot.com/2009/01/attacking-intel-trusted-execution.html">breaking the Intel\'s stuff</a>, we have also been doing other things over at our lab. Thought I would share this cool screenshot of a Virtual PC running inside Xen. More precisely what you see on the pic is: Windows XP running inside Virtual PC, that runs inside Vista, which itself runs inside a Xen\'s HVM VM. Both the Virtual PC and Xen are using the Intel\'s hardware virtualization (VT-x is always used for HVM guests on Xen).<br /><br />Our Nested Xen patch is part of a work done for a customer, so it is not going to be published. Besides it is currently a bit unstable ;) It\'s just a prototype that shows such a thing could be done.<br /><br /><a href="http://3.bp.blogspot.com/_Ti3q3Hdvels/SZG7hylIacI/AAAAAAAAAD4/hjm246CQygk/s1600-h/XP+inside+VPC+inside+Vista+inside+Xen.001.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5301224425579375042" src="http://3.bp.blogspot.com/_Ti3q3Hdvels/SZG7hylIacI/AAAAAAAAAD4/hjm246CQygk/s320/XP+inside+VPC+inside+Vista+inside+Xen.001.png" style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 320px; height: 200px;" /></a>', 'guidislink': True, 'published': u'2009-02-10T18:30:00.007+01:00', u'thr_total': u'1'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=19, tm_hour=21, tm_min=19, tm_sec=30, tm_wday=3, tm_yday=78, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/5520926602674392865/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=5520926602674392865', 'type': u'text/html', 'rel': u'replies', 'title': u'25 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/5520926602674392865', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/5520926602674392865', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/01/closed-source-conspiracy.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Closed Source Conspiracy'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-5520926602674392865', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=1, tm_mday=26, tm_hour=16, tm_min=56, tm_sec=0, tm_wday=0, tm_yday=26, tm_isdst=0), 'title': u'Closed Source Conspiracy', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'Many people in the industry have an innate fear of closed source (AKA proprietary software), which especially applies to everything crypto-related.The usual arguments go this way: this (proprietary) crypto software is bad, because the vendor might have put some backdoors in there. And: only the open source crypto software, which can be reviewed by anyone, can be trusted! So, after my recent post, quite a few people wrote to me and asked how I could defend such an evil thing as BitLocker, which is proprietary, and, even worse, comes from Microsoft?I personally think this way of reasoning sucks. In majority of cases, the fact something is distributed without the accompanying source code does not prevent others from analyzing the code. We do have advanced disassemblers and debuggers, and it is really not that difficult to make use of them as many people think.Of course, some heavily obfuscated programs can be extremely difficult to analyze. Also, analyzing a chipset\'s firmware, when you do not even know the underlying CPU architecture and the I/O map might be hard. But these are special cases and do not apply to majority of software, that usually is not obfuscated at all.It seems like the argument of Backdoored Proprietary Software usually comes from the open-source people, who are used to unlimited accesses to the source code, and consequently do not usually have much experience with advanced reverse engineer techniques, simply because they do not need them in their happy "Open Source Life". It\'s all Darwinism, after all ;)On the other hand, some things are hard to analyze, regardless of whether the source code is available or not, think: crypto. Also, how many of you who actively use open source crypto software, e.g. TrueCrypt or GnuPG, have actually reviewed the source code? Anyone?You might be thinking \u2014 maybe I haven\'t looked at the source code myself, but because it is open source, zillions of other users already have reviewed it. And if there was some backdoor in there, they would undoubtedly have found it already! Well, for all those open source fetishists, who blindly negate the value of anything that is not open source, I have only one word to say: Debian.Keep in mind: I do not say closed source is more secure than open source \u2014 I only resist the open-source fundamentalism, that defines every proprietary software as inherently insecure, and everything open source as ultimately secure.So, how should one (e.g. a government institution) verify security-level of a given crypto software, e.g. to ensure there are no built-in backdoors in there? I personally doubt it could be performed by one team, as it just usually happens that the same people who might be exceptionally skilled in code review, system-level security, etc, at the same time are average cryptographers and vice-versa.Imagine e.g. that you need to find out if there are any weaknesses in your system drive encryption software, something like BitLocker. Even if you get access to the source code, you still would have to analyze a lot of system-level details \u2014 how is the trusted boot implemented (SRTM? DRTM? TPM interaction?), which system software is trusted, how the implementation withstands various not-crypto-related attacks (e.g. some of the attacks I described in my previous post), etc\u2026But this all is just system-level evaluation. What should come later is to analyze the actual crypto algorithms and protocols. Those later tasks fall into cryptography field and not into system-level security discipline, and consequently should be performed by some other team, the crypto experts.So, no doubt, it is not an easy task, and the fact if there is or there is not C/C++ source code available, is usually one of the minor headaches (a good example is our attack on TXT, where we were able to discover bugs in Intel\'s specific system software, which, of course, is not open source).', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Closed Source Conspiracy', 'language': None}, 'updated': u'2009-03-19T22:19:30.493+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'philosophical', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/01/closed-source-conspiracy.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'Many people in the industry have an innate fear of closed source (AKA proprietary software), which especially applies to everything crypto-related.<br /><br />The usual arguments go this way: this (proprietary) crypto software is bad, because the vendor might have put some backdoors in there. And: only the open source crypto software, which can be reviewed by anyone, can be trusted! So, after my <a href="http://theinvisiblethings.blogspot.com/2009/01/why-do-i-miss-microsoft-bitlocker.html">recent post</a>, quite a few people wrote to me and asked how I could defend such an evil thing as BitLocker, which is proprietary, and, even worse, comes from Microsoft?<br /><br />I personally think this way of reasoning sucks. In majority of cases, the fact something is distributed without the accompanying source code does not prevent others from analyzing the code. We do have advanced disassemblers and debuggers, and it is really not that difficult to make use of them as many people think.<br /><br />Of course, some heavily obfuscated programs can be extremely difficult to analyze. Also, analyzing a chipset\'s firmware, when you do not even know the underlying CPU architecture and the I/O map might be hard. But these are special cases and do not apply to majority of software, that usually is not obfuscated at all.<br /><br />It seems like the argument of Backdoored Proprietary Software usually comes from the open-source people, who are used to unlimited accesses to the source code, and consequently do not usually have much experience with advanced reverse engineer techniques, simply because they do not need them in their happy "Open Source Life". It\'s all Darwinism, after all ;)<br /><br />On the other hand, some things are hard to analyze, regardless of whether the source code is available or not, think: crypto. Also, how many of you who actively use open source crypto software, e.g. TrueCrypt or GnuPG, have actually reviewed the source code? Anyone?<br /><br />You might be thinking \u2014 maybe I haven\'t looked at the source code myself, but because it is open source, <span style="font-style: italic;">zillions</span> of other users already have reviewed it. And if there was some backdoor in there, they would undoubtedly have found it already! Well, for all those open source fetishists, who blindly negate the value of anything that is not open source, I have only one word to say: <a href="http://metasploit.com/users/hdm/tools/debian-openssl/">Debian</a>.<br /><br /><span style="font-weight: bold;">Keep in mind:</span> I do not say closed source is more secure than open source \u2014 I only resist the open-source fundamentalism, that defines every proprietary software as inherently insecure, and everything open source as ultimately secure.<br /><br />So, how should one (e.g. a government institution) verify security-level of a given crypto software, e.g. to ensure there are no built-in backdoors in there? I personally doubt it could be performed by one team, as it just usually happens that the same people who might be exceptionally skilled in code review, system-level security, etc, at the same time are average cryptographers and vice-versa.<br /><br />Imagine e.g. that you need to find out if there are any weaknesses in your system drive encryption software, something like BitLocker. Even if you get access to the source code, you still would have to analyze a lot of system-level details \u2014 how is the trusted boot implemented (SRTM? DRTM? TPM interaction?), which system software is trusted, how the implementation withstands various not-crypto-related attacks (e.g. some of the attacks I described in my <a href="http://theinvisiblethings.blogspot.com/2009/01/why-do-i-miss-microsoft-bitlocker.html">previous post</a>), etc\u2026<br /><br />But this all is just system-level evaluation. What should come later is to analyze the actual crypto algorithms and protocols. Those later tasks fall into cryptography field and not into system-level security discipline, and consequently should be performed by some other team, the crypto experts.<br /><br />So, no doubt, it is not an easy task, and the fact if there is or there is not C/C++ source code available, is usually one of the minor headaches (a good example is our <a href="http://theinvisiblethings.blogspot.com/2009/01/attacking-intel-trusted-execution.html">attack on TXT</a>, where we were able to discover bugs in Intel\'s <span style="font-style: italic;">specific system software</span>, which, of course, is not open source).', 'guidislink': True, 'published': u'2009-01-26T17:56:00.004+01:00', u'thr_total': u'25'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=19, tm_hour=21, tm_min=20, tm_sec=7, tm_wday=3, tm_yday=78, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/104514077420707012/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=104514077420707012', 'type': u'text/html', 'rel': u'replies', 'title': u'23 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/104514077420707012', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/104514077420707012', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/01/why-do-i-miss-microsoft-bitlocker.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Why do I miss Microsoft BitLocker?'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-104514077420707012', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=1, tm_mday=21, tm_hour=17, tm_min=52, tm_sec=0, tm_wday=2, tm_yday=21, tm_isdst=0), 'title': u'Why do I miss Microsoft BitLocker?', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'In the previous post, I wrote the only one thing I really miss after I\'ve switched from Vista to Mac is the BitLocker Driver Encryption. I thought it might be interesting for others to understand my position, so below I describe why I think BitLocker is so cool, and why I think other system disk encryption software sucks.So, it\'s all about the Trusted Boot. BitLocker does make use of a trusted boot process, while all the other system encryption software I\'m aware of, does not. But why the trusted boot feature is so useful? Let\'s start with a quick digression about what the trusted boot process is\u2026Trusted boot can be implemented using either a Static Root of Trust  or a Dynamic Root of Trust.The Static Root of Trust approach (also known as Static Root of Trust Measurement or SRTM) is pretty straightforward \u2014 the system starts booting from some immutable piece of firmware code that we assume is always trusted (hence the static root) and that initiates the measurement process, in which each component measures the next one in a chain. So, e.g. this immutable piece of firmware will first calculate the hash of the BIOS and extend a TPM\'s PCR register with the value of this hash. Then the BIOS does the same with the PCI EEPROMs and the MBR, before handling execution to them. Then the bootloader measures the OS loader before executing it. And so on.An alternative method to implementing trusted boot is to use Dynamic Root of Trust (often called Dynamic Root of Trust Measurement or DRTM). Intel\'s TXT technology, formerly LaGrande, is an example of a DRTM (more precisely: TXT is more than just DRTM, but DRTM is the central concept on which TXT is built). We will be talking a lot about TXT next month at Black Hat in DC :) This will include discussion of why DRTM might sometimes be preferred over SRTM and, of course, what are the challenges with both.Essentially, both SRTM and DRTM, in the context of a trusted boot, are supposed to provide the same: assurance the system that just booted is actually the system that we wanted to boot (i.e. the trusted one) and not some modified system (e.g. compromised by an MBR virus).BitLocker uses the Static Root of Trust Measurement. SRTM can really make sense when we combine it with either TPM sealing or attestation feature. BitLocker uses the former to make sure that only the trusted system can get access to the disk decryption key. In other words: BitLocker relies on the TPM that it will unseal (release) the decryption key (needed to decrypt the system partition) when and only when the state of chosen PCR registers is the same is it was when the decryption key was sealed into the TPM.Ok, why is this trusted boot process so important for the system disk encryption software? Because it protects against a simple two-stage attack:You leave your laptop (can be even fully powered down) in a hotel room and go down for a breakfast\u2026 Meanwhile an Evil Maid enters your room. She holds an Evil USB stick in her hand and plugs it into your laptop and presses the power button. The system starts and boots from the USB. An Evil version of something similar to our BluePillBoot gets installed into the MBR (or to a PCI EEPROM). This Evil Program has only one task \u2014 to sniff out the encryption software\'s password/PIN and then report it back to the maid next time she comes...So, you come back to your room to brush your teeth after the breakfast. Obviously you cannot refrain from not turning on your laptop for a while. You just need to enter your disk encryption passphrase/PIN/whatever. Your encryption software happily displays the prompt, like if nothing happened. After all how could it possibly know the Evil Program, like BluePillBoot, has just been loaded a moment ago from the MBR or a PCI EEPROM? It can not! So, you enter the valid password, your system gets the decryption key and you can get access to your encrypted system...But then you have an appointment at the hotel SPA (at least this little fun you can have on a business trip, right?). Obviously you don\'t want to look so geeky and you won\'t take your laptop with you to the SPA, will you? The Evil Maid just waited for this occasion\u2026 She sneaks again into your room and powers up your laptop. She presses a magic key combo, which results in the Evil Program displaying the sniffed decryption password. Now, depending on their level of subtleness, she could either steal your whole laptop or only some more important data from the laptop. Your system disk encryption software is completely useless against her now.(Yes, I know that\'s 3 bullets, but the Evil Maid had to sneak into your room only twice:)So, why the BitLocker would not allow for this simple attack? Because the BitLocker software should actually be able to know that the system gets compromised (by the Evil Program) since the last boot. BitLocker should then refuse to display a password prompt. And even if it didn\'t and asked the user for the password, still it should not be able to get the actual decryption key out from the TPM, because the values in the certain PCR register(s) will be wrong (they will now account for the modified hashes of the MBR or PCI EEPROM or BIOS). The bottom line is: the maid is not getting the decryption key (just as the user now), which is what this is all about.At least this is how the BitLocker should work. I shall add a disclaimer here, that neither myself, nor anybody from my team, have looked into the BitLocker implementation. We have not, because, as of yet, there have been no customers interested in this kind of BitLocker implementation evaluation. Also, I should add that Microsoft has not paid me to write this article. I simply hope this might positively stimulate other vendors, like e.g. TrueCrypt (Hi David!), or Apple, to add SRTM or, better yet, DRTM, to their system encryption products.Of course, when we consider an idiot-attack, that involves simply garbbing somebody\'s laptop and running away with it (i.e. without any prior preparation like our Evil Maid did), then probably all system disk encryption software would be just good enough (assuming it doesn\'t have any bugs in the crypto code).Some people might argue that using a BIOS password would be just as good as using trusted boot. After all, if we disable booting from alternate media in BIOS (e.g. from USB sticks) and lock down the BIOS using a password (i.e. using the Power-On password, not just the BIOS supervisor password), then the above two-stage attacks should not be feasible. Those people might argue, that even if the Evil Maid had cleared the CMOS memory (by removing the CMOS battery from the motherboard), still they would be able to notice that something is wrong \u2014 the BIOS would not longer be asking for the password, or the password would be different from what they used before.That is a valid point, but relaying on the BIOS password to provide security for all your data might not be such a good idea. First problem is that all the BIOSes have had a long history of various default or "maintenance" passwords (I actually do not know how the situation looks today with those default passwords). Another problem is that the attacker might first clear the CMOS memory, and then modify her Evil MBR program to also display a fake BIOS password prompt, that would accept anything the user enters. This way the user will not be alerted that something is wrong and will be willing to provide the real password for drive decryption when prompted later by the actual drive encryption software.One might ask why can\'t the attacker use the similar attack against BitLocker? Even if the real BitLocker uses trusted boot process, we can still infect the MBR, display the fake BitLocker PIN prompt and this way get into the possession of the user\'s PIN.This attack, however, can be spotted by an inquisitive user \u2014 after all, if he or she knows they provided the correct PIN, then it would be suspicious not to see the system being booted (and it won\'t boot, because the fake BitLocker will not be able to retrieve the password from the TPM). If the fake BitLocker wanted to boot the OS (so that user didn\'t suspect anything), it would have to remove itself from the system and then reboot the system. Again this should alert the user that something wrong is going on.There is also a much more elegant way of defending against the above attack (with fake BitLocker prompt) \u2014 but I\'d rather let Microsoft to figure it out by themselves ;)By the way, contrary to a popular belief the BitLocker doesn\'t protect your computer from boot-stage infections, e.g. MBR viruses or BIOS/PCI rootkits. As we have been pointing out since the first edition of our Understanding Stealth Malware training at Black Hat in August 2007, BitLocker should not be thought as of a system integrity protection. This is because it is trivial, for any malware that already got access to the running Vista, to re-seal the BitLocker key to arbitrary new system firmware/MBR configuration. Everybody can try it by going to Control Panel/BitLocker Driver Encryption, then clicking on the "Turn Off BitLocker" and choosing "Disable BitLocker Drive Encryption". This will simply save your disk decryption key in plaintext, allowing you to e.g. reflash your BIOS, boot Vista again and then to enable BitLocker again (this would generate a new key and seal it to the TPM with the new PCR values).This functionality has been provided obviously to allow user to update his or her firmware. But what is important to keep in mind is that this process of disabling BitLocker doesn\'t involve entering any special password or PIN (e.g. the BitLocker\'s PIN). It just enough that you are the default user with admin rights or some malware running in this context. Pity they decided on the simplest solution here. But still BitLocker is simply the one coolest thing in Vista and something I really miss on all other OSes...', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Why do I miss Microsoft BitLocker?', 'language': None}, 'updated': u'2009-03-19T22:20:07.269+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'bitlocker', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'disk encryption', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'tpm', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted computing', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/01/why-do-i-miss-microsoft-bitlocker.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://1.bp.blogspot.com/_Ti3q3Hdvels/SXdjHwkIqMI/AAAAAAAAADo/l3tgqzzQ4Es/s72-c/evil+maid.jpg', 'width': u'72', 'height': u'72'}], 'summary': u'In the <a href="http://theinvisiblethings.blogspot.com/2009/01/attacking-intel-trusted-execution.html">previous post</a>, I wrote the only one thing I really miss after I\'ve switched from Vista to Mac is the <a href="http://www.microsoft.com/windows/windows-vista/features/bitlocker.aspx">BitLocker Driver Encryption</a>. I thought it might be interesting for others to understand my position, so below I describe why I think BitLocker is so cool, and why I think other system disk encryption software sucks.<br /><br />So, it\'s all about the <span style="font-style: italic;">Trusted Boot</span>. BitLocker does make use of a trusted boot process, while all the other system encryption software I\'m aware of, does not. But why the trusted boot feature is so useful? Let\'s start with a quick digression about what the trusted boot process is\u2026<br /><br />Trusted boot can be implemented using either a <span style="font-style: italic;">Static Root of Trust</span>  or a <span style="font-style: italic;">Dynamic Root of Trust</span>.<br /><br />The Static Root of Trust approach (also known as Static Root of Trust Measurement or SRTM) is pretty straightforward \u2014 the system starts booting from some immutable piece of firmware code that we assume is always trusted (hence the static root) and that initiates the measurement process, in which each component measures the next one in a chain. So, e.g. this immutable piece of firmware will first calculate the hash of the BIOS and <a href="http://www.cs.bham.ac.uk/%7Emdr/teaching/modules/security/lectures/TrustedComputingTCG.html">extend </a>a TPM\'s PCR register with the value of this hash. Then the BIOS does the same with the PCI EEPROMs and the MBR, before handling execution to them. Then the bootloader measures the OS loader before executing it. And so on.<br /><br />An alternative method to implementing trusted boot is to use Dynamic Root of Trust (often called Dynamic Root of Trust Measurement or DRTM). Intel\'s <a href="http://www.intel.com/technology/security/">TXT technology</a>, formerly LaGrande, is an example of a DRTM (more precisely: TXT is more than just DRTM, but DRTM is the central concept on which TXT is built). We will be <a href="http://www.blackhat.com/html/bh-dc-09/bh-dc-09-speakers.html#Wojtczuk">talking a lot about TXT</a> next month at Black Hat in DC :) This will include discussion of why DRTM might sometimes be preferred over SRTM and, of course, what are the challenges with both.<br /><br />Essentially, both SRTM and DRTM, in the context of a trusted boot, are supposed to provide the same: assurance the system that just booted is actually the system that we wanted to boot (i.e. the trusted one) and not some modified system (e.g. compromised by an MBR virus).<br /><br />BitLocker uses the Static Root of Trust Measurement. SRTM can really make sense when we combine it with either TPM <span style="font-style: italic;">sealing </span>or <span style="font-style: italic;">attestation </span>feature. BitLocker uses the former to make sure that only the trusted system can get access to the disk decryption key. In other words: BitLocker relies on the TPM that it will unseal (release) the decryption key (needed to decrypt the system partition) when and only when the state of chosen PCR registers is the same is it was when the decryption key was sealed into the TPM.<br /><br />Ok, why is this trusted boot process so important for the system disk encryption software? Because it protects against a simple two-stage attack:<br /><ol><li>You leave your laptop (can be even fully powered down) in a hotel room and go down for a breakfast\u2026 Meanwhile an Evil Maid enters your room. She holds an Evil USB stick in her hand and plugs it into your laptop and presses the power button. The system starts and boots from the USB. An Evil version of something similar to our <a href="http://invisiblethingslab.com/resources/bh08/part3.pdf">BluePillBoot </a>gets installed into the MBR (or to a <a href="http://www.ngssoftware.com/research/papers/Implementing_And_Detecting_A_PCI_Rootkit.pdf">PCI EEPROM</a>). This Evil Program has only one task \u2014 to sniff out the encryption software\'s password/PIN and then report it back to the maid next time she comes...</li><li>So, you come back to your room to brush your teeth after the breakfast. Obviously you cannot refrain from not turning on your laptop for a while. You just need to enter your disk encryption passphrase/PIN/whatever. Your encryption software happily displays the prompt, like if nothing happened. After all how could it possibly know the Evil Program, like BluePillBoot, has just been loaded a moment ago from the MBR or a PCI EEPROM? It can not! So, you enter the valid password, your system gets the decryption key and you can get access to your encrypted system...</li><li>But then you have an appointment at the hotel SPA (at least this little fun you can have on a business trip, right?). Obviously you don\'t want to look so geeky and you won\'t take your laptop with you to the SPA, will you? The Evil Maid just waited for this occasion\u2026 She sneaks again into your room and powers up your laptop. She presses a magic key combo, which results in the Evil Program displaying the sniffed decryption password. Now, depending on their level of subtleness, she could either steal your whole laptop or only some more important data from the laptop. Your system disk encryption software is completely useless against her now.<br /></li></ol>(Yes, I know that\'s 3 bullets, but the Evil Maid had to sneak into your room only twice:)<br /><br />So, why the BitLocker would not allow for this simple attack? Because the BitLocker software should actually be able to know that the system gets compromised (by the Evil Program) since the last boot. BitLocker should then refuse to display a password prompt. And even if it didn\'t and asked the user for the password, still it should not be able to get the actual decryption key out from the TPM, because the values in the certain PCR register(s) will be wrong (they will now account for the modified hashes of the MBR or PCI EEPROM or BIOS). The bottom line is: the maid is not getting the decryption key (just as the user now), which is what this is all about.<br /><br /><a href="http://1.bp.blogspot.com/_Ti3q3Hdvels/SXdjHwkIqMI/AAAAAAAAADo/l3tgqzzQ4Es/s1600-h/evil+maid.jpg"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5293808871944005826" src="http://1.bp.blogspot.com/_Ti3q3Hdvels/SXdjHwkIqMI/AAAAAAAAADo/l3tgqzzQ4Es/s200/evil+maid.jpg" style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 200px; height: 130px;" /></a>At least this is how the BitLocker should work. I shall add a disclaimer here, that neither myself, nor anybody from my team, have looked into the BitLocker implementation. We have not, because, as of yet, there have been no customers interested in this kind of BitLocker implementation evaluation. Also, I should add that Microsoft has not paid me to write this article. I simply hope this might positively stimulate other vendors, like e.g. <a href="http://www.truecrypt.org/">TrueCrypt </a>(Hi David!), or Apple, to add SRTM or, better yet, DRTM, to their system encryption products.<br /><br />Of course, when we consider an idiot-attack, that involves simply garbbing somebody\'s laptop and running away with it (i.e. without any prior preparation like our Evil Maid did), then probably all system disk encryption software would be just good enough (assuming it doesn\'t have any bugs in the crypto code).<br /><br />Some people might argue that using a BIOS password would be just as good as using trusted boot. After all, if we disable booting from alternate media in BIOS (e.g. from USB sticks) and lock down the BIOS using a password (i.e. using the Power-On password, not just the BIOS supervisor password), then the above two-stage attacks should not be feasible. Those people might argue, that even if the Evil Maid had cleared the CMOS memory (by removing the CMOS battery from the motherboard), still they would be able to notice that something is wrong \u2014 the BIOS would not longer be asking for the password, or the password would be different from what they used before.<br /><br />That is a valid point, but relaying on the BIOS password to provide security for all your data might not be such a good idea. First problem is that all the BIOSes have had a long history of various default or "maintenance" passwords (I actually do not know how the situation looks today with those default passwords). Another problem is that the attacker might first clear the CMOS memory, and then modify her Evil MBR program to also display a fake BIOS password prompt, that would accept anything the user enters. This way the user will not be alerted that something is wrong and will be willing to provide the real password for drive decryption when prompted later by the actual drive encryption software.<br /><br />One might ask why can\'t the attacker use the similar attack against BitLocker? Even if the real BitLocker uses trusted boot process, we can still infect the MBR, display the fake BitLocker PIN prompt and this way get into the possession of the user\'s PIN.<br /><br />This attack, however, can be spotted by an inquisitive user \u2014 after all, if he or she knows they provided the correct PIN, then it would be suspicious not to see the system being booted (and it won\'t boot, because the fake BitLocker will not be able to retrieve the password from the TPM). If the fake BitLocker wanted to boot the OS (so that user didn\'t suspect anything), it would have to remove itself from the system and then reboot the system. Again this should alert the user that something wrong is going on.<br /><br />There is also a much more elegant way of defending against the above attack (with fake BitLocker prompt) \u2014 but I\'d rather let Microsoft to figure it out by themselves ;)<br /><br />By the way, contrary to a popular belief the BitLocker doesn\'t protect your computer from boot-stage infections, e.g. MBR viruses or BIOS/PCI rootkits. As we have been pointing out since the first edition of <a href="http://invisiblethingslab.com/itl/Services.html">our Understanding Stealth Malware training</a> at Black Hat in August 2007, BitLocker should not be thought as of a system integrity protection. This is because it is trivial, for any malware that already got access to the running Vista, to re-seal the BitLocker key to arbitrary new system firmware/MBR configuration. Everybody can try it by going to Control Panel/BitLocker Driver Encryption, then clicking on the "Turn Off BitLocker" and choosing "Disable BitLocker Drive Encryption". This will simply save your disk decryption key in plaintext, allowing you to e.g. reflash your BIOS, boot Vista again and then to enable BitLocker again (this would generate a new key and seal it to the TPM with the new PCR values).<br /><br /><a href="http://3.bp.blogspot.com/_Ti3q3Hdvels/SXdlSzniIcI/AAAAAAAAADw/GtVHjoUqCvs/s1600-h/disabling+bitlocker.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5293811260765381058" src="http://3.bp.blogspot.com/_Ti3q3Hdvels/SXdlSzniIcI/AAAAAAAAADw/GtVHjoUqCvs/s320/disabling+bitlocker.png" style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 320px; height: 254px;" /></a><br />This functionality has been provided obviously to allow user to update his or her firmware. But what is important to keep in mind is that this process of disabling BitLocker doesn\'t involve entering any special password or PIN (e.g. the BitLocker\'s PIN). It just enough that you are the default user with admin rights or some malware running in this context. Pity they decided on the simplest solution here. But still BitLocker is simply the one coolest thing in Vista and something I really miss on all other OSes...', 'guidislink': True, 'published': u'2009-01-21T18:52:00.009+01:00', u'thr_total': u'23'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=19, tm_hour=21, tm_min=20, tm_sec=19, tm_wday=3, tm_yday=78, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/1619925805743086461/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=1619925805743086461', 'type': u'text/html', 'rel': u'replies', 'title': u'7 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1619925805743086461', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1619925805743086461', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2009/01/attacking-intel-trusted-execution.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Attacking Intel\xae Trusted Execution Technology'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-1619925805743086461', 'published_parsed': time.struct_time(tm_year=2009, tm_mon=1, tm_mday=5, tm_hour=15, tm_min=30, tm_sec=0, tm_wday=0, tm_yday=5, tm_isdst=0), 'title': u'Attacking Intel  Trusted Execution Technology', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/html', 'value': u'Press people: please read our press release first and also refer to the disclaimer at the end of this blog post. Thank you!Update: 1/5/2009 19:21 CEST: minor typos/spelling corrections. Thanks to Jarred for point out some of the typos.A word about Trusted ComputingThe term Trusted Computing and related technologies, like Palladium, Trusted Platform Module, LaGrande, have always caused lots of controversy in the IT world. Most of the fear, however, has been a result of the lack of understanding of how a particular technology really works.Nevertheless, Trusted Computing is becoming part of our lives, whether we want it or not. These days almost every new laptop comes with an on-board Trusted Platform Module (TPM). Microsoft\'s Palladium initiative have been renamed so many times in the recent years, that probably even people working at Microsoft are confused now. Nevertheless, some of the Palladium technologies made their way into Vista, and Microsoft BitLocker is, without doubt, the most successful, widely deployed product that is based on the idea of Trusted Computing. (In fact the Bitlocker is the only one thing that I really have been missing since I switched from Vista to Mac some time ago).On the hardware side, besides the famed TPM, we also have had the LaGrande technology, that is often connected with things such as Remote Attestation, Protected Execution and other scary terms\u2026A word about Trusted Execution TechnologyLaGrande, recently renamed Trusted Execution Technology (TXT), is Intel\'s response to the Trusted Computing trend. TXT is currently part of the vPro\u2122 brand, and for about a year now users can buy a vPro/TXT compatible hardware in regular computer stores (the first one was the DQ35J desktop board with certain Core 2 Duo processors, which I was able to buy at the end of 2007 \u2014 remember that TXT requires support from both the CPU and the chipset).TXT is not an alternative to TPM, in fact TXT heavily relies on the TPM to provide basic services like e.g. secure storage of measurements done by the TXT. Also, Palladium, or whatever it is called these days, is not a competition to TXT. Intel TXT can provide building blocks to e.g. Vista Bitlocker, arguably making it more secure then it is now (Current Bitlocker implementation, AFAIK, relies on a so called Static Root of Trust for Measurement, which requires TPM, but not TXT).What kind of measurement would TXT like to store in our TPM? Well, the whole TXT is, in fact, all about making and storing software measurements, or, using a more familiar language, secure hashes of certain software components.The sole purpose of Intel TXT technology is to provide a trusted way for loading and executing system software, e.g. Operating System kernel or Virtualization Machine Monitor. What is extraordinary here is that TXT doesn\'t make any assumptions about the state of the system before loading the software, thus making it possible for a user to ensure secure load of an OS or VMM, even in a potentially compromised machine.In other words, our system can be all full of boot sector viruses and BIOS rootkits, and god-knows-what-else, and still TXT should allow to load a clean VMM (or OS kernel) in a secure way, immune to all those rootkits present in the system in a moment just before the load process. This TXT-supported load process is called Late Launch, and is implemented via a special new CPU instruction called SENTER.It\'s a good place to mention that AMD has its own version of the late launch implemented via SKINIT instruction. We haven\'t looked at the AMD technology thoroughly yet, so I will refrain from commenting on this.The late launch is a pretty amazing thing, when we think about. It promises to effectively provide all the benefits of a computer restart without actually restarting it.It is hard to overemphasize the potential impact that a technology such as TXT could have on computer security. One can immediately see that it could eliminate all the system-level persistent malware \u2014 in other words we can easily build systems (VMMs or even standard OSes) that would be immune to attacks that try to compromise system binaries on disk, or attack the system right from the bootloader or BIOS. Combining this with VT-x and VT-d technologies, system developers (for the first time, at least as far as the "PC" platform is considered) have gotten extremely strong tools into their hands that should allow them to create really secure VMMs and OSes\u2026Hopefully by now, my Dear Reader, you should have the feeling what kind of an animal Intel TXT  is and how desperately the world needs it...And now, we are going to move on and show practical attacks on current TXT implementations... :)Attacking Intel TXT!Ok, not in this post today, but rather at the upcoming Black Hat conference in Washington, DC in February. Over the recent months, Rafal and I have been looking at the Intel TXT technology as part of a work done for a customer, to see if this could be used to improve security of a product, from a typical user\'s perspective. We figured out that it definitely could, but that there are also some issues\u2026And those "issues" gave us a starting point in developing a proof-of-concept (albeit very reliable) exploit that shows how we can bypass trusted boot process implemented by Intel\'s tboot.Tboot, which is also part of (scroll down to the end of the page) the Xen hypervisor, can be though of as a reference implementation of TXT-based system loader, that could be used to securely load either the Xen hypervisor or the Linux kernel, when run on a vPro/TXT compatible hardware.[copy-and-paste from the press release follows]Our attack comprises two stages. The first stage requires an implementation flaw in a specific system software. The second stage of the attack is possible thanks to a certain design decision made in the current TXT release.While evaluating the effectiveness of the Intel  TXT technology, as part of a work done for a customer, we have identified several implementation flaws in the Intel\'s system software, which allowed to conduct the above mentioned stage-one attack. We have provided Intel with extensive description of the flaws in December 2008, and Intel is currently working on fixing those vulnerabilities.We have also been in touch with Intel about the possibility of conducting the second-stage attack since November 2008. In December, after providing Intel with the details about the first-stage attack, Intel promised to release, in the coming weeks, an updated TXT specification for developers that would explain how to design their TXT-based loaders in such a way that they are immune to our attack. Intel claims the current Intel  TXT release does contain the basic building blocks that could be used to prevent our second-stage attack and the release of the additional specification would make it feasible in practice. More details in February in DC :)TXT useless?Some people are skeptical about the TXT technology, and not only because of the Irrational Fear of the Trusted Computing (IFTC),  but rather because they point out to the complexity of the whole technology. The complexity is bad, because 1) it leaves more space for potential attacks, and 2) it discourages developers (ISVs) from using the technology in their products (e.g. neither Microsoft, nor VMWare make use of TXT in any of their bare-metal hypervisors, even though TXT is very well suited for this kind of software).It is true that TXT is a very complex technology (the SENTER instruction is probably the masterpiece of the CISC architecture!), but I personally like it. In my opinion this is the first technology available for the PC platform that has the potential to really change something, much more then the NX-feature did a few years ago. Before people will run to the comment box \u2014 if you would like to argue about the usefulness/uselessness of Trusted Computing/TXT, please base your opinions on technical facts (read the spec!) and not on your feelings!Disclaimer (for press)Starting January 2009, we (at Invisible Things Lab), decided to issue press releases in addition to this blog. The general rule is: press releases are written for journalists, while the blog is mainly written for other researchers, security enthusiast, etc.The wording of our press releases is carefully chosen to minimize the potential of a possible misinterpretation. The press releases carry less information, but, we think, are better suited for a more general public, that doesn\'t have background in computer science, programming and security.The blog is written in a much more casual way, without thinking for half an hour on every sentence. The articles on this blog might present some facts as extremely exciting, because e.g. for me, a person deeply involved in a system-level security research, they indeed might be very exciting, which might not be the case for a general audience. I sometimes might also use shortcuts, metaphors, or irony, and other figures of speech, that might not necessarily be obvious for a more general public.If you are a journalist and you think you just found something very sensational on my blog, I would suggest that you double-check with me, before writing about it.Thank you for your cooperation.Joanna Rutkowska,Founder and CEO,Invisible Things Lab.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=51&max-results=25', 'type': u'text/plain', 'value': u'Attacking Intel\xae Trusted Execution Technology', 'language': None}, 'updated': u'2009-03-19T22:20:19.253+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'attack', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted execution technology', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'trusted computing', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'exploit', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2009/01/attacking-intel-trusted-execution.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://1.bp.blogspot.com/_Ti3q3Hdvels/SWI4MzG1jdI/AAAAAAAAADU/xaj6gqT72bQ/s72-c/processor+padlock.jpg', 'width': u'72', 'height': u'72'}], 'summary': u'<a href="http://1.bp.blogspot.com/_Ti3q3Hdvels/SWI4MzG1jdI/AAAAAAAAADU/xaj6gqT72bQ/s1600-h/processor+padlock.jpg"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5287850705014853074" src="http://1.bp.blogspot.com/_Ti3q3Hdvels/SWI4MzG1jdI/AAAAAAAAADU/xaj6gqT72bQ/s320/processor+padlock.jpg" style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 320px; height: 213px;" /></a><br /><br />Press people: please read <a href="http://invisiblethingslab.com/press/itl-press-2009-01.pdf">our press release</a> first and also refer to the disclaimer at the end of this blog post. Thank you!<br /><br /><span style="font-size: 85%;">Update: 1/5/2009 19:21 CEST: minor typos/spelling corrections. Thanks to Jarred for point out some of the typos.</span><br /><br /><span style="font-weight: bold;">A word about Trusted Computing</span><br />The term Trusted Computing and related technologies, like Palladium, Trusted Platform Module, LaGrande, have always caused lots of controversy in the IT world. Most of the fear, however, has been a result of the lack of understanding of how a particular technology really works.<br /><br />Nevertheless, Trusted Computing is becoming part of our lives, whether we want it or not. These days almost every new laptop comes with an on-board Trusted Platform Module (TPM). Microsoft\'s Palladium initiative have been renamed so many times in the recent years, that probably even people working at Microsoft are confused now. Nevertheless, some of the Palladium technologies made their way into Vista, and Microsoft BitLocker is, without doubt, the most successful, widely deployed product that is based on the idea of Trusted Computing. (In fact the Bitlocker is the <span style="font-style: italic;">only </span>one thing that I really have been missing since I switched from Vista to Mac some time ago).<br /><br />On the hardware side, besides the famed TPM, we also have had the LaGrande technology, that is often connected with things such as Remote Attestation, Protected Execution and other scary terms\u2026<br /><br /><span style="font-weight: bold;">A word about Trusted Execution Technology</span><br />LaGrande, recently renamed <a href="http://www.intel.com/technology/security/">Trusted Execution Technology (TXT)</a>, is Intel\'s response to the Trusted Computing trend. TXT is currently part of the <a href="http://www.intel.com/products/vpro/index.htm">vPro\u2122 brand</a>, and for about a year now users can buy a vPro/TXT compatible hardware in regular computer stores (the first one was the <a href="http://www.intel.com/products/desktop/motherboards/dq35jo/dq35jo-overview.htm">DQ35J desktop board</a> with certain Core 2 Duo processors, which I was able to buy at the end of 2007 \u2014 remember that TXT requires support from both the CPU and the chipset).<br /><br />TXT is not an alternative to TPM, in fact TXT heavily relies on the TPM to provide basic services like e.g. secure storage of measurements done by the TXT. Also, Palladium, or whatever it is called these days, is not a competition to TXT. Intel TXT can provide building blocks to e.g. Vista Bitlocker, arguably making it more secure then it is now (Current Bitlocker implementation, AFAIK, relies on a so called Static Root of Trust for Measurement, which requires TPM, but not TXT).<br /><br />What kind of measurement would TXT like to store in our TPM? Well, the whole TXT is, in fact, all about making and storing software measurements, or, using a more familiar language, secure hashes of certain software components.<br /><br />The sole purpose of Intel TXT technology is to provide a trusted way for loading and executing system software, e.g. Operating System kernel or Virtualization Machine Monitor. What is extraordinary here is that TXT doesn\'t make any assumptions about the state of the system before loading the software, thus making it possible for a user to ensure secure load of an OS or VMM, even in a potentially compromised machine.<br /><br />In other words, our system can be all full of boot sector viruses and BIOS rootkits, and god-knows-what-else, and still TXT should allow to load a clean VMM (or OS kernel) in a secure way, immune to all those rootkits present in the system in a moment just before the load process. This TXT-supported load process is called Late Launch, and is implemented via a special new CPU instruction called SENTER.<br /><br />It\'s a good place to mention that AMD has its own version of the late launch implemented via SKINIT instruction. We haven\'t looked at the AMD technology thoroughly yet, so I will refrain from commenting on this.<br /><br />The late launch is a pretty amazing thing, when we think about. It promises to effectively provide all the benefits of a computer restart without actually restarting it.<br /><br />It is hard to overemphasize the potential impact that a technology such as TXT could have on computer security. One can immediately see that it could eliminate all the system-level persistent malware \u2014 in other words we can easily build systems (VMMs or even standard OSes) that would be immune to attacks that try to compromise system binaries on disk, or attack the system right from the bootloader or BIOS. Combining this with VT-x and VT-d technologies, system developers (for the first time, at least as far as the "PC" platform is considered) have gotten extremely strong tools into their hands that should allow them to create really secure VMMs and OSes\u2026<br /><br />Hopefully by now, my Dear Reader, you should have the feeling what kind of an animal Intel TXT  is and how desperately the world needs it...<br /><br />And now, we are going to move on and show practical attacks on current TXT implementations... :)<br /><br /><span style="font-weight: bold;">Attacking Intel TXT!</span><br />Ok, not in this post today, but rather at the <a href="http://blackhat.com/html/bh-dc-09/bh-dc-09-speakers.html#Wojtczuk">upcoming Black Hat conference</a> in Washington, DC in February. Over the recent months, Rafal and I have been looking at the Intel TXT technology as part of a work done for a customer, to see if this could be used to improve security of a product, from a typical user\'s perspective. We figured out that it definitely could, but that there are also some issues\u2026<br /><br />And those "issues" gave us a starting point in developing a proof-of-concept (albeit very reliable) exploit that shows how we can bypass trusted boot process implemented by Intel\'s tboot.<br /><br />Tboot, which is also <a href="http://lxr.xensource.com/lxr/source">part of</a> (scroll down to the end of the page) the Xen hypervisor, can be though of as a reference implementation of TXT-based system loader, that could be used to securely load either the Xen hypervisor or the Linux kernel, when run on a vPro/TXT compatible hardware.<br /><br />[copy-and-paste from <a href="http://invisiblethingslab.com/press/itl-press-2009-01.pdf">the press release</a> follows]<br /><br /><span style="font-style: italic;">Our attack comprises two stages. The first stage requires an implementation flaw in a specific system software. The second stage of the attack is possible thanks to a certain design decision made in the current TXT release.<br /></span><span style="font-style: italic;"></span><span style="font-style: italic;"><br />While evaluating the effectiveness of the Intel\xae TXT technology, as part of a work done for a customer, we have identified several implementation flaws in the Intel\'s system software, which allowed to conduct the above mentioned stage-one attack. We have provided Intel with extensive description of the flaws in December 2008, and Intel is currently working on fixing those vulnerabilities.</span><br /><span style="font-style: italic;"><br />We have also been in touch with Intel about the possibility of conducting the second-stage attack since November 2008. In December, after providing Intel with the details about the first-stage attack, Intel promised to release, in the coming weeks, an updated TXT specification for developers that would explain how to design their TXT-based loaders in such a way that they are immune to our attack. Intel claims the current Intel\xae TXT release does contain the basic building blocks that could be used to prevent our second-stage attack and the release of the additional specification would make it feasible in practice. </span><br /><br />More details in February in DC :)<br /><br /><span style="font-weight: bold;">TXT useless?</span><br />Some people are skeptical about the TXT technology, and not only because of the Irrational Fear of the Trusted Computing (IFTC),  but rather because they point out to the complexity of the whole technology. The complexity is bad, because 1) it leaves more space for potential attacks, and 2) it discourages developers (ISVs) from using the technology in their products (e.g. neither Microsoft, nor VMWare make use of TXT in any of their bare-metal hypervisors, even though TXT is very well suited for this kind of software).<br /><br />It is true that TXT is a very complex technology (the SENTER instruction is probably the masterpiece of the CISC architecture!), but I personally like it. In my opinion this is the first technology available for the PC platform that has the potential to really change something, much more then the NX-feature did a few years ago. Before people will run to the comment box \u2014 if you would like to argue about the usefulness/uselessness of Trusted Computing/TXT, please base your opinions on technical facts (read the spec!) and not on your feelings!<br /><br /><span style="font-weight: bold;">Disclaimer (for press)</span><br /><br />Starting January 2009, we (at Invisible Things Lab), decided to issue <a href="http://invisiblethingslab.com/itl/News.html">press releases</a> in addition to this blog. The general rule is: press releases are written for journalists, while the blog is mainly written for other researchers, security enthusiast, etc.<br /><br />The wording of our press releases is carefully chosen to minimize the potential of a possible misinterpretation. The press releases carry less information, but, we think, are better suited for a more general public, that doesn\'t have background in computer science, programming and security.<br /><br />The blog is written in a much more casual way, without thinking for half an hour on every sentence. The articles on this blog might present some facts as extremely exciting, because e.g. for me, a person deeply involved in a system-level security research, they indeed might be very exciting, which might not be the case for a general audience. I sometimes might also use shortcuts, metaphors, or irony, and other figures of speech, that might not necessarily be obvious for a more general public.<br /><br />If you are a journalist and you think you just found something very sensational on my blog, I would suggest that you double-check with me, before writing about it.<br /><br />Thank you for your cooperation.<br />Joanna Rutkowska,<br />Founder and CEO,<br />Invisible Things Lab.', 'guidislink': True, 'published': u'2009-01-05T16:30:00.005+01:00', u'thr_total': u'7'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=1, tm_sec=39, tm_wday=2, tm_yday=84, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/718012832586397028/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=718012832586397028', 'type': u'text/html', 'rel': u'replies', 'title': u'16 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/718012832586397028', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/718012832586397028', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/09/microsoft-executive-rebuts-our-research.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Microsoft executive "rebuts" our research!'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-718012832586397028', 'published_parsed': time.struct_time(tm_year=2008, tm_mon=9, tm_mday=7, tm_hour=7, tm_min=54, tm_sec=0, tm_wday=6, tm_yday=251, tm_isdst=0), 'title': u'Microsoft executive "rebuts" our research!', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'Ah, there is no feeling like seeing your name in the news when drinking your morning coffee... In this piece some Steve Riley, a senior security strategist at Microsoft, decided to "rebute" our recent Black Hat presentations research results.Mr. Riley had been quoted by ZDnet as saying:"Her [Joanna Rutkowska] insistence is that you can replace the hypervisor without anybody knowing... Our assertion is that this is incorrect," Riley told the audience. "First of all, to do these attacks you need to become administrator at the root. So that\'s going to be, on an appropriately configured machine, an exceedingly difficult thing to happen."Apparently, Mr. Riley has never seen our Black Hat presentations (or slides at least) that he is referring to (oh, wait, that is the typical case with all our "refuters", how come?)... First, we never said anything about replacing the hypervisor. I really have no idea how this idea was born in Mr. Riley\'s head? Replacing the hypervisor - that would indeed be insane for us to do!Second, it is not true that the attacker needs to become an administrator "at the root" (he mean the root partition or administrative domain here I assume). The attack we presented in our second speech, that exploited a heap overflow in the Xen hypervisor FLASK module, could have been conducted from the unprivileged domain, as we demonstrated during the presentation.Mr. Riley continues with his vision:"Because you [the attacker] didn\'t subject your own replacement hypervisor through the thorough design review that ours did, I\'ll bet your hypervisor is probably not going to implement 100 percent of the functionality as the original one," Riley said. "There will be a gap or two and we will be able to detect that."Well, if he only took the effort of looking into our slides, he would realize that, in case of XenBluePill, we were slipping it beneath (not replacing!) the original hypervisor, and then run the original one as nested. So, all the functionality of the original hypervisor was preserved.Mr. Riley also shares some other ground breaking thoughts in this article, but I think we can leave them uncommented ;)This situation is pretty funny actually - we have here the words and feelings of some Microsoft executive vs. our three technical presentations, all the code that we released for those presentations, and also a few of our demos. Yet, it\'s apparently still worth getting into the news and reporting what the feeling of Mr. Riley are...Let me, however, write one more time, that I\'m (still) not a Microsoft hater. There are many people at Microsoft that I respect: Brandon Baker, Neil Clift, the LSD guys, Mark Russinovich, and probably a few more that I just haven\'t had occasion to meet in person or maybe forgot about at the moment. It\'s thus even more sad that people like Mr. Riley are also associated with Microsoft, even more they are the face of Microsoft for the majority of people. Throwing a party in Vegas and Amsterdam once a year certainly is not enough to change the Microsoft\'s image in this case...Interestingly, if Mr. Riley only attended our Xen 0wning Trilogy at Black Hat, then he would notice that we were actually very positive about Hyper-V. Of course, I pointed out that Xen 3.3 certainly has a more secure architecture right now, but I also said that I knew (from talking to some MS engineers from the virtualization group) that Hyper-V is going to implement similar features in the next version(s) and that this is very good. I also prized the fact it has only about 100k LOC (vs. about 300k LOC in Xen 3.3).So, Mr. Senior Security Strategist, I suggest you do your homework more carefully next time before throwing mud at others and trying to negate the value of their work (and all the efforts of Microsoft\'s PR people).On a separate note, I found it quite unprofessional that ZDNet\'s Liam Tung and Tom Espiner, the authors of the news, didn\'t ask me for a commentary before publishing this. Not to mention that they also misspelled Rafal\'s name and forgot to mention about Alex, the third co-author of the presentations.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Microsoft executive "rebuts" our research!', 'language': None}, 'updated': u'2009-03-25T16:01:39.482+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'bad guys attacking joanna', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'fighting for a better world', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2008/09/microsoft-executive-rebuts-our-research.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'Ah, there is no feeling like seeing your name in the news when drinking your morning coffee... In this <a href="http://news.zdnet.com/2424-9595_22-219814.html">piece</a> some Steve Riley, a senior security strategist at Microsoft, decided to "rebute" <a href="http://theinvisiblethings.blogspot.com/2008/08/our-xen-0wning-trilogy-highlights.html">our recent Black Hat presentations</a> research results.<br /><br />Mr. Riley had been quoted by ZDnet as saying:<br /><br />"Her [Joanna Rutkowska] insistence is that you can replace the hypervisor without anybody knowing... Our assertion is that this is incorrect," Riley told the audience. "First of all, to do these attacks you need to become administrator at the root. So that\'s going to be, on an appropriately configured machine, an exceedingly difficult thing to happen."<br /><br />Apparently, Mr. Riley has never seen our Black Hat presentations (or slides at least) that he is referring to (oh, wait, that is the typical case with all our "refuters", how come?)... <br /><br />First, <a href="http://theinvisiblethings.blogspot.com/2008/08/teamwork-crediting.html">we</a> never said anything about <span style="font-style: italic;">replacing</span> the hypervisor. I really have no idea how this idea was born in Mr. Riley\'s head? Replacing the hypervisor - that would indeed be insane for us to do!<br /><br />Second, <span style="font-style: italic;">it is not true</span> that the attacker needs to become an administrator "at the root" (he mean the root partition or administrative domain here I assume). The attack we presented in our second speech, that exploited a heap overflow in the Xen hypervisor FLASK module, could have been conducted from the unprivileged domain, as we demonstrated during the presentation.<br /><br />Mr. Riley continues with his vision:<br /><br />"Because you [the attacker] didn\'t subject your own replacement hypervisor through the thorough design review that ours did, I\'ll bet your hypervisor is probably not going to implement 100 percent of the functionality as the original one," Riley said. "There will be a gap or two and we will be able to detect that."<br /><br />Well, if he only took the effort of looking into our slides, he would realize that, in case of XenBluePill, we were slipping it beneath (not replacing!) the original hypervisor, and then run the original one as nested. So, all the functionality of the original hypervisor was preserved.<br /><br />Mr. Riley also shares some other ground breaking thoughts in this article, but I think we can leave them uncommented ;)<br /><br />This situation is pretty funny actually - we have here <span style="font-style: italic;">the words and feelings</span> of some Microsoft executive vs. our <a href="http://invisiblethingslab.com/bh08/">three technical presentations</a>, all the <a href="http://invisiblethingslab.com/bh08/code/">code</a> that we released for those presentations, and also a few of our <a href="http://invisiblethingslab.com/bh08/demos/">demos</a>. Yet, it\'s apparently still worth getting into the news and reporting what the feeling of Mr. Riley are...<br /><br />Let me, however, write one more time, that I\'m (still) not a Microsoft hater. There are many people at Microsoft that I respect: Brandon Baker, Neil Clift, the LSD guys, Mark Russinovich, and probably a few more that I just haven\'t had occasion to meet in person or maybe forgot about at the moment. It\'s thus even more sad that people like Mr. Riley are also associated with Microsoft, even more they are the face of Microsoft for the majority of people. Throwing a party in Vegas and Amsterdam once a year certainly is not enough to change the Microsoft\'s image in this case...<br /><br />Interestingly, if Mr. Riley only attended our Xen 0wning Trilogy at Black Hat, then he would notice that we were actually very positive about Hyper-V. Of course, I pointed out that Xen 3.3 certainly has a more secure architecture right now, but I also said that I knew (from talking to some MS engineers from the virtualization group) that Hyper-V is going to implement similar features in the next version(s) and that this is very good. I also prized the fact it has only about 100k LOC (vs. about 300k LOC in Xen 3.3).<br /><br />So, Mr. Senior Security Strategist, I suggest you do your homework more carefully next time before throwing mud at others and trying to negate the value of their work (and all the efforts of Microsoft\'s PR people).<br /><br />On a separate note, I found it quite unprofessional that ZDNet\'s Liam Tung and Tom Espiner, the authors of the news, didn\'t ask me for a commentary before publishing this. Not to mention that they also misspelled Rafal\'s name and forgot to mention about Alex, the third co-author of the presentations.', 'guidislink': True, 'published': u'2008-09-07T09:54:00.004+02:00', u'thr_total': u'16'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=1, tm_sec=52, tm_wday=2, tm_yday=84, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7367970431147576824/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=7367970431147576824', 'type': u'text/html', 'rel': u'replies', 'title': u'1 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7367970431147576824', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7367970431147576824', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/09/xen-0wning-trilogy-code-demos-and-q35.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Xen 0wning Trilogy: code, demos and q35 attack details posted'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-7367970431147576824', 'published_parsed': time.struct_time(tm_year=2008, tm_mon=9, tm_mday=6, tm_hour=11, tm_min=59, tm_sec=0, tm_wday=5, tm_yday=250, tm_isdst=0), 'title': u'Xen 0wning Trilogy: code, demos and q35 attack details posted', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u"We have posted all the code that we used last month during our Black Hat presentations about Xen security, and you can get it here. This includes the full source code for:1) The generic Xen Loadable Modules framework2) Implementation of the two Xen Hypervisor Rootkits3) The Q35 exploit4) The FLASK heap overflow exploit5) The BluePillBoot (with nested virtualization support on SVM)6) The XenBluePill (with nested virtualization support on SVM)Beware the code is by far not user-friendly, it requires advanced Linux/Xen, C and system-level programming skills in order to tweak some constants and run it successfully on your system. Do not send us questions how to compile/run it, as we don't have time to answer such questions. Also do not send questions how the code works \u2013 if you can't figure it out by reading our slides and the source code, then it means you should probably spend more time on this yourself. On the other hand, we would appreciate any constructive feedback.The code is our gift to the research community. There is no warranty and Invisible Things Lab takes no responsibility for any potential damage that this code might cause (e.g. by rebooting your machine) or any potential malicious usage of this code, or any other code built on top of this code. We believe that by publishing this code we help to create more secure systems in the future.Additionally, we also posted the full version of our second Black Hat talk, which now includes all the slides about the Q35 bug and how we exploited it. Those slides had to be previously removed during our Black Hat presentation, as the patch was still unavailable during that time.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Xen 0wning Trilogy: code, demos and q35 attack details posted', 'language': None}, 'updated': u'2009-03-25T16:01:52.715+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'hypervisor rootkits', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'xen hacking', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'xen heap exploiting', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'virtualization based rootkits', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2008/09/xen-0wning-trilogy-code-demos-and-q35.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'We have posted all the code that we used last month during <a href="http://theinvisiblethings.blogspot.com/2008/07/0wning-xen-in-vegas.html">our Black Hat presentations</a> about Xen security, and you can get it <a href="http://invisiblethingslab.com/bh08/">here</a>. This includes the full source code for:<br />1) The generic Xen Loadable Modules framework<br />2) Implementation of the two Xen Hypervisor Rootkits<br />3) The Q35 exploit<br />4) The FLASK heap overflow exploit<br />5) The BluePillBoot (with nested virtualization support on SVM)<br />6) The XenBluePill (with nested virtualization support on SVM)<br /><br />Beware the code is by far not user-friendly, it requires advanced Linux/Xen, C and system-level programming skills in order to tweak some constants and run it successfully on your system. Do not send us questions how to compile/run it, as we don\u2019t have time to answer such questions. Also do not send questions how the code works \u2013 if you can\u2019t figure it out by reading our slides and the source code, then it means you should probably spend more time on this yourself. On the other hand, we would appreciate any constructive feedback.<br /><br />The code is our gift to the research community. There is no warranty and Invisible Things Lab takes no responsibility for any potential damage that this code might cause (e.g. by rebooting your machine) or any potential malicious usage of this code, or any other code built on top of this code. We believe that by publishing this code we help to create more secure systems in the future.<br /><br />Additionally, we also posted the full version of our second Black Hat talk, which now includes all the slides about the Q35 bug and how we exploited it. Those slides had to be previously removed during our Black Hat presentation, as <a href="http://theinvisiblethings.blogspot.com/2008/08/intel-patches-q35-bug.html">the patch</a> was still unavailable during that time.', 'guidislink': True, 'published': u'2008-09-06T13:59:00.001+02:00', u'thr_total': u'1'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=2, tm_sec=2, tm_wday=2, tm_yday=84, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7438465495915995582/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=7438465495915995582', 'type': u'text/html', 'rel': u'replies', 'title': u'16 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7438465495915995582', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7438465495915995582', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/09/three-approaches-to-computer-security.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'The three approaches to computer security'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-7438465495915995582', 'published_parsed': time.struct_time(tm_year=2008, tm_mon=9, tm_mday=2, tm_hour=11, tm_min=39, tm_sec=0, tm_wday=1, tm_yday=246, tm_isdst=0), 'title': u'The three approaches to computer security', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'If we looked at the computer systems and how they try to provide security, I think we could categorize those attempts into three broad categories:1) Security by Correctness2) Security by Isolation3) Security by ObscurityLet\'s discuss those categories in more detail below.Security by CorrectnessThe assumption here is obvious: if we can produce software that doesn\'t have bugs (nor any maliciously behaving code), then we don\'t have security problems at all. The only problem is that we don\'t have any tools to make sure that a given code is correct (in terms of implementation, design and ethical behavior). But if we look at various efforts in computer science, we will notice a lot of effort has been made to achieve Security by Correctness: "safe" languages, code verifiers (although not sound ones, just heuristic based), developer\'s education, manual code audit, etc. Microsoft\'s famed Secure Development Life-cycle is all about Security by Correctness. The only problem is: all those approaches sometimes work and sometimes do not, sometimes they miss some bug and also there are problems that I simple don\'t believe can be addresses by automatic code verifiers or even safe languages, like e.g. logic/design bugs or deciding on wheatear a given code behaves maliciously or not (after all this is an ethical problem in many cases, not a computer science problem).To sum it: I think that in some more or less distant future (some people think abuout a timeframe of 50 years or so), we would get rid of all the implementation bugs, thanks to safe languages and/or sound code verifiers. But I don\'t believe we could assure correctness of software on any higher level of abstraction then implementation level.Security by IsolationBecause of the problems with effectively implementing Security by Correctness approach, people, from the very beginning, has also taken another approach, which is based on isolation. The idea is to split a computer system into smaller pieces and make sure that each piece is separated from the other ones, so that if it gets compromised/malfunctions, then it cannot affect the other entities in the system. Early UNIX\'s user accounts and separate process address spaces, things that are now present in every modern OS, are examples of Security by Isolation.Simple as it sound, in practice the isolation approach turned out to be very tricky to implement. One problem is how to partition the system into meaningful pieces and how to set permissions for each piece. The other problem is implementation - e.g. if we take a contemporary consumer OS, like Vista, Linux or Mac OSX, all of them have monolithic kernels, meaning that a simple bug in any of the kernel components (think: hundreds of 3rd party drivers running there), allows to bypass of the isolation mechanisms provided by the kernel to the rest of the system (process separation, ACLs, etc).Obviously the problem is because the kernels are monolithic. Why not implement Security by Isolation on a kernel level then? Well, I would personally love that approach, but the industry simply took another course and decided that monolithic kernels are better then micro-kernels, because it\'s easier to write the code for them and (arguably) they offer better performance.Many believe, including myself, that this landscape can be changed by the virtualization technology. Thin bare-metal hypervisor, like e.g. Xen, can act like a micro kernel and enforce isolation between other components in the system - e.g. we can move drivers into a separate domain and isolate them from the rest of the system. But again there are challenges here on both the design- as well as the implementation-level. For example, we should not put all the drivers into the same domain, as this would provide little improvement in security. Also, how to make sure that the hypervisor itself is not buggy?Security by Obscurity (or Security by Randomization)Finally we have the Security by Obscurity approach that is based on the assumption that we cannot get rid of all the bugs (like in Security by Isolation approach), but at least we can make exploitation of those bugs very hard. So, it\'s all about making our system unfriendly to the attacker.Examples of this approach include Address Space Layout Randomization (ASLR, present in all newer OSes, like Linux, Vista, OSX), StackGuard-like protections (again used by most contemporary OSes), pointer encryption (Windows and Linux) and probably some other mechanisms that I can\'t remember at the moment. Probably the most extreme example of Security by Obscurity would be to use a compiler that generates heavily obfuscated binaries from the source code and creates a unique (on a binary level) instances of the same system. Alex did his PhD on this topic and his an expert on compilers and obfuscators.The obvious disadvantage of this approach is that it doesn\'t prevent the bugs from being exploited - it only make the meaningful exploitation very hard or even impossible. But if one is concerned also about e.g. DoS attacks, then Security by Obscurity will not prevent them in most cases. The other problem with obfuscating the code is the performance (compiler cannot optimize the code for speed) and maintenance (if we got a crash dump on an "obfuscated" Windows box, we couldn\'t count on help from the technical support). Finally there is a problem of proving that the whole scheme is correct and that our obfuscator (or e.g. ASLR engine) doesn\'t introduce bugs to the generated code and that we will not get random crashes later (that we would be most likely unable to debug, as the code will be obfuscated).I wonder if the above categorization is complete and if I haven\'t forgotten about something. If you know an example of a security approach that doesn\'t fit here (besides blacklisiting), please let me know!', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'The three approaches to computer security', 'language': None}, 'updated': u'2009-03-25T16:02:02.252+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'philosophical', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2008/09/three-approaches-to-computer-security.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'If we looked at the computer systems and how they try to provide security, I think we could categorize those attempts into three broad categories:<br /><br />1) Security by Correctness<br />2) Security by Isolation<br />3) Security by Obscurity<br /><br />Let\'s discuss those categories in more detail below.<br /><br /><span style="font-weight: bold;">Security by Correctness<br /></span><br />The assumption here is obvious: if we can produce software that doesn\'t have bugs (nor any maliciously behaving code), then we don\'t have security problems at all. The only problem is that we don\'t have any tools to make sure that a given code is correct (in terms of implementation, design and ethical behavior). But if we look at various efforts in computer science, we will notice a lot of effort has been made to achieve Security by Correctness: "safe" languages, code verifiers (although not sound ones, just heuristic based), developer\'s education, manual code audit, etc. Microsoft\'s famed Secure Development Life-cycle is all about Security by Correctness. The only problem is: all those approaches sometimes work and sometimes do not, sometimes they miss some bug and also there are problems that I simple don\'t believe can be addresses by automatic code verifiers or even safe languages, like e.g. logic/design bugs or deciding on wheatear a given code behaves maliciously or not (after all this is an ethical problem in many cases, not a computer science problem).<br /><br />To sum it: I think that in some more or less distant future (some people think abuout a timeframe of 50 years or so), we would get rid of all the implementation bugs, thanks to safe languages and/or sound code verifiers. But I don\'t believe we could assure correctness of software on any higher level of abstraction then implementation level.<br /><br /><span style="font-weight: bold;">Security by Isolation<br /></span><br />Because of the problems with effectively implementing Security by Correctness approach, people, from the very beginning, has also taken another approach, which is based on isolation. The idea is to split a computer system into smaller pieces and make sure that each piece is separated from the other ones, so that if it gets compromised/malfunctions, then it cannot affect the other entities in the system. Early UNIX\'s user accounts and separate process address spaces, things that are now present in every modern OS, are examples of Security by Isolation.<br /><br />Simple as it sound, in practice the isolation approach turned out to be very tricky to implement. One problem is how to partition the system into meaningful pieces and how to set permissions for each piece. The other problem is implementation - e.g. if we take a contemporary consumer OS, like Vista, Linux or Mac OSX, all of them have monolithic kernels, meaning that a simple bug in any of the kernel components (think: hundreds of 3rd party drivers running there), allows to bypass of the isolation mechanisms provided by the kernel to the rest of the system (process separation, ACLs, etc).<br /><br />Obviously the problem is because the kernels are monolithic. Why not implement Security by Isolation on a kernel level then? Well, I would personally love that approach, but the industry simply took another course and decided that monolithic kernels are better then micro-kernels, because it\'s easier to write the code for them and (arguably) they offer better performance.<br /><br />Many believe, including myself, that this landscape can be changed by the virtualization technology. Thin bare-metal hypervisor, like e.g. Xen, can act like a micro kernel and enforce isolation between other components in the system - e.g. we can move drivers into a separate domain and isolate them from the rest of the system. But again there are challenges here on both the design- as well as the implementation-level. For example, we should not put all the drivers into the same domain, as this would provide little improvement in security. Also, how to make sure that the hypervisor itself is not buggy?<br /><br /><span style="font-weight: bold;">Security by Obscurity (or Security by Randomization)<br /></span><br />Finally we have the Security by Obscurity approach that is based on the assumption that we cannot get rid of all the bugs (like in Security by Isolation approach), but at least we can make exploitation of those bugs very hard. So, it\'s all about making our system unfriendly to the attacker.<br /><br />Examples of this approach include Address Space Layout Randomization (ASLR, present in all newer OSes, like Linux, Vista, OSX), StackGuard-like protections (again used by most contemporary OSes), pointer encryption (Windows and Linux) and probably some other mechanisms that I can\'t remember at the moment. Probably the most extreme example of Security by Obscurity would be to use a compiler that generates heavily obfuscated binaries from the source code and creates a unique (on a binary level) instances of the same system. Alex did his PhD on this topic and his an expert on compilers and obfuscators.<br /><br />The obvious disadvantage of this approach is that it doesn\'t prevent the bugs from being exploited - it only make the meaningful exploitation very hard or even impossible. But if one is concerned also about e.g. DoS attacks, then Security by Obscurity will not prevent them in most cases. The other problem with obfuscating the code is the performance (compiler cannot optimize the code for speed) and maintenance (if we got a crash dump on an "obfuscated" Windows box, we couldn\'t count on help from the technical support). Finally there is a problem of proving that the whole scheme is correct and that our obfuscator (or e.g. ASLR engine) doesn\'t introduce bugs to the generated code and that we will not get random crashes later (that we would be most likely unable to debug, as the code will be obfuscated).<br /><br />I wonder if the above categorization is complete and if I haven\'t forgotten about something. If you know an example of a security approach that doesn\'t fit here (besides blacklisiting), please let me know!', 'guidislink': True, 'published': u'2008-09-02T13:39:00.002+02:00', u'thr_total': u'16'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=2, tm_sec=48, tm_wday=2, tm_yday=84, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/5145355901555942752/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=5145355901555942752', 'type': u'text/html', 'rel': u'replies', 'title': u'2 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/5145355901555942752', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/5145355901555942752', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/08/teamwork-crediting.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Teamwork & Crediting'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-5145355901555942752', 'published_parsed': time.struct_time(tm_year=2008, tm_mon=8, tm_mday=31, tm_hour=21, tm_min=9, tm_sec=0, tm_wday=6, tm_yday=244, tm_isdst=0), 'title': u'Teamwork & Crediting', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'As the technology is getting more and more complex, security research, especially offensive security research on a system level, becoming more and more difficult to be done by one person. NX/XD, ASLR, various StackGuard-like things, VT-d, TXT, etc... - all those technologies leave less and less space for the interesting system-level attacks. On the other hand, the widespread "deployment" of Web 2.0 creates a whole new area to explore, but that is a whole different world (plus there are still all those "human factor" attacks that exploit user stupidity, but again, this is a different area).Our Xen 0wning Trilogy is a good example of how a team of researchers can still come up with interesting new system-level attacks against the very recent and securely design system. Take XenBluePill as an example. It has first been months of research and coding done by Alex and myself to support nested hardware virtualization on AMD. Then there was months of Rafal\'s research about how to load code into the running Xen on the fly ("Xen Loadable Modules"). That required ability to access Xen\'s memory in the first place and Rafal\'s way for doing that was to use the DMA attack. But then it turned out that the Xen 3.3 uses VT-d protection to protect against this very kind of attacks. So then I came up with the "Q35 attack" that exploited a problem with recent Intel BIOSes on recent motherboards (details are coming this week). But I based my attack on a similar SMM attack that Rafal came up with a few months earlier on a different chipset, when he was looking into ways to compromise SMM handler, as we started thinking about HyperGuard project back then and Rafal was curious  reliable the SMM protection is. In the meantime, Alex "converted" our working New Blue Pill that had full support for nested virtualization but was essentially a Windows driver, into a piece of code that was completely OS-independent (own memory management, etc.). Then I finally took Rafal\'s XLM framework, added a few minor things that were needed to load our "Windows-independent Windows driver" into Xen using XLM, fixed some minor stuff and... it finally worked! But that was possible only because of the joint work by all the three people together.So, it is simply unfair to attribute all the glory and fame for our research to "Rutkowska" or "Rutkowska and team", as many news portals did. Please don\'t forget to credit all the co-authors! If you really would like to use a generic term, then "Invisible Things Lab team" would probably serve better. Speaking of our team, I also have an announcement that starting this month our team has officially been extended by yet another person: Rong Fan from Beijing, China.Rong is a software engineer, focusing on Intel\'s hardware virtualization technology (VT). A few months ago he wrote to me with some advanced questions regarding the implementation of our New BluePill that we published after the last year\'s Black Hat. Turned out that Rong, as part of his after-hour activity, is porting Bluepill to VT-x. After he succeeded, we decided to share our nested virtualization code for AMD with him so that he could investigate how to do it on VT-x. And about 2 months ago Rong succeeded with implementing full nested virtualization support for our NBP on Intel VT-x! During that time Rong has had an opportunity to find out that working with ITL is quite fun, so he decided to quit his job at Lenovo and joined ITL full time. Right now Rong is busy adding nested VT-x support to a normal Xen hypervisor.So, Invisible Things Lab is all about the team work. The whole idea behind ITL is to gather together a bunch of smart people, so that we could all work on the most exciting problems together. Problems that might be too complex or time-consuming for just one person to solve. But it takes more then just money to get people to be creative and devote themselves to work. Getting recognition is one of the additional factors often needed. That\'s why ITL is not interested in "hiding" its employees, but rather in promoting their work and fairly crediting them.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Teamwork & Crediting', 'language': None}, 'updated': u'2009-03-25T16:02:48.376+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'company news', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2008/08/teamwork-crediting.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'As the technology is getting more and more complex, security research, especially offensive security research on a system level, becoming more and more difficult to be done by one person. NX/XD, ASLR, various StackGuard-like things, VT-d, TXT, etc... - all those technologies leave less and less space for the interesting system-level attacks. On the other hand, the widespread "deployment" of Web 2.0 creates a whole new area to explore, but that is a whole different world (plus there are still all those "human factor" attacks that exploit user stupidity, but again, this is a different area).<br /><br />Our <a href="http://theinvisiblethings.blogspot.com/2008/07/0wning-xen-in-vegas.html">Xen 0wning Trilogy</a> is a good example of how a team of researchers can still come up with interesting new system-level attacks against the very recent and securely design system. Take XenBluePill as an example. <br /><br />It has first been months of research and coding done by Alex and myself to support nested hardware virtualization on AMD. Then there was months of Rafal\'s research about how to load code into the running Xen on the fly ("Xen Loadable Modules"). That required ability to access Xen\'s memory in the first place and Rafal\'s way for doing that was to use the DMA attack. But then it turned out that the Xen 3.3 uses VT-d protection to protect against this very kind of attacks. So then I came up with the "Q35 attack" that exploited a problem with recent Intel BIOSes on recent motherboards (details are coming this week). But I based my attack on a similar SMM attack that Rafal came up with a few months earlier on a different chipset, when he was looking into ways to compromise SMM handler, as we started thinking about HyperGuard project back then and Rafal was curious  reliable the SMM protection is. In the meantime, Alex "converted" our working New Blue Pill that had full support for nested virtualization but was essentially a Windows driver, into a piece of code that was completely OS-independent (own memory management, etc.). Then I finally took Rafal\'s XLM framework, added a few minor things that were needed to load our "Windows-independent Windows driver" into Xen using XLM, fixed some minor stuff and... it finally worked! But that was possible only because of the joint work by all the three people together.<br /><br />So, it is simply unfair to attribute all the glory and fame for our research to "Rutkowska" or "Rutkowska and team", as many news portals did. Please don\'t forget to credit all the co-authors! If you really would like to use a generic term, then "Invisible Things Lab team" would probably serve better. <br /><br />Speaking of our team, I also have an announcement that starting this month our team has officially been extended by yet another person: Rong Fan from Beijing, China.<br /><br />Rong is a software engineer, focusing on Intel\'s hardware virtualization technology (VT). A few months ago he wrote to me with some advanced questions regarding the implementation of our New BluePill that we published after the last year\'s Black Hat. Turned out that Rong, as part of his after-hour activity, is porting Bluepill to VT-x. After he succeeded, we decided to share our <a href="http://theinvisiblethings.blogspot.com/2008/03/kick-ass-hypervisor-nesting.html">nested virtualization code for AMD</a> with him so that he could investigate how to do it on VT-x. And about 2 months ago Rong succeeded with implementing full nested virtualization support for our NBP on Intel VT-x! During that time Rong has had an opportunity to find out that working with ITL is quite fun, so he decided to quit his job at Lenovo and joined ITL full time. Right now Rong is busy adding nested VT-x support to a normal Xen hypervisor.<br /><br />So, Invisible Things Lab is all about the team work. The whole idea behind ITL is to gather together a bunch of smart people, so that we could all work on the most exciting problems together. Problems that might be too complex or time-consuming for just one person to solve. But it takes more then just money to get people to be creative and devote themselves to work. Getting recognition is one of the additional factors often needed. That\'s why ITL is not interested in "hiding" its employees, but rather in promoting their work and fairly crediting them.', 'guidislink': True, 'published': u'2008-08-31T23:09:00.001+02:00', u'thr_total': u'2'}
{'cprob': 1.0, 'updated': u'2009-03-25T16:03:19.027+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'announcements', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=3, tm_sec=19, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2008, tm_mon=8, tm_mday=26, tm_hour=7, tm_min=41, tm_sec=0, tm_wday=1, tm_yday=239, tm_isdst=0), 'title': u'Intel patches the Q35 bug', 'pred': 'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/2529149620297733085/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=2529149620297733085', 'type': u'text/html', 'rel': u'replies', 'title': u'0 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/2529149620297733085', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/2529149620297733085', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/08/intel-patches-q35-bug.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Intel patches the Q35 bug'}], 'summary': u'Yesterday Intel has published an <a href="http://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00017&amp;languageid=en-fr">official advisory</a> that addresses the Q35 bug and attack, that we used during Black Hat as one of the ways to subvert Xen 3.3 on a VT-d enabled system (the alternative way was to use the Xen-specific FLASK exploit, that worked even from an unprivileged domain).<br /><br />One small clarification though: in the advisory they stated that: "Software running administrative (ring 0) privilege can under certain circumstances change code running in System Management Mode." But in fact an attacker might also use this bug to directly modify the hypervisor memory, without jumping into the SMM first, just as we did it with our exploit. Also, in case of e.g. Linux systems, the Ring0 access is not strictly required to perform the attack, as it\'s just enough for the attacker to get access to the PCI config space of the device 0:0:0, which e.g. on Linux can be granted to usermode applications via the iopl() system call.<br /><br />You can download a new firmware for your motherboard from <a href="http://downloadcenter.intel.com/Filter_Results.aspx?strTypes=all&amp;ProductID=2783&amp;OSFullName=OS+Independent&amp;lang=eng&amp;strOSs=38&amp;submit=Go!">here</a>.<br /><br />Intel did a good job on handling this bug - not only they recognized the importance of the attack, but also released the patch promptly. Quite positively surprising as for such a big company.<br /><br />So, now we\'re free to publish all the missing slides about how we exploit this vulnerability that we had to remove from our Black Hat presentation, as well as the exploit code. However, as I\'m going to give 2 presentations at the upcoming <a href="http://isf.no/index_net.htm">ISF conference</a> in Sweden early next week, I thought it would be logical to wait with disclosing this material and present it at this conference, during my technical speech (I will also deliver the keynote for this conference). Of course, as soon as I will get back home (Thursday next week), we will publish the full slides, exploit codes and all the demos, as promised earlier.<br /><br />Speaking of speaking: also next month, Rafal will fly to Oregon, to Intel campus, for the Intel Virtualization Security Summit, where he will deliver a "compressed" version of our Xen 0wning Trilogy to the technical crowd of Intel employees. Rafal will provide some more details about the HyperGuard project that we do in cooperation with Phoenix Technologies. Also, in October, Alex will visit Kuala Lumpur and present an updated Bluepilling the Xen Hypervisor talk at the Hack In The Box conference.', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'Yesterday Intel has published an official advisory that addresses the Q35 bug and attack, that we used during Black Hat as one of the ways to subvert Xen 3.3 on a VT-d enabled system (the alternative way was to use the Xen-specific FLASK exploit, that worked even from an unprivileged domain).One small clarification though: in the advisory they stated that: "Software running administrative (ring 0) privilege can under certain circumstances change code running in System Management Mode." But in fact an attacker might also use this bug to directly modify the hypervisor memory, without jumping into the SMM first, just as we did it with our exploit. Also, in case of e.g. Linux systems, the Ring0 access is not strictly required to perform the attack, as it\'s just enough for the attacker to get access to the PCI config space of the device 0:0:0, which e.g. on Linux can be granted to usermode applications via the iopl() system call.You can download a new firmware for your motherboard from here.Intel did a good job on handling this bug - not only they recognized the importance of the attack, but also released the patch promptly. Quite positively surprising as for such a big company.So, now we\'re free to publish all the missing slides about how we exploit this vulnerability that we had to remove from our Black Hat presentation, as well as the exploit code. However, as I\'m going to give 2 presentations at the upcoming ISF conference in Sweden early next week, I thought it would be logical to wait with disclosing this material and present it at this conference, during my technical speech (I will also deliver the keynote for this conference). Of course, as soon as I will get back home (Thursday next week), we will publish the full slides, exploit codes and all the demos, as promised earlier.Speaking of speaking: also next month, Rafal will fly to Oregon, to Intel campus, for the Intel Virtualization Security Summit, where he will deliver a "compressed" version of our Xen 0wning Trilogy to the technical crowd of Intel employees. Rafal will provide some more details about the HyperGuard project that we do in cooperation with Phoenix Technologies. Also, in October, Alex will visit Kuala Lumpur and present an updated Bluepilling the Xen Hypervisor talk at the Hack In The Box conference.', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Intel patches the Q35 bug', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2008/08/intel-patches-q35-bug.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2008-08-26T09:41:00.001+02:00', u'thr_total': u'0', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-2529149620297733085'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=3, tm_sec=29, tm_wday=2, tm_yday=84, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/5745634034617951424/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=5745634034617951424', 'type': u'text/html', 'rel': u'replies', 'title': u'0 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/5745634034617951424', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/5745634034617951424', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/08/attacking-xen-domu-vs-dom0.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Attacking Xen: DomU vs. Dom0 consideration'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-5745634034617951424', 'published_parsed': time.struct_time(tm_year=2008, tm_mon=8, tm_mday=20, tm_hour=11, tm_min=59, tm_sec=0, tm_wday=2, tm_yday=233, tm_isdst=0), 'title': u'Attacking Xen: DomU vs. Dom0 consideration', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'As it usually happens, there is some confusion regarding the attacks presented in our Xen 0wning Trilogy. Some people think they are possible only from Dom0 (the Xen\'s privileged, administrative domain) while some other people have the impression that all the attacks are possible from any unprivileged domain (DomU in Xen\'s terminology). The truth is in the middle though.Most of the attacks we presented do indeed require that the attacker first obtained access to Dom0 and only from there can launch further attacks. For example the DMA attacks that allow to overwrite hypervisor memory do indeed assume Dom0 access. The same applies to the Q35 exploit - this one is similar to the above mentioned DMA attacks in that it also requires access to certain hardware (that is possible from Dom0), but has an advantage that can bypass the hypervisor VT-d protection in the recent Xen 3.3. There are several reasons why those attacks are still very important though:1) First note, that the requirement for the attacker to have access to Dom0 in order to install e.g. hypervisor rootkits, is similar to the requirement that in order to install a Windows or Linux rootkit, one first needs to obtain administrator\'s privileges. Yet we know that Windows or Linux rootkits is a serious security problem.2) Concerning the Xen-based systems specifically: over the last year several bugs have been discovered and published, that allowed an attacker to gain control of the Domain0 from an unprivileged domain (i.e. escape from the virtual machine). Rafal has discovered one such bug in December 2007.3) Recent versions of Xen make deliberate effort to protect the hypervisor even from the Dom0. On systems that have IOMMU support (e.g. Intel\'s VT-d), the hypervisor memory is protected from tampering using both the processor\'s ring3/ring0 separation mechanism as well as the IOMMU protection. We showed that those protections can be bypassed. The attempt to isolate hypervisor and protect it even from attacks originating from Dom0 is not surprising. After all if we would like to treat the hypervisor as a root of trust, then we should make sure that its code base is minimal. If we now allow Dom0 to effectively be the hypervisor (i.e. if we don\'t care about Dom0-to-hypervisor escalations) then we should include all the Dom0 code to the hypervisor code base, when evaluating hypervisor security. This would result in our "extended hypervisor" having not ~300k lines of code (like current Xen does), but millions of lines of code!Having said that all about how important it is to prevent all the possible Dom0-to-hypervisor attacks, I should stress that we also presented an attack that does not require Dom0 access and that can be spawned from an unprivileged DomU domain. As far as I\'m aware, Rafal\'s FLASK bug & exploit (presented in the 2nd presentation) was the first public example of a successful exploitation of an overflow in a bare-metal hypervisor. The bug was a heap overflow and Rafal presented some clever tricks of how to control the Xen\'s heap allocations in order to make this bug exploitable.Please note that all the rootkit-like stuff that we also presented, i.e. Rafal\'s Xen Loadable Modules framework and his hypervisor rootkits, as well as Alex\'s and mine XenBluePill, can all be used with all the above mentioned attacks. So, e.g. if we are on a machine that has VT-d support and run Xen 3.3 we can still use the Q35 attack and get the XLM framework running and then use it to install e.g. XenBluePill on top of running Xen, as showed during the 3rd presentation. Similarly, we could use the FLASK exploit and get XLM running again and again used it for installation of the other stuff.Hope this clears some confusion about our presentations. As already promised, the codes and demos and full version of the 2nd talk slides (with the Q35 attack details) will be posted after Intel release the patch for their motherboards. Stay tuned.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Attacking Xen: DomU vs. Dom0 consideration', 'language': None}, 'updated': u'2009-03-25T16:03:29.110+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'xen hacking', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2008/08/attacking-xen-domu-vs-dom0.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'As it usually happens, there is some confusion regarding the attacks presented in our Xen 0wning Trilogy. Some people think they are possible only from Dom0 (the Xen\'s privileged, administrative domain) while some other people have the impression that all the attacks are possible from any unprivileged domain (DomU in Xen\u2019s terminology). The truth is in the middle though.<br /><br />Most of the attacks we presented do indeed require that the attacker first obtained access to Dom0 and only from there can launch further attacks. For example the DMA attacks that allow to overwrite hypervisor memory do indeed assume Dom0 access. The same applies to the Q35 exploit - this one is similar to the above mentioned DMA attacks in that it also requires access to certain hardware (that is possible from Dom0), but has an advantage that can bypass the hypervisor VT-d protection in the recent Xen 3.3. <br /><br />There are several reasons why those attacks are still very important though:<br />1) First note, that the requirement for the attacker to have access to Dom0 in order to install e.g. hypervisor rootkits, is similar to the requirement that in order to install a Windows or Linux rootkit, one first needs to obtain administrator\'s privileges. Yet we know that Windows or Linux rootkits is a serious security problem.<br /><br />2) Concerning the Xen-based systems specifically: over the last year several bugs have been discovered and published, that allowed an attacker to gain control of the Domain0 from an unprivileged domain (i.e. escape from the virtual machine). Rafal has discovered <a href="http://www.mcafee.com/us/local_content/misc/threat_center/e2fsprogs.pdf">one such bug</a> in December 2007.<br /><br />3) Recent versions of Xen make deliberate effort to protect the hypervisor even from the Dom0. On systems that have IOMMU support (e.g. Intel\'s VT-d), the hypervisor memory is protected from tampering using both the processor\'s ring3/ring0 separation mechanism as well as the IOMMU protection. We showed that those protections can be bypassed. <br /><br />The attempt to isolate hypervisor and protect it even from attacks originating from Dom0 is not surprising. After all if we would like to treat the hypervisor as a root of trust, then we should make sure that its code base is minimal. If we now allow Dom0 to effectively <span style="font-style: italic;">be</span> the hypervisor (i.e. if we don\'t care about Dom0-to-hypervisor escalations) then we should include all the Dom0 code to the hypervisor code base, when evaluating hypervisor security. This would result in our "extended hypervisor" having not ~300k lines of code (like current Xen does), but millions of lines of code!<br /><br />Having said that all about how important it is to prevent all the possible Dom0-to-hypervisor attacks, I should stress that we also presented an attack that does not require Dom0 access and that can be spawned from an unprivileged DomU domain. As far as I\'m aware, Rafal\'s FLASK bug & exploit (presented in the 2nd presentation) was the first public example of a successful exploitation of an overflow in a bare-metal hypervisor. The bug was a heap overflow and Rafal presented some clever tricks of how to control the Xen\'s heap allocations in order to make this bug exploitable.<br /><br />Please note that all the rootkit-like stuff that we also presented, i.e. Rafal\'s Xen Loadable Modules framework and his hypervisor rootkits, as well as Alex\'s and mine XenBluePill, can all be used with all the above mentioned attacks. So, e.g. if we are on a machine that has VT-d support and run Xen 3.3 we can still use the Q35 attack and get the XLM framework running and then use it to install e.g. XenBluePill on top of running Xen, as showed during the 3rd presentation. Similarly, we could use the FLASK exploit and get XLM running again and again used it for installation of the other stuff.<br /><br />Hope this clears some confusion about our presentations. As already promised, the codes and demos and full version of the 2nd talk slides (with the Q35 attack details) will be posted after Intel release the patch for their motherboards. Stay tuned.', 'guidislink': True, 'published': u'2008-08-20T13:59:00.001+02:00', u'thr_total': u'0'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=3, tm_sec=38, tm_wday=2, tm_yday=84, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/1952716314561818264/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=1952716314561818264', 'type': u'text/html', 'rel': u'replies', 'title': u'5 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1952716314561818264', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1952716314561818264', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/08/our-xen-0wning-trilogy-highlights.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Our Xen 0wning Trilogy Highlights'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-1952716314561818264', 'published_parsed': time.struct_time(tm_year=2008, tm_mon=8, tm_mday=8, tm_hour=7, tm_min=42, tm_sec=0, tm_wday=4, tm_yday=221, tm_isdst=0), 'title': u'Our Xen 0wning Trilogy Highlights', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'Below you can find highlights of the three presentations, collectively referred to as "Xen 0wning Trilogy", that Alex, Rafal and I gave today at the Black Hat conference in Las Vegas.Talk #11) Practical implementation of reliable and portable DMA attacks from Domain 0 to the Xen hypervisor memory.2) Xen Loadable Modules :) A framework that allows to load arbitrary C code modules into the running Xen hypervisor. It uses DMA attack from the previous point to get access to Xen memory.3) Two implementations of Xen Hypervisor Rootkits. This was the first time that working hypervisor rootkits have been presented (note the distinction between hypervisor rootkit vs. virtualization based rootkits).Talk #21) Discussed how Xen 3.3 makes use of the Intel VT-d technology to protect the hypervisor. 2) Then we discussed how to bypass such VT-d protection on certain motherboards, like e.g. Intel DQ35 board.3) An extra bonus: our attack from the previous point allows also to subvert the SMM handler and e.g. install an SMM rootkit in the system.4) Discussed other Xen security mechanisms like driver domains, stub domains, PV GRUB and also attempted to quickly compare the state of Xen security design with the Hyper-V and ESX hypervisor.5) Showed an exploitable heap overflow bug in the Xen hypervisor. The bug was in the FLASK module -- the NSA implementation of Xen Security Modules. FLASK, however, is not turned on by default, so even though we showed how to successfully exploit this heap overflow (which results in an escape from an unprivileged domain directly to the hypervisor), this is not a bug that can be used to 0wn The Planet. It shows, however, what happens when people start adding more and more code into the hypervisor.6) Introduced HyperGuard -- a project done in cooperation with Phoenix Technologies. HyperGuard is going to be a SMM-based integrity scanner for Xen-like hypervisors. With HyperGuard we take a different approach then other integrity scanners do -- rather than ensuring the correctness of the code and data of the hypervisor, which might be very tricky, we instead ensure there is no untrusted code in the hypervisor, which is a much simpler task.Talk #31) Provided detailed description of how to implement nested hardware based virtualization on AMD-V and VT-x (a copy of the slides from my RSA speech in April).2) Showed how to use this nested virtualization to implement Blue Pill Boot, that can be used to virtualize the system right from the boot stage. We mentioned the best defend against this kind of system compromises is a trusted boot mechanism, either SRTM or DRTM, as implemented e.g. by Xen\'s tboot.3) Consequently we showed Xen Blue Pill that is able to move a running Xen system into a virtual machine on the fly. This, on the other hand, cannot be prevented by neither the SRTM nor DRTM technology. XBP is a good example that running a legitimate hypervisor doesn\'t always prevent bluepill-like malware from being installed in the system.4) Finally, discussed the XBP detection. First, we noted that all the "VMM detectors", proposed over the last years, that try to detect if there is a hypervisor running above, are useless in the case of a bluepilled Xen system. The only one approach that could be used is the direct timing analysis of the #VMEXIT times in order to distinguish between the native Xen case vs. bluepilled Xen case. We noted however, that direct timing analysis will not observe any differences when run from PV domains on AMD processors, and that it will observe little difference when run from HVM domains (7k vs. 5k cycles). The detection is easier on Intel processors, because of the unconditional #VMEXIT that we cannot get rid of.All the three talks can be found here.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Our Xen 0wning Trilogy Highlights', 'language': None}, 'updated': u'2009-03-25T16:03:38.496+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'hypervisor rootkits', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'xen hacking', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'xen heap exploiting', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'virtualization based rootkits', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2008/08/our-xen-0wning-trilogy-highlights.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'Below you can find highlights of the three presentations, collectively referred to as "Xen 0wning Trilogy", that Alex, Rafal and I gave today at the Black Hat conference in Las Vegas.<br /><br /><span style="font-weight: bold;">Talk #1</span><br /><br />1) Practical implementation of reliable and portable DMA attacks from Domain 0 to the Xen hypervisor memory.<br /><br />2) Xen Loadable Modules :) A framework that allows to load arbitrary C code modules into the running Xen hypervisor. It uses DMA attack from the previous point to get access to Xen memory.<br /><br />3) Two implementations of Xen Hypervisor Rootkits. This was the first time that working hypervisor rootkits have been presented (note the distinction between hypervisor rootkit vs. virtualization based rootkits).<br /><br /><span style="font-weight: bold;">Talk #2</span><br /><br />1) Discussed how Xen 3.3 makes use of the Intel VT-d technology to protect the hypervisor. <br /><br />2) Then we discussed how to bypass such VT-d protection on certain motherboards, like e.g. Intel DQ35 board.<br /><br />3) An extra bonus: our attack from the previous point allows also to subvert the SMM handler and e.g. install an SMM rootkit in the system.<br /><br />4) Discussed other Xen security mechanisms like driver domains, stub domains, PV GRUB and also attempted to quickly compare the state of Xen security design with the Hyper-V and ESX hypervisor.<br /><br />5) Showed an exploitable heap overflow bug in the Xen hypervisor. The bug was in the FLASK module -- the NSA implementation of Xen Security Modules. FLASK, however, is not turned on by default, so even though we showed how to successfully exploit this heap overflow (which results in an escape from an unprivileged domain directly to the hypervisor), this is not a bug that can be used to 0wn The Planet. It shows, however, what happens when people start adding more and more code into the hypervisor.<br /><br />6) Introduced HyperGuard -- a project done in cooperation with Phoenix Technologies. HyperGuard is going to be a SMM-based integrity scanner for Xen-like hypervisors. With HyperGuard we take a different approach then other integrity scanners do -- rather than ensuring the correctness of the code and data of the hypervisor, which might be very tricky, we instead ensure there is no untrusted code in the hypervisor, which is a much simpler task.<br /><br /><span style="font-weight: bold;">Talk #3</span><br /><br />1) Provided detailed description of how to implement nested hardware based virtualization on AMD-V and VT-x (a copy of the slides from my RSA speech in April).<br /><br />2) Showed how to use this nested virtualization to implement Blue Pill Boot, that can be used to virtualize the system right from the boot stage. We mentioned the best defend against this kind of system compromises is a trusted boot mechanism, either SRTM or DRTM, as implemented e.g. by Xen\'s tboot.<br /><br />3) Consequently we showed Xen Blue Pill that is able to move a running Xen system into a virtual machine on the fly. This, on the other hand, cannot be prevented by neither the SRTM nor DRTM technology. XBP is a good example that running a legitimate hypervisor doesn\'t always prevent bluepill-like malware from being installed in the system.<br /><br />4) Finally, discussed the XBP detection. First, we noted that all the "VMM detectors", proposed over the last years, that try to detect if there is a hypervisor running above, are useless in the case of a bluepilled Xen system. The only one approach that could be used is the direct timing analysis of the #VMEXIT times in order to distinguish between the native Xen case vs. bluepilled Xen case. We noted however, that direct timing analysis will not observe any differences when run from PV domains on AMD processors, and that it will observe little difference when run from HVM domains (7k vs. 5k cycles). The detection is easier on Intel processors, because of the unconditional #VMEXIT that we cannot get rid of.<br /><br />All the three talks can be found <a href="http://invisiblethingslab.com/bh08/">here</a>.', 'guidislink': True, 'published': u'2008-08-08T09:42:00.002+02:00', u'thr_total': u'5'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=3, tm_sec=47, tm_wday=2, tm_yday=84, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/5820262464138516969/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=5820262464138516969', 'type': u'text/html', 'rel': u'replies', 'title': u'5 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/5820262464138516969', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/5820262464138516969', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/07/0wning-xen-in-vegas.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'0wning Xen in Vegas!'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-5820262464138516969', 'published_parsed': time.struct_time(tm_year=2008, tm_mon=7, tm_mday=7, tm_hour=14, tm_min=3, tm_sec=0, tm_wday=0, tm_yday=189, tm_isdst=0), 'title': u'0wning Xen in Vegas!', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u"At this year's Black Hat conference in Las Vegas in August we will be presenting three talks about the Xen hypervisor (in)security. The three presentations have been designed in such a way that they complement each other and create one bigger entirety, thus they can be referred as Xen 0wning Trilogy for brevity.In the first presentation, Subverting the Xen hypervisor, Rafal will discuss how to modify the Xen's hypervisor memory and consequently how to use this ability to plant hypervisor rootkits inside Xen (everything on the fly, without rebooting Xen). Hypervisor rootkits are very different creatures from virtualization based rootkits (e.g. Bluepill). This will be the first public demonstration of practical VMM 0wning (proof of concept code will be released, of course).In the second talk, Detecting and Preventing the Xen hypervisor subversions, Rafal and I will discuss various anti-subverting techniques (IOMMU, Xen's driver- and stub- domains) and whether they really can protect the Xen (or similar) hypervisor from compromises. After demonstrating that those mechanisms can be bypassed, we will switch to discussing hypervisor integrity scanning and will present some prototype solutions to this problem.Our trilogy wouldn't be complete without discussing virtualization based malware in the context of bare-metal hypervisor compromises. Thus, in the third speech, Bluepilling the Xen hypervisor, Alex and I will discuss how to insert Bluepill on top of the running Xen hypervisor. We will show how to do that both with and without restart (i.e. on the fly). To make this possible, our Bluepill needs to support full nested virtualization, so that Xen can still function properly. We will also discuss how the Bluepill detection methods proposed over the last 2 years, as well as the integrity scanning methods discussed in the previous speech, fit into this new scenario and how far we are from the stealth malware's Holy Grail ;)Special thanks to Black Hat organizers for scheduling all the three presentations one after another in a dedicated Virtualization track on the 2nd day of the conference (August 7th).It's worth noting that we chose Xen as the target not because we think it's insecure and worthless. On the contrary, we believe Xen is the most secure bare-metal hypervisor out there (especially with all the goodies in the upcoming Xen 3.3). Still we believe that it needs some improvements when it comes to security. We hope that our presentations will help making Xen (and similar hypervisors) more secure.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'0wning Xen in Vegas!', 'language': None}, 'updated': u'2009-03-25T16:03:47.633+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'hypervisor rootkits', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'xen hacking', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}, {'term': u'virtualization based rootkits', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2008/07/0wning-xen-in-vegas.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'announcements', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://1.bp.blogspot.com/_Ti3q3Hdvels/SHIrRRp7nYI/AAAAAAAAAB8/MCybwCZ2nuI/s72-c/Fotolia_1758548_XS.jpg', 'width': u'72', 'height': u'72'}], 'summary': u'<img alt="" border="0" id="BLOGGER_PHOTO_ID_5220282493872872834" src="http://1.bp.blogspot.com/_Ti3q3Hdvels/SHIrRRp7nYI/AAAAAAAAAB8/MCybwCZ2nuI/s200/Fotolia_1758548_XS.jpg" style="float: right; margin: 0 0 10px 10px;" />At this year\u2019s Black Hat conference in Las Vegas in August <a href="http://theinvisiblethings.blogspot.com/2008/07/rafal-wojtczuk-joins-invisible-things.html">we</a> will be presenting three talks about the Xen hypervisor (in)security. The three presentations have been designed in such a way that they complement each other and create one bigger entirety, thus they can be referred as <strong>\u201cXen 0wning Trilogy\u201d</strong> for brevity.<br /><br />In the first presentation, <a href="http://blackhat.com/html/bh-usa-08/bh-usa-08-speakers.html#Wojtczuk">Subverting the Xen hypervisor</a>, Rafal will discuss how to modify the Xen\u2019s hypervisor memory and consequently how to use this ability to plant hypervisor rootkits inside Xen (everything on the fly, without rebooting Xen). Hypervisor rootkits are very different creatures from virtualization based rootkits (e.g. Bluepill). This will be the first public demonstration of practical VMM 0wning (proof of concept code will be released, of course).<br /><br />In the second talk, <a href="http://blackhat.com/html/bh-usa-08/bh-usa-08-speakers.html#Rutkowska">Detecting and Preventing the Xen hypervisor subversions</a>, Rafal and I will discuss various anti-subverting techniques (IOMMU, Xen\u2019s driver- and stub- domains) and whether they really can protect the Xen (or similar) hypervisor from compromises. After demonstrating that those mechanisms can be bypassed, we will switch to discussing hypervisor integrity scanning and will present some prototype solutions to this problem.<br /><br />Our trilogy wouldn\u2019t be complete without discussing virtualization based malware in the context of bare-metal hypervisor compromises. Thus, in the third speech, <a href="http://blackhat.com/html/bh-usa-08/bh-usa-08-speakers.html#Tereshkin">Bluepilling the Xen hypervisor</a>, Alex and I will discuss how to insert Bluepill on top of the running Xen hypervisor. We will show how to do that both with and without restart (i.e. on the fly). To make this possible, our Bluepill needs to support full nested virtualization, so that Xen can still function properly. We will also discuss how the \u201cBluepill detection\u201d methods proposed over the last 2 years, as well as the integrity scanning methods discussed in the previous speech, fit into this new scenario and how far we are from the stealth malware\u2019s Holy Grail ;)<br /><br />Special thanks to Black Hat organizers for scheduling all the three presentations one after another in a dedicated <em>Virtualization</em> track on the 2nd day of the conference (August 7th).<br /><br />It\u2019s worth noting that we chose Xen as the target not because we think it\u2019s insecure and worthless. On the contrary, we believe Xen is the most secure bare-metal hypervisor out there (especially with all the goodies in the upcoming Xen 3.3). Still we believe that it needs some improvements when it comes to security. We hope that our presentations will help making Xen (and similar hypervisors) more secure.', 'guidislink': True, 'published': u'2008-07-07T16:03:00.004+02:00', u'thr_total': u'5'}
{'cprob': 1.0, 'updated': u'2009-03-25T16:03:57.142+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'announcements', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=3, tm_sec=57, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2008, tm_mon=7, tm_mday=1, tm_hour=18, tm_min=36, tm_sec=0, tm_wday=1, tm_yday=183, tm_isdst=0), 'title': u'Rafal Wojtczuk joins Invisible Things Lab', 'pred': 'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/8942209840459034399/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=8942209840459034399', 'type': u'text/html', 'rel': u'replies', 'title': u'2 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8942209840459034399', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8942209840459034399', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/07/rafal-wojtczuk-joins-invisible-things.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Rafal Wojtczuk joins Invisible Things Lab'}], 'summary': u'I\u2019m very happy to announce that a well known researcher, Rafal Wojtczuk, will join our team this month.<br /><br />For anybody who is serious about OS security research it is hard not to know Rafal\u2019s work. I remember reading his <a href="http://seclists.org/bugtraq/1998/Feb/0006.html"><em>Defeating Solar Designer non-executable stack patch</em> article</a> somewhere around 1998, when I was still a Linux newbie, learning shell programming back at that time ;) <br /><br />Since then Rafal published many other articles, advisories and exploits, mostly Linux-related. To mention just a few \u2013 the <a href="http://seclists.org/bugtraq/2000/Jan/0348.html">*BSD procfs vulnerability</a> (2000), the <a href="http://seclists.org/bugtraq/2001/Oct/0135.html">Linux Ptrace vulnerability</a> (2001), the famous <a href="http://www.phrack.org/issues.html?issue=58&amp;id=4#article">Advanced return-into-lib(c) paper</a> (2002), the <a href="http://www.nsa.gov/selinux/list-archive/att-4468/description.txt">vulnerability in the SELinux</a> (2003), <a href="http://events.ccc.de/congress/2005/fahrplan/events/563.en.html">a tool</a> for automatic integer overflow discovery in Win32 binaries (2005) and many others. He\u2019s also known for his <a href="http://libnids.sourceforge.net/">libnids project</a>.<br /><br />Recently Rafal has been doing a lot of research in the area of virtualization and VMM security. In the recent months he found vulnerabilities that potentially allowed to escape a VM jail in all the major virtualization software from <a href="http://www.microsoft.com/technet/security/Bulletin/MS07-049.mspx">Microsoft</a>, <a href="http://www.mcafee.com/us/local_content/misc/threat_center/vmware_advisory1.pdf">VMWare</a> and, of course, <a href="http://www.mcafee.com/us/local_content/misc/threat_center/e2fsprogs.pdf">Xen</a>.<br /><br />I wrote \u201cand, of course, Xen\u201d, as Rafal will be presenting a talk at the upcoming Black Hat about <em>Subverting the Xen hypervisor</em>. His talk will be the first one in the series of 3 presentations about Xen (in)security that Invisible Things Lab prepared for this year\u2019s Black Hat. Stay tuned for more details in the coming days.<br /><br />Rafal has been with McAfee Avert Labs until this month.', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u"I'm very happy to announce that a well known researcher, Rafal Wojtczuk, will join our team this month.For anybody who is serious about OS security research it is hard not to know Rafal's work. I remember reading his Defeating Solar Designer non-executable stack patch article somewhere around 1998, when I was still a Linux newbie, learning shell programming back at that time ;) Since then Rafal published many other articles, advisories and exploits, mostly Linux-related. To mention just a few \u2013 the *BSD procfs vulnerability (2000), the Linux Ptrace vulnerability (2001), the famous Advanced return-into-lib(c) paper (2002), the vulnerability in the SELinux (2003), a tool for automatic integer overflow discovery in Win32 binaries (2005) and many others. He's also known for his libnids project.Recently Rafal has been doing a lot of research in the area of virtualization and VMM security. In the recent months he found vulnerabilities that potentially allowed to escape a VM jail in all the major virtualization software from Microsoft, VMWare and, of course, Xen.I wrote and, of course, Xen, as Rafal will be presenting a talk at the upcoming Black Hat about Subverting the Xen hypervisor. His talk will be the first one in the series of 3 presentations about Xen (in)security that Invisible Things Lab prepared for this year's Black Hat. Stay tuned for more details in the coming days.Rafal has been with McAfee Avert Labs until this month.", 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Rafal Wojtczuk joins Invisible Things Lab', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2008/07/rafal-wojtczuk-joins-invisible-things.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2008-07-01T20:36:00.002+02:00', u'thr_total': u'2', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-8942209840459034399'}
{'cprob': 0.999, 'updated': u'2009-03-25T16:04:05.613+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'announcements', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=4, tm_sec=5, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2008, tm_mon=5, tm_mday=20, tm_hour=8, tm_min=26, tm_sec=0, tm_wday=1, tm_yday=141, tm_isdst=0), 'title': u'1984?', 'pred': 'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7813731853415735079/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=7813731853415735079', 'type': u'text/html', 'rel': u'replies', 'title': u'13 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7813731853415735079', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7813731853415735079', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/05/1984.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'1984?'}], 'summary': u'I can\'t believe <a href="http://arstechnica.com/news.ars/post/20080519-google-health-beta-launches-with-security-issues-looming.html">this</a> is happening for real... <br /><br />So, how can we enforce Google to never do read() on a <code>/var/users/john_smith/heath_records.db</code>? How about a read() implemented from within a kernel-level via RAW-disk access that would never be logged?<br /><br />I wonder when we would get another cool service from Google, e.g. "Google Thoughts", where people would be able to store their most private and personal thoughts, so that they could "access and managed them from all over the world", "in a secure fashion", of course. Right, add the Thought Police to this picture and welcome to Orwell\'s Oceania!<br /><br />There is a difference between using the Web for blog writing vs. giving away all the private aspects of your life for free to some corporation in an unencrypted form. I wonder whether all the people who understands the notion of the local hard disk will be vaporized some time...', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'I can\'t believe this is happening for real... So, how can we enforce Google to never do read() on a /var/users/john_smith/heath_records.db? How about a read() implemented from within a kernel-level via RAW-disk access that would never be logged?I wonder when we would get another cool service from Google, e.g. "Google Thoughts", where people would be able to store their most private and personal thoughts, so that they could "access and managed them from all over the world", "in a secure fashion", of course. Right, add the Thought Police to this picture and welcome to Orwell\'s Oceania!There is a difference between using the Web for blog writing vs. giving away all the private aspects of your life for free to some corporation in an unencrypted form. I wonder whether all the people who understands the notion of the local hard disk will be vaporized some time...', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'1984?', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2008/05/1984.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2008-05-20T10:26:00.002+02:00', u'thr_total': u'13', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-7813731853415735079'}
{'cprob': 1.0, 'updated': u'2009-03-25T16:04:12.026+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'announcements', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=4, tm_sec=12, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2008, tm_mon=4, tm_mday=30, tm_hour=13, tm_min=44, tm_sec=0, tm_wday=2, tm_yday=121, tm_isdst=0), 'title': u'Vegas Training 2008', 'pred': 'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/3486345275075744973/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=3486345275075744973', 'type': u'text/html', 'rel': u'replies', 'title': u'1 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3486345275075744973', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3486345275075744973', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/04/vegas-training-2008.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Vegas Training 2008'}], 'summary': u'Last year we debuted with our Understanding Stealth Malware training at the Black Hat Vegas. We had about 70 participants and I think it was a reasonable success, especially that the training was announced very late. Since then we have done a couple of on-site classes and also have been continually updating the training.<br /><br />During our 2nd public edition, at Black Hat Europe 2008 in March this year, we significantly extended the part about virtualization, e.g. by adding discussion of nested virtualization on AMD-v and showing and analyzing the actual code for implementing this. Also we have used the New Blue Pill code with VT-x support (previously it worked only on AMD-V), making it possible to use both AMD and Intel machines for the class. This allowed us to offer this training in a "Bring Your Own Laptop" fashion, that we know is much preferred by attendees, who simply feel better when using their own, known, work environment.<br /><br />At the upcoming Black Hat Vegas 2008 we are also going to offer this class. That would be our 3rd public edition. Again, we hope to improve it even more beyond what we have presented at BH Europe 2008. Similarly as last time, we will not provide the computers, but rather expect the attendees to bring their own systems. At the end of this article are the requirements that should be met by your machine, if you would like to use it during the training and be able to do all the exercises. Of course, you should back up all your important data before coming to the class, as the computer might become corrupt after doing some of the exercises (although this has never happened so far).<br /><br />There will be only one class offered on August 4/5 (the weekday class). You can view the detailed training agenda that we used for the BH Europe class in March <a href="http://invisiblethingslab.com/pub/UnderstandingStealthMalware-program-1.4.pdf">here</a>. Please note that the exact shape of the Vegas class is subject to be a bit different, as we are planning to add new material again.<br /><br />This might be the very last chance for you to attended this specific training, as it\'s quite possible that next year we will be offering some other class, focused on Virtualization security entirely. Don\'t worry, however, if you don\'t get a seat in the Vegas class, there is still a chance to have that class presented on-site in your town.<br /><br />You can register for the Vegas training <a href="http://blackhat.com/html/bh-usa-08/train-bh-usa-08-jrk-at.html">here</a>.<br /><br />See you in Vegas!<br /><br /><span style="font-size: 100%;"><span style="font-weight: bold;">Hardware Requirement</span>s<br /></span><ol><li><span style="font-size: 100%;">64-bit (x64) AMD or Intel processor with hardware virtualization support (AMD-v or VT-x)</span></li><li><span style="font-size: 100%;">DVD-ROM</span></li><li><span style="font-size: 100%;">2GB RAM (for convenient work with VMWare)</span></li></ol><span style="font-size: 100%;"><span style="font-weight: bold;">Software Requirement</span><br /></span><ol><li><span style="font-size: 100%;"> 64-bit Vista OS (primary OS, non virtualized)</span></li><li><span style="font-size: 100%;"> Windows Driver Kit (WDK) 6000 or newer (available via MSDN subscription).</span></li><li><span style="font-size: 100%;"> VMWare Workstation 6.x or VMWare Player 2.x (the latter is free)</span></li><li><span style="font-size: 100%;"> Optionally: IDA Pro 5.x disassembler (for exercises that involve finding bugs in drivers)</span></li></ol><span style="font-size: 100%;"><span style="font-weight: bold;">AMD Processors</span><br />Most modern AMD mobile processors, like e.g. AMD Turion and Athlon, used in modern laptops support AMD-v technology. Unfortunately there is no single place on AMD website that would provide the complete description of all CPUs that support AMD-v technology or provide an answer whether a given model does support it. When in doubt use google and always verify with the CHKSVMX program described below.<br /><br /><span style="font-weight: bold;">Intel Processors </span><br />Most modern Intel processors used in notebooks support Intel VT-x virtualization technology, this include Core 2 Solo, Core 2 Duo (except T5500, T5550 and T5750 models) and Core 2 Extreme. You can check your own model starting at <a href="http://www.intel.com/products/laptop/processors/index.htm?iid=processors_body+nb_core">this website</a>, then chose your processor family and chose "Specifications" tab. Make sure the processor supports "Intel\xae 64 architecture" and "Intel\xae Virtualization Technology".<br /><br /><span style="font-weight: bold;">Using Mac for the training</span><br />You can very easily use MacBook or MacBook Pro for this training. You can easily install Windows on a second partition using the Boot Camp program that ships with all the newer Macs. You simply start Boot Camp application when running Mac OS X and then it automatically shrinks your current Mac partition, creates a new one for Windows, and asks to insert the installation media and reboots the system and you then perform normal Windows setup (after installation is complete your Vista should find all the necessary drivers via Windows Update). You might also want to use the free <a href="http://www.autohotkey.com/">AutoHotKey</a> program for the right-click emulation on your newly installed Vista. Please don\'t worry that Boot Camp tells that you should install a 32-bit Vista - you can ignore this and insert a 64-bit Vista installation disk.<br /><br /><span style="font-weight: bold;">Testing your machine with CHKSVMX</span><br />We have prepared a special little program, CHKSVMX, to test whether a given machine indeed supports hardware virtualization technology. The CHKSVMX program can be downloaded from <a href="http://invisiblethingslab.com/pub/chksvmx.exe">here</a><br /><br />The program doesn\'t introduce any persistent changes to the OS and doesn\'t require any installation procedure. It checks for virtualization support (on both AMD and Intel processors) not only by reading the CPUID information but also by trying to actually enable virtualization mode and then disable it again. Although most of the laptops available these days support hardware virtualization, in many cases this feature is disabled or locked down in the BIOS. If the virtualization is reported as "locked", please try to enable it in the BIOS. Please note that in most cases you will have to fully power down your system for the BIOS changes to take effect (reboot is not enough)!<br /><br />Additionally CHKSVMX checks whether a 64-bit edition of Windows is running, as such OS is required for the training.<br /><br />DISCLAIMER: The test program is digitally signed with the Invisible Things Lab\'s certificate and we assure that the program does not perform any malicious actions. ITL is, however, not responsible for any accidental damage or system instability issues the test program might cause.</span>', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'Last year we debuted with our Understanding Stealth Malware training at the Black Hat Vegas. We had about 70 participants and I think it was a reasonable success, especially that the training was announced very late. Since then we have done a couple of on-site classes and also have been continually updating the training.During our 2nd public edition, at Black Hat Europe 2008 in March this year, we significantly extended the part about virtualization, e.g. by adding discussion of nested virtualization on AMD-v and showing and analyzing the actual code for implementing this. Also we have used the New Blue Pill code with VT-x support (previously it worked only on AMD-V), making it possible to use both AMD and Intel machines for the class. This allowed us to offer this training in a "Bring Your Own Laptop" fashion, that we know is much preferred by attendees, who simply feel better when using their own, known, work environment.At the upcoming Black Hat Vegas 2008 we are also going to offer this class. That would be our 3rd public edition. Again, we hope to improve it even more beyond what we have presented at BH Europe 2008. Similarly as last time, we will not provide the computers, but rather expect the attendees to bring their own systems. At the end of this article are the requirements that should be met by your machine, if you would like to use it during the training and be able to do all the exercises. Of course, you should back up all your important data before coming to the class, as the computer might become corrupt after doing some of the exercises (although this has never happened so far).There will be only one class offered on August 4/5 (the weekday class). You can view the detailed training agenda that we used for the BH Europe class in March here. Please note that the exact shape of the Vegas class is subject to be a bit different, as we are planning to add new material again.This might be the very last chance for you to attended this specific training, as it\'s quite possible that next year we will be offering some other class, focused on Virtualization security entirely. Don\'t worry, however, if you don\'t get a seat in the Vegas class, there is still a chance to have that class presented on-site in your town.You can register for the Vegas training here.See you in Vegas!Hardware Requirements64-bit (x64) AMD or Intel processor with hardware virtualization support (AMD-v or VT-x)DVD-ROM2GB RAM (for convenient work with VMWare)Software Requirement 64-bit Vista OS (primary OS, non virtualized) Windows Driver Kit (WDK) 6000 or newer (available via MSDN subscription). VMWare Workstation 6.x or VMWare Player 2.x (the latter is free) Optionally: IDA Pro 5.x disassembler (for exercises that involve finding bugs in drivers)AMD ProcessorsMost modern AMD mobile processors, like e.g. AMD Turion and Athlon, used in modern laptops support AMD-v technology. Unfortunately there is no single place on AMD website that would provide the complete description of all CPUs that support AMD-v technology or provide an answer whether a given model does support it. When in doubt use google and always verify with the CHKSVMX program described below.Intel Processors Most modern Intel processors used in notebooks support Intel VT-x virtualization technology, this include Core 2 Solo, Core 2 Duo (except T5500, T5550 and T5750 models) and Core 2 Extreme. You can check your own model starting at this website, then chose your processor family and chose "Specifications" tab. Make sure the processor supports "Intel  64 architecture" and "Intel  Virtualization Technology".Using Mac for the trainingYou can very easily use MacBook or MacBook Pro for this training. You can easily install Windows on a second partition using the Boot Camp program that ships with all the newer Macs. You simply start Boot Camp application when running Mac OS X and then it automatically shrinks your current Mac partition, creates a new one for Windows, and asks to insert the installation media and reboots the system and you then perform normal Windows setup (after installation is complete your Vista should find all the necessary drivers via Windows Update). You might also want to use the free AutoHotKey program for the right-click emulation on your newly installed Vista. Please don\'t worry that Boot Camp tells that you should install a 32-bit Vista - you can ignore this and insert a 64-bit Vista installation disk.Testing your machine with CHKSVMXWe have prepared a special little program, CHKSVMX, to test whether a given machine indeed supports hardware virtualization technology. The CHKSVMX program can be downloaded from hereThe program doesn\'t introduce any persistent changes to the OS and doesn\'t require any installation procedure. It checks for virtualization support (on both AMD and Intel processors) not only by reading the CPUID information but also by trying to actually enable virtualization mode and then disable it again. Although most of the laptops available these days support hardware virtualization, in many cases this feature is disabled or locked down in the BIOS. If the virtualization is reported as "locked", please try to enable it in the BIOS. Please note that in most cases you will have to fully power down your system for the BIOS changes to take effect (reboot is not enough)!Additionally CHKSVMX checks whether a 64-bit edition of Windows is running, as such OS is required for the training.DISCLAIMER: The test program is digitally signed with the Invisible Things Lab\'s certificate and we assure that the program does not perform any malicious actions. ITL is, however, not responsible for any accidental damage or system instability issues the test program might cause.', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Vegas Training 2008', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2008/04/vegas-training-2008.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2008-04-30T15:44:00.002+02:00', u'thr_total': u'1', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-3486345275075744973'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=4, tm_sec=23, tm_wday=2, tm_yday=84, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/1897611147293282587/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=1897611147293282587', 'type': u'text/html', 'rel': u'replies', 'title': u'11 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1897611147293282587', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1897611147293282587', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/04/research-obfuscated.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Research Obfuscated'}], 'href': u'http://www.blogger.com/profile/07657268181166351141', 'id': u'tag:blogger.com,1999:blog-24586388.post-1897611147293282587', 'published_parsed': time.struct_time(tm_year=2008, tm_mon=4, tm_mday=14, tm_hour=6, tm_min=21, tm_sec=0, tm_wday=0, tm_yday=105, tm_isdst=0), 'title': u'Research Obfuscated', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'Update 07-Sept-2008: Four months later after writing his open letter to me (see below), Christofer Hoff experienced on his own difficult it is for one to control the press, making sure it correctly reports what you say. In this blog entry he describes how he was terribly misquoted by a report after his Black Hat presentation and he also explicitly admits that "[I] was essentially correct in [my] assertion during our last debate that you cannot control the press, despite best efforts." and that "[he] humbly submit[s] to [me] on that point."  :)This article has been brought to my attention recently. It\'s an Open Letter to Joanna Rutkowska, by Christofer Hoff over at the Rational Survivability blog.  I decided to spend time reading and answering this piece as 1) technorati.com reported the blog\'s authority as above 100 which suggests it has a reasonable number of readers, and also 2) because I believe this is a good example of the social engineering techniques used by my opponents and I couldn\'t refrain myself from not commenting about this. Besides I felt a bit flattered that some individual decided to write an Open Letter to me, sort of like if I was a prime minister or some other important person ;)Let me now analyze the letter, point by point:Fire rules! The first thing that Hoff accuses me of in his letter is myself being an irresponsible individual, not caring about safety of my audience (not a joke!):As the room filled to over capacity before your talk began, you were upset and couldn\'t seem to understand why the conference organizers would not let people spill over from seats and sit on the floor and in the aisles to hear you speak.  The fact that fire and safety codes prohibit packing a room beyond capacity was something you attributed to people being "...crazy in America."  Go figure.Dear Christofer, if you only read my recent blog post about this very specific incident, read thoroughly shall I say, you would notice this paragraph undoubtedly:Interestingly it was perfectly ok for the additional people to stay in the room, provided they arranged for additional chairs for themselves. In other words it was fine for people to sit and block the main aisle, provided they sit on chairs, but they couldn\'t stay and sit on the same aisle without having a chair (maybe a "certificated" chair also), as that would be against the fire regulations!Conclusion: I was not so much picking upon the fire regulations that forced people to leave the room, but rather on the idiotic rule, that allowed those same people to stay in this very same room, provided they also had additional chairs with them.Type I vs. Type II hypervisors confusion. Hoff then switches to the actual content of the presentation and writes this:When I spoke to you at the end of your presentation and made sure that I understood correctly that you were referring specifically to type-2 hosted virtualization on specific Intel and AMD chipsets, you conceded that this was the case.This simply is an incorrect statement! On the contrary, when describing the security implications of nested virtualization (which was the actual new thing I was presenting at the RSA), I explicitly gave an example of how this could be used to compromise type I hypervisors. Kindly refer to slides 85-90 of my presentation that can be downloaded here.I said that the code we posted on bluepillproject.org indeed targets type II hypervisors and the only reason for that being that it has been built on top of our New Blue Pill code that was designed as a Windows kernel driver.Shit not giving. Mr. Hoff goes even further:When I attempted to suggest that while really interesting and intriguing, your presentation was not only confusing to many people but also excluded somewhere north of 80% of how most adopters have deployed virtualization (type-1 "bare-metal" vs. type-2 hosted) as well as excluding the market-leading virtualization platform, your response (and I quote directly) was: I don\'t give a shit, I\'m a researcher.Now that was a hard blow! I understand that the usage of such a slang expression by an Eastern European female during an informal conversation with a native speaker must have made an impression on him! However, I couldn\'t give such an answer to this very question, simply because of the reasons given in point #2 (see above).If I remember correctly, I indeed used this very American expression to answer somebody\'s concern (undoubtedly our Christofer Hoff\'s) that most of the type I hypervisors out there are based on monolithic hypervisor architecture, and not on the micro-hypervisor architecture (and that I should not try to convince people to switch to micro-hypervisor architecture). In that context it makes it more logical for me to use the I\'m a researcher as an excuse for not caring so much that most people use monolithic based hypervisors. Obviously, the usage of micro-hypervisors would allow to better secure the whole VMM infrastructure. And I also said, that I don\'t care what people are using today, because I try to help to build a product that would be secure in the future (Phoenix\'s HyperCore).No obfuscation postulate. Hoff then comes up with some postulates that:[I], as a researcher who is also actively courting publicity for commercial gain and speaking at conferences like RSA which are less technical and more "executive" in nature, you have a responsibility to clarify and not obfuscate (intentionally or otherwise) the facts surrounding your research.This postulate is cleverly constructed because it also contains an embedded accusation of me being a commercially motivated researcher. Well, I never tried to hide that fact, and the reason for this is very simple: I consider security research as my job, and one of the primary goals of any job is to\u2026 bring commercial gain to the individual doing the job. Second, I really don\'t understand what Hoff means by asking me to not obfuscate my research?! Maybe he was just disappointed that the presentation was too technical for an average CISSP to understand it? But, well, this presentation was classified as Advanced Technical, which was displayed in the conference program. I still did my best so that, say 70% of the material, was understandable to an average IT people, but, come on, there always must be some deep technical meat in any non-keynote-presentation, at least this is my idea for how a conference should look like.Commercially motivated. Hoff accuses me of presenting commercial product, i.e. the Phoenix\'s HyperSpace, during my speech:No less than five times during your presentation, you highlighted marketing material in the form of graphics from Phoenix, positioned their upcoming products and announced/credited both Phoenix and AMD as funding your research.Well, let me tell you this \u2013 this was one of the main reasons why I decided to speak at the RSA \u2013 just to announce this very product that I try to help to secure. Why would that be wrong?BTW, I have no idea how Mr. Hoff concluded that AMD was founding my research. I never said that, nor did I have it in my slides. Needles to say, AMD has not been founding my research. NOTE: interestingly I consider this particular mistake by Hoff to be accidental \u2013 at least I don\'t see how this could be connected to any PR campaign, in contrast to all the other incorrectness he made use of.Independence. Hoff, for some reason, apparently known only to him, tries to argue that I\'m not an independent researcher:I think it\'s only fair to point out that given your performance, you\'re not only an "independent researcher" but more so an "independent contractor."  Using the "I\'m a researcher" excuse doesn\'t cut it.I know it\'s subtle and lots of folks are funded by third parties, but they also do a much better job of drawing the line than you do.Well, I found this one to be particularly amusing, as, for at least several years now, I have not claimed I have been an independent researcher.Final hit. You might have been wondering by now \u2013 why this gentleman, nah, I think the guy would fit better here, so why the guy decided to spent so much time to write all those points, all those quasi-arguments and why he made so many mistakes? Well he seems to give an answer right in this paragraph:I care very much that your research as presented to the press and at conferences like RSA isn\'t only built to be understood by highly skilled technicians or researchers because the continued thrashing that they generate without recourse is doing more harm than good, quite frankly.Aha, now all is clear. May I ask then, which virtualization vendor you write PR for? ;)So, then Hoff quotes the Forbes article that was written after my presentation and accuses me that the article (written by some Forbes reporter) was too sensationalist. I definitely agree the article was very sensationalist (but correct) and when I saw the article I even got angry and even wanted to write a blog about it (but as the article was actually correct, I had no good arguments to use against it). And you know why I was so angry? Because I actually spent over 40 minutes with this very Forbes reporter in the RSA\'s speaker\'s lounge just after my speech, I spent that time on clarifying to that guy what my presentation was about and what it was not about and what was the main message of the presentation. Still, the reporter had his own vision of how to write about it (i.e. make it into a sensation) and I hardly, as it turned out, could do anything about it\u2026So, what was the main massage of my presentation? Interestingly Mr. Hoff forgot to mention that\u2026 Let me then remind it here (a curious reader might want to have a look at the the slide #96 in my presentation):Virtualization technology could be used to improve security on desktop systemsHowever there are non-trivial challenges in making this all working well...... and not to introduce security problems instead...Additionally, the message I was trying to pass during the whole presentation was:Keep hypervisors simple, do not put drivers there, as otherwise we would get to the same point where we are with current OSes these days, i.e. no kernel security at all!Now I wonder, maybe Christofer Hoff doesn\'t do PR for any VMM vendor, maybe he just didn\'t listen carefully to my presentation. Maybe he\'s just one of those many guys who always know in advance what they want to hear and selectively pick up only those facts that match their state of mind? Otherwise, why would he not realize that my presentation was actually a pro-virtualization one and needed no (false) counter-arguments?', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Research Obfuscated', 'language': None}, 'updated': u'2009-03-25T16:04:23.036+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'tags': [{'term': u'bad guys attacking joanna', 'scheme': u'http://www.blogger.com/atom/ns#', 'label': None}], 'link': u'http://theinvisiblethings.blogspot.com/2008/04/research-obfuscated.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'hardware', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'summary': u'<span style="font-weight: bold;">Update 07-Sept-2008:</span> Four months later after writing his open letter to me (see below), Christofer Hoff experienced on his own difficult it is for one to control the press, making sure it correctly reports what you say. In <a href="http://rationalsecurity.typepad.com/blog/2008/08/from-the-sucks.html">this blog entry</a> he describes how he was terribly misquoted by a report after his Black Hat presentation and he also explicitly admits that "[I] was essentially correct in [my] assertion during our last debate that you cannot control the press, despite best efforts." and that "[he] humbly submit[s] to [me] on that point."  :)<br /><br /><a href="http://rationalsecurity.typepad.com/blog/2008/04/an-open-letter.html">This article</a> has been brought to my attention recently. It\u2019s an \u201cOpen Letter to Joanna Rutkowska\u201d, by <a href="http://rationalsecurity.typepad.com/about.html">Christofer Hoff</a> over at the \u201cRational Survivability\u201d blog.  I decided to spend time reading and answering this piece as 1) technorati.com reported the blog\u2019s authority as above 100 which suggests it has a reasonable number of readers, and also 2) because I believe this is a good example of the social engineering techniques used by my opponents and I couldn\u2019t refrain myself from not commenting about this. Besides I felt a bit flattered that some individual decided to write an \u201cOpen Letter\u201d to me, sort of like if I was a prime minister or some other important person ;)<br /><br />Let me now analyze the letter, point by point:<ol><li><span style="font-weight: bold;">Fire rules!</span> The first thing that Hoff accuses me of in his letter is myself being an irresponsible individual, not caring about safety of my audience (not a joke!):<br /><blockquote>\u201cAs the room filled to over capacity before your talk began, you were upset and couldn\'t seem to understand why the conference organizers would not let people spill over from seats and sit on the floor and in the aisles to hear you speak.  The fact that fire and safety codes prohibit packing a room beyond capacity was something you attributed to people being "...crazy in America."  Go figure.\u201d</blockquote>Dear Christofer, if you only read <a href="http://theinvisiblethings.blogspot.com/2008/04/rsa-absurd.html">my recent blog post</a> about this very specific incident, read thoroughly shall I say, you would notice this paragraph undoubtedly:<br /><blockquote>\u201cInterestingly it was perfectly ok for the additional people to stay in the room, provided they arranged for additional chairs for themselves. In other words it was fine for people to sit and block the main aisle, provided they sit on chairs, but they couldn\u2019t stay and sit on the same aisle without having a chair (maybe a "certificated" chair also), as that would be against the fire regulations!\u201d</blockquote><span>Conclusion: <span style="font-weight: bold;">I was not so much picking upon the fire regulations </span>that forced people to leave the room, <span style="font-weight: bold;">but rather on the idiotic rule, that allowed those same people to stay in this very same room, provided they also had additional chairs with them.</span><br /></span></li><br /><li><span style="font-weight: bold;">Type I vs. Type II hypervisors confusion.</span> Hoff then switches to the actual content of the presentation and writes this:<br /><blockquote>\u201cWhen I spoke to you at the end of your presentation and made sure that I understood correctly that you were referring specifically to type-2 hosted virtualization on specific Intel and AMD chipsets, you conceded that this was the case.\u201d</blockquote><span style="font-weight: bold;">This simply is an incorrect statement!</span> On the contrary, when describing the security implications of <a href="http://theinvisiblethings.blogspot.com/2008/03/kick-ass-hypervisor-nesting.html">nested virtualization</a> (which was the actual new thing I was presenting at the RSA), I explicitly gave an example of how this could be used to compromise type I hypervisors. Kindly refer to slides 85-90 of my presentation that can be downloaded <a href="http://invisiblethings.org/papers/Security%20Challanges%20in%20Virtualized%20Enviroments%20-%20RSA2008.pdf">here</a>.<br /><br />I said that the code we posted on bluepillproject.org indeed targets type II hypervisors and the only reason for that being that it has been built on top of our New Blue Pill code that was designed as a Windows kernel driver.</li><br /><li><span style="font-weight: bold;">Shit not giving.</span> Mr. Hoff goes even further:<br /><blockquote>\u201cWhen I attempted to suggest that while really interesting and intriguing, your presentation was not only confusing to many people but also excluded somewhere north of 80% of how most adopters have deployed virtualization (type-1 "bare-metal" vs. type-2 hosted) as well as excluding the market-leading virtualization platform, your response (and I quote directly) was: <span style="font-style: italic;">I don\'t give a shit, I\'m a researcher.</span>\u201d</blockquote>Now that was a hard blow! I understand that the usage of such a slang expression by an Eastern European female during an informal conversation with a native speaker must have made an impression on him! <span style="font-weight: bold;">However, I couldn\u2019t give such an answer to this very question, simply because of the reasons given in point #2 (see above).</span><br /><br />If I remember correctly, I indeed used this very American expression to answer somebody\u2019s concern (undoubtedly our Christofer Hoff\u2019s) that most of the type I hypervisors out there are based on monolithic hypervisor architecture, and not on the micro-hypervisor architecture (and that I should not try to convince people to switch to micro-hypervisor architecture). In that context it makes it more logical for me to use the \u201cI\u2019m a researcher\u201d as an excuse for not caring so much that most people use monolithic based hypervisors. Obviously, the usage of micro-hypervisors would allow to better secure the whole VMM infrastructure. And I also said, that I don\u2019t care what people are using today, because I try to help to build a product that would be secure in the future (Phoenix\u2019s HyperCore).</li><br /><li><span style="font-weight: bold;">No obfuscation postulate.</span> Hoff then comes up with some postulates that:<br /><blockquote>\u201c[I], as a researcher who is also actively courting publicity for commercial gain and speaking at conferences like RSA which are less technical and more "executive" in nature, you have a responsibility to clarify and not obfuscate (intentionally or otherwise) the facts surrounding your research.\u201d</blockquote>This postulate is cleverly constructed because it also contains an embedded accusation of me being a commercially motivated researcher. Well, I never tried to hide that fact, and the reason for this is very simple: <span style="font-weight: bold;">I consider security research as my job, and one of the primary goals of any job is to\u2026 bring commercial gain to the individual doing the job. </span><br /><br />Second, I really don\u2019t understand what Hoff means by asking me to not obfuscate my research?! <span style="font-weight: bold;">Maybe he was just disappointed that the presentation was too technical for an average CISSP to understand it?</span> But, well, this presentation was classified as \u201cAdvanced Technical\u201d, which was displayed in the conference program. I still did my best so that, say 70% of the material, was understandable to an average IT people, but, come on, there always must be some deep technical meat in any non-keynote-presentation, at least this is my idea for how a conference should look like.</li><br /><li><span style="font-weight: bold;">Commercially motivated.</span> Hoff accuses me of presenting commercial product, i.e. the Phoenix\u2019s HyperSpace, during my speech:<br /><blockquote>\u201cNo less than five times during your presentation, you highlighted marketing material in the form of graphics from Phoenix, positioned their upcoming products and announced/credited both Phoenix and AMD as funding your research.\u201d</blockquote>Well, let me tell you this \u2013 <span style="font-weight: bold;">this was one of the main reasons why I decided to speak at the RSA \u2013 just to announce this very product that I try to help to secure.</span> Why would that be wrong?<br /><br /><span style="font-weight: bold;">BTW, I have no idea how Mr. Hoff concluded that AMD was founding my research. I never said that, nor did I have it in my slides.</span> Needles to say, AMD has not been founding my research. NOTE: interestingly I consider this particular mistake by Hoff to be accidental \u2013 at least I don\u2019t see how this could be connected to any PR campaign, in contrast to all the other incorrectness he made use of.</li><br /><li><span style="font-weight: bold;">Independence.</span> Hoff, for some reason, apparently known only to him, tries to argue that I\u2019m not an \u201cindependent researcher\u201d:<br /><blockquote>\u201cI think it\'s only fair to point out that given your performance, you\'re not only an "independent researcher" but more so an "independent contractor."  Using the "I\'m a researcher" excuse doesn\'t cut it.\u201d</blockquote><blockquote>\u201cI know it\'s subtle and lots of folks are funded by third parties, but they also do a much better job of drawing the line than you do.\u201d</blockquote><span style="font-weight: bold;">Well, I found this one to be particularly amusing, as, for at least several years now, I have not claimed I have been an </span><span style="font-style: italic; font-weight: bold;">independent</span><span style="font-weight: bold;"> researcher.</span></li><br /><li><span style="font-weight: bold;">Final hit.</span> You might have been wondering by now \u2013 why this gentleman, nah, I think \u201cthe guy\u201d would fit better here, so why the guy decided to spent so much time to write all those points, all those quasi-arguments and why he made so many \u201cmistakes\u201d? Well he seems to give an answer right in this paragraph:<br /><blockquote>\u201cI care very much that your research as presented to the press and at conferences like RSA isn\'t only built to be understood by highly skilled technicians or researchers because the continued thrashing that they generate without recourse is doing more harm than good, quite frankly.\u201d</blockquote>Aha, now all is clear. May I ask then, which virtualization vendor you write PR for? ;)</li><br /></ol>So, then Hoff quotes <a href="http://www.forbes.com/technology/2008/04/09/virtualization-rsa-malware-tech-virtualization08-cx_ag_0409virtual.html?feed=rss_technology">the Forbes article</a> that was written after my presentation and accuses me that the article (written by some Forbes reporter) was too sensationalist. <span style="font-weight: bold;">I definitely agree the article was very sensationalist (but correct) and when I saw the article I even got angry and even wanted to write a blog about it (but as the article was actually correct, I had no good arguments to use against it).</span> And you know why I was so angry? Because I actually spent over 40 minutes with this very Forbes reporter in the RSA\u2019s speaker\u2019s lounge just after my speech, I spent that time on clarifying to that guy what my presentation was about and what it was not about and what was the main message of the presentation. Still, the reporter had his own vision of how to write about it (i.e. make it into a sensation) and I hardly, as it turned out, could do anything about it\u2026<br /><br />So, what was the main massage of my presentation? <span style="font-weight: bold;">Interestingly Mr. Hoff forgot to mention that\u2026</span> Let me then remind it here (a curious reader might want to have a look at the the slide #96 in my presentation):<br /><ul><li><span style="font-weight: bold;">Virtualization technology could be used to improve security on desktop systems</span></li><br /><li>However there are non-trivial challenges in making this all working well...</li><br /><li>... and not to introduce security problems instead...</li><br /></ul>Additionally, the message I was trying to pass during the whole presentation was:<br /><blockquote>\u201cKeep hypervisors simple, do not put drivers there, as otherwise we would get to the same point where we are with current OSes these days, i.e. no kernel security at all!\u201d</blockquote>Now I wonder, maybe Christofer Hoff doesn\u2019t do PR for any VMM vendor, maybe he just didn\u2019t listen carefully to my presentation. Maybe he\u2019s just one of those many guys who always know in advance what they want to hear and selectively pick up only those facts that match their state of mind? Otherwise, why would he not realize that my presentation was actually a pro-virtualization one and needed no (false) counter-arguments?', 'guidislink': True, 'published': u'2008-04-14T08:21:00.008+02:00', u'thr_total': u'11'}
{'cprob': 1.0, 'updated': u'2009-03-25T16:04:32.405+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'security', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=4, tm_sec=32, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2008, tm_mon=4, tm_mday=12, tm_hour=16, tm_min=45, tm_sec=0, tm_wday=5, tm_yday=103, tm_isdst=0), 'title': u'The Most Stupid Security News Ever', 'pred': 'security', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/6179059977710695477/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=6179059977710695477', 'type': u'text/html', 'rel': u'replies', 'title': u'10 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6179059977710695477', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6179059977710695477', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/04/most-stupid-security-news-ever.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'The Most Stupid Security News Ever'}], 'summary': u'<a href="http://news.bbc.co.uk/2/hi/technology/7340315.stm">Seems</a> like the BBC reporters have a shortage of subjects to write about these days\u2026 Maybe the next winter we will also be able to read about how many snowflakes fell during Christmas all over the world or something like that (which BTW, would still be way more interesting that the news quoted above).<br /><br />I remember that some time ago, a group of researchers used automatic generators to create a few tens of thousands of variants of some malware, just to do some testing of A/V engines.  And I remember how all the A/V people were complaining how irresponsible that was bla bla bla, as now they would have to work after hours to fight all this new malware. What a BS!<br /><br />For any given class of a bug (think: exploits), or a file infection method (think: viruses), or a system compromise technique (think: rootkits, stealth malware), one can come up with pretty much infinite number of examples that would be exploiting the specific bug, the specific file infection method, or the specific system compromise technique. One virus would display you a \u201cHello, you\u2019re being 0wned, sir.\u201d Message, while the other one would just flash your keyboard leds. Sure, two different beings, but if exploiting the same mechanisms, also the protection against them is the same.  <br /><br />But, I know, it looks so cool in the news to read: \u201cThe number of viruses, worms and trojans in circulation has topped the one million mark\u201d. It\u2019s most definitely a good way to scare all the housewives and make them to rush to the computer shop at the coroner to buy the brand new A/V product that already can detect 99.9% out of all those scary things out there.', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u"Seems like the BBC reporters have a shortage of subjects to write about these days\u2026 Maybe the next winter we will also be able to read about how many snowflakes fell during Christmas all over the world or something like that (which BTW, would still be way more interesting that the news quoted above).I remember that some time ago, a group of researchers used automatic generators to create a few tens of thousands of variants of some malware, just to do some testing of A/V engines.  And I remember how all the A/V people were complaining how irresponsible that was bla bla bla, as now they would have to work after hours to fight all this new malware. What a BS!For any given class of a bug (think: exploits), or a file infection method (think: viruses), or a system compromise technique (think: rootkits, stealth malware), one can come up with pretty much infinite number of examples that would be exploiting the specific bug, the specific file infection method, or the specific system compromise technique. One virus would display you a Hello, you're being 0wned, sir. Message, while the other one would just flash your keyboard leds. Sure, two different beings, but if exploiting the same mechanisms, also the protection against them is the same.  But, I know, it looks so cool in the news to read: The number of viruses, worms and trojans in circulation has topped the one million mark. It's most definitely a good way to scare all the housewives and make them to rush to the computer shop at the coroner to buy the brand new A/V product that already can detect 99.9% out of all those scary things out there.", 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'The Most Stupid Security News Ever', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2008/04/most-stupid-security-news-ever.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2008-04-12T18:45:00.003+02:00', u'thr_total': u'10', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-6179059977710695477'}
{'cprob': 1.0, 'updated': u'2009-03-25T16:04:44.478+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'security', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=4, tm_sec=44, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2008, tm_mon=4, tm_mday=9, tm_hour=6, tm_min=43, tm_sec=0, tm_wday=2, tm_yday=100, tm_isdst=0), 'title': u'The RSA Absurd', 'pred': 'security', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/1108669651271949087/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=1108669651271949087', 'type': u'text/html', 'rel': u'replies', 'title': u'9 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1108669651271949087', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1108669651271949087', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/04/rsa-absurd.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'The RSA Absurd'}], 'summary': u'Today I was giving a speech at the RSA Conference in San Francisco. The RSA is a really big conference and also seems to me like a very well organized one \u2013 e.g. they have all those computers at the registration hall where you put your name and then it immediately says to which check-in counter you should proceed and then when you get there they already have a badge waiting for you. Pretty cool stuff.<br /> <br />So my speech turned out to be scheduled in a very small room, say with seats for 100-200 people only (I haven\'t counted exactly). But then it turned out that there are more people interested in seeing the speech, so, as it usually happens on conferences, people started seating on the floor and also standing at the back of the room. I would say there was about 30% overflow, but still they could fit ok in the room. And then came this guy from the conference and said that all people who don\u2019t have a seat should leave the room! It turned out that this is a fire regulation.<br /><br />Interestingly it was perfectly ok for the additional people to stay in the room, provided they arranged for additional chairs for themselves. In other words it was fine for people to sit and block the main aisle, provided they sit on chairs, but they couldn\u2019t stay and sit on the same aisle without having a chair (maybe a "certificated" chair also), as that would be against the fire regulations!<br /><br />Yes, I know there are more examples of stupid pseudo-security rules (think airports), but, come on, this is on of the most well known <span style="font-weight: bold;">security</span> conference...<br /><br />That situation annoyed me so much (because, of course, it turned out to be impossible to arrange for the additional chairs, so all those people had to leave) that I decided to submit this story to my blog using the totally unsecured public WiFi in my hotel. It was really unwise for me to do that, as Google\u2019s Blogger uses HTTPS only for authentication (i.e. the login screen) but then it switches back to the good old plain text HTTP, making it possible for some evil guy sitting in the lobby to hijack my session. Is it that I miss something here or Google simple forgot that it is 2008 and not the 90\u2019s anymore? Anyway, I\'m just taking this risk bravely, hoping that the potential attacker, seeing my determination here, would refrain themselves from compromising this blog.<br /><br />I know, I know, instead of complaining about Google, I should just move my blog to some other place. One day that\u2019s gonna happen for sure :)', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'Today I was giving a speech at the RSA Conference in San Francisco. The RSA is a really big conference and also seems to me like a very well organized one \u2013 e.g. they have all those computers at the registration hall where you put your name and then it immediately says to which check-in counter you should proceed and then when you get there they already have a badge waiting for you. Pretty cool stuff. So my speech turned out to be scheduled in a very small room, say with seats for 100-200 people only (I haven\'t counted exactly). But then it turned out that there are more people interested in seeing the speech, so, as it usually happens on conferences, people started seating on the floor and also standing at the back of the room. I would say there was about 30% overflow, but still they could fit ok in the room. And then came this guy from the conference and said that all people who don\'t have a seat should leave the room! It turned out that this is a fire regulation.Interestingly it was perfectly ok for the additional people to stay in the room, provided they arranged for additional chairs for themselves. In other words it was fine for people to sit and block the main aisle, provided they sit on chairs, but they couldn\'t stay and sit on the same aisle without having a chair (maybe a "certificated" chair also), as that would be against the fire regulations!Yes, I know there are more examples of stupid pseudo-security rules (think airports), but, come on, this is on of the most well known security conference...That situation annoyed me so much (because, of course, it turned out to be impossible to arrange for the additional chairs, so all those people had to leave) that I decided to submit this story to my blog using the totally unsecured public WiFi in my hotel. It was really unwise for me to do that, as Google\'s Blogger uses HTTPS only for authentication (i.e. the login screen) but then it switches back to the good old plain text HTTP, making it possible for some evil guy sitting in the lobby to hijack my session. Is it that I miss something here or Google simple forgot that it is 2008 and not the 90\'s anymore? Anyway, I\'m just taking this risk bravely, hoping that the potential attacker, seeing my determination here, would refrain themselves from compromising this blog.I know, I know, instead of complaining about Google, I should just move my blog to some other place. One day that\'s gonna happen for sure :)', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'The RSA Absurd', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2008/04/rsa-absurd.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2008-04-09T08:43:00.002+02:00', u'thr_total': u'9', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-1108669651271949087'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=5, tm_sec=0, tm_wday=2, tm_yday=84, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7426857732980068109/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=7426857732980068109', 'type': u'text/html', 'rel': u'replies', 'title': u'17 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7426857732980068109', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7426857732980068109', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2008/03/kick-ass-hypervisor-nesting.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Kick Ass Hypervisor Nesting!'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-7426857732980068109', 'published_parsed': time.struct_time(tm_year=2008, tm_mon=3, tm_mday=31, tm_hour=18, tm_min=2, tm_sec=0, tm_wday=0, tm_yday=91, tm_isdst=0), 'title': u'Kick Ass Hypervisor Nesting!', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'Remember how at the Black Hat Vegas 2007 I said that we still didn\'t support virtualization of full VMMs, like e.g. Virtual PC 2007 with hardware virtualization enabled, and that currently we could only run very simple hypervisors inside our New Blue Pill (like e.g. other NBPs inside NBP)? Remember how I said that we were working on this and should have a solution in about 2 months from then?So, just about 2 weeks ago we did it! We can now virtualize complex hypervisors, like e.g. Virtual PC 2007 or Virtual Box with SVM turned on (BTW, we can also run VMWare Workstation, but that doesn\'t count, as on AMD processors it doesn\'t make use of SVM instructions).  We also have a prototype code that allows to run nested hypervisors on VT-x but that code requires a bit of more polishing (oh, didn\'t you know that our NBP also supports VT-x these days?).I couldn\'t resist not to use my favorite Matrix analogy to describe what we do here: imagine Neo, who bravely followed The White Rabbit and finally decided to swallow The Red Pill, eventually awakes on The Nebuchadnezzar ship just to find out later that this whole "real world" is... just another Matrix...I don\'t have a nice Matrix picture for that, so instead I will just show you a picture of a Virtual PC 2007 running inside an already bluepilled Vista and running Windows XP as its own guest. You can see that we use our "bpknock" testing program just to show we can intercept events in both the guest (i.e. the Vista that hosts the VPC hypervisor) as well as in the nested guest (the XP running inside the Virtual PC). This bpknock program simply executes CPUID instruction with some magic value in the RAX register and NBP intercepts that and answers with a magic RAX. BTW, there was no special reason to chose CPUID instruction for that, normally we don\'t need to intercept CPUID on AMD at all, so we could have chosen pretty much anything else, e.g. magic output to some magic I/O port.It\'s worth mentioning that the only other working example of nested hardware virtualization I\'m aware of is the IBM z/VM hypervisor for the IBM z series mainframe. If anybody knows any other example, please send me a link.The research on nested virtualization has been supported by Phoenix Technologies, as the nested virtualization has also some positive applications. Phoenix is working on a cool product called HyperSpace. It consists of a hypervisor (called the "HyperCore") that allows running a few unmodified OSes inside hardware virtual machines so users can switch between them just like if they were virtual spaces on Mac or Linux. At the beginning there will be two virtual machines available: one running standard Vista and the other one based on Linux, that would contain some useful functionality like e.g. a Web browser, an email client and a multimedia suite, and also there would be something called the "ManageSpace" to manage this all.So, how this is going to be different from e.g. XEN? The difference is that XEN is focused on server applications, while HyperSpace is intended for notebooks, which means it puts lots of efforts to offer comparable graphics (and other devices) performance as we have on normal non-virtualized laptops. This all will be possible because of the recent virtualization technology advances like e.g. VT-d/IOMMU.At the RSA conference in San Francisco next week, I will be giving a speech that will discuss some technical problems we had to solve in order to get hardware nested hypervisoring working on AMD and also how the situation looks on Intel. I will also discuss how this changes the security battlefield and why virtualization vendors should care.Back to Blue Pill -- the brand new source code with full virtualization support on AMD is now available on bluepillproject.org (you will need WDK6000 or newer to build it). Note that the (experimental) code for nested virtualization on Intel VT-x has been removed in this public version, leaving only the basic functionality if we run NBP on an Intel processor.Also, please note that the code for AMD-v, even though it proved to be very stable, is still just a proof of concept. This means for example, that we don\'t do any error-checks in the SVM instruction handlers, so it\'s trivial for the nested hypervisor to simply crash the whole system if executing one of the SVM instructions with incorrect arguments or in an incorrect situation (e.g. CPL > 0). But that is hardly a problem for Blue Pill, as the guest isolation has never been a goal here. Of course, this could be simply addressed by adding a few more lines of code to each handler that would check for error conditions and inject #UD or #GP back to the nested hypervisor if it executed something incorrectly. Of course, we\'re too lazy to code that ;)So, what\'s next? Well, we hope to show something even cooler at this year\'s Black Hat Vegas, but I won\'t say anything more now.', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Kick Ass Hypervisor Nesting!', 'language': None}, 'updated': u'2009-03-25T16:05:00.261+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'link': u'http://theinvisiblethings.blogspot.com/2008/03/kick-ass-hypervisor-nesting.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'os', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://4.bp.blogspot.com/_Ti3q3Hdvels/R_EoN9WFV3I/AAAAAAAAABk/3Zo6oMEO8eQ/s72-c/XP+inside+VPC+inside+NBP.bmp', 'width': u'72', 'height': u'72'}], 'summary': u'Remember how at the Black Hat Vegas 2007 I said that we still didn\'t support virtualization of full VMMs, like e.g. Virtual PC 2007 with hardware virtualization enabled, and that currently we could only run very simple hypervisors inside our New Blue Pill (like e.g. other NBPs inside NBP)? Remember how I said that we were working on this and should have a solution in about 2 months from then?<br /><br />So, just about 2 weeks ago we did it! We can now virtualize complex hypervisors, like e.g. Virtual PC 2007 or Virtual Box with SVM turned on (BTW, we can also run VMWare Workstation, but that doesn\'t count, as on AMD processors it doesn\'t make use of SVM instructions).  We also have a prototype code that allows to run nested hypervisors on VT-x but that code requires a bit of more polishing (oh, didn\u2019t you know that our NBP also supports VT-x these days?).<br /><br />I couldn\'t resist not to use my favorite Matrix analogy to describe what we do here: imagine Neo, who bravely followed The White Rabbit and finally decided to swallow The Red Pill, eventually awakes on The Nebuchadnezzar ship just to find out later that this whole "real world" is... just another Matrix...<br /><br />I don\'t have a nice Matrix picture for that, so instead I will just show you a picture of a Virtual PC 2007 running inside an already bluepilled Vista and running Windows XP as its own guest. You can see that we use our "bpknock" testing program just to show we can intercept events in both the guest (i.e. the Vista that hosts the VPC hypervisor) as well as in the nested guest (the XP running inside the Virtual PC). This bpknock program simply executes CPUID instruction with some magic value in the RAX register and NBP intercepts that and answers with a magic RAX. BTW, there was no special reason to chose CPUID instruction for that, normally we don\'t need to intercept CPUID on AMD at all, so we could have chosen pretty much anything else, e.g. magic output to some magic I/O port.<br /><br /><a href="http://4.bp.blogspot.com/_Ti3q3Hdvels/R_EoN9WFV3I/AAAAAAAAABk/3Zo6oMEO8eQ/s1600-h/XP+inside+VPC+inside+NBP.bmp"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5183968866350749554" src="http://4.bp.blogspot.com/_Ti3q3Hdvels/R_EoN9WFV3I/AAAAAAAAABk/3Zo6oMEO8eQ/s320/XP+inside+VPC+inside+NBP.bmp" style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; cursor: hand;" /></a><br /><br />It\'s worth mentioning that the only other working example of nested hardware virtualization I\'m aware of is the IBM z/VM hypervisor for the IBM <a href="http://www-03.ibm.com/systems/z/">z series mainframe</a>. If anybody knows any other example, please send me a link.<br /><br />The research on nested virtualization has been supported by <a href="http://www.phoenix.com">Phoenix Technologies</a>, as the nested virtualization has also some positive applications. Phoenix is working on a cool product called <a href="http://www.phoenix.com/en/Products/Browse+by+Products/Phoenix+HyperSpace/default.htm">HyperSpace</a>. It consists of a hypervisor (called the "HyperCore") that allows running a few unmodified OSes inside hardware virtual machines so users can switch between them just like if they were virtual spaces on Mac or Linux. At the beginning there will be two virtual machines available: one running standard Vista and the other one based on Linux, that would contain some useful functionality like e.g. a Web browser, an email client and a multimedia suite, and also there would be something called the "ManageSpace" to manage this all.<br /><br />So, how this is going to be different from e.g. XEN? The difference is that XEN is focused on server applications, while HyperSpace is intended for notebooks, which means it puts lots of efforts to offer comparable graphics (and other devices) performance as we have on normal non-virtualized laptops. This all will be possible because of the recent virtualization technology advances like e.g. VT-d/IOMMU.<br /><br />At the <a href="http://www.rsaconference.com/conference_info/conference_blog.aspx?blogId=13751">RSA conference in San Francisco next week</a>, I will be giving a speech that will discuss some technical problems we had to solve in order to get hardware nested hypervisoring working on AMD and also how the situation looks on Intel. I will also discuss how this changes the security battlefield and why virtualization vendors should care.<br /><br />Back to Blue Pill -- the brand new source code with full virtualization support on AMD is now available on <a href="http://bluepillproject.org/">bluepillproject.org</a> (you will need WDK6000 or newer to build it). Note that the (experimental) code for nested virtualization on Intel VT-x has been removed in this public version, leaving only the basic functionality if we run NBP on an Intel processor.<br /><br />Also, please note that the code for AMD-v, even though it proved to be very stable, is still just a proof of concept. This means for example, that we don\u2019t do any error-checks in the SVM instruction handlers, so it\u2019s trivial for the nested hypervisor to simply crash the whole system if executing one of the SVM instructions with incorrect arguments or in an incorrect situation (e.g. CPL > 0). But that is hardly a problem for Blue Pill, as the guest isolation has never been a goal here. Of course, this could be simply addressed by adding a few more lines of code to each handler that would check for error conditions and inject #UD or #GP back to the nested hypervisor if it executed something incorrectly. Of course, we\u2019re too lazy to code that ;)<br /><br />So, what\u2019s next? Well, we hope to show something even cooler at this year\u2019s Black Hat Vegas, but I won\u2019t say anything more now.', 'guidislink': True, 'published': u'2008-03-31T20:02:00.002+02:00', u'thr_total': u'17'}
{'cprob': 1.0, 'updated': u'2009-03-25T16:05:17.923+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'announcements', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=5, tm_sec=17, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2007, tm_mon=10, tm_mday=25, tm_hour=17, tm_min=55, tm_sec=0, tm_wday=3, tm_yday=298, tm_isdst=0), 'title': u'Razor-Thin Hypervisors', 'pred': 'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7805915543221342080/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=7805915543221342080', 'type': u'text/html', 'rel': u'replies', 'title': u'10 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7805915543221342080', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7805915543221342080', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2007/10/razor-thin-hypervisors.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Razor-Thin Hypervisors'}], 'summary': u'I just came back from Stockholm where I attended the <a href="http://virtualizationforum07.com/">Virtualization Forum</a>, and saw several, quite interesting vendor presentations. One that caught my attention was a <a href="http://www.virtualizationforum07.com/res/Dokumentation/vmwarerezab.pdf">talk by VMware</a>, and especially the part that talked about the new ESX 3i hypervisor and presented it as "razor-thin". This "razor-thin" hypervisor will have, according to VMWare, the footprint "of only 32MB".<br /><br />My regular readers might sense that I\u2019m a bit ironic here. Well, 32MB of code is definitely not a "razor-thin" hypervisor in my opinion and it\u2019s not even close to a thin hypervisor... But why am I so picky about it? Is it really that important?<br /><br />Yes, I think so, because the bigger the hypervisor the more chances that there is a bug somewhere out there. And one of the reasons for using virtual machines is to provide isolation. Even if we use virtualization because of business reasons (server consolidation), still we want each VM to be properly isolated, to make sure that if an attackers "gets into" one VM, she will not be able to 0wn all the other VMs on the same hardware\u2026 In other words, isolation of VMs, is an extremely important feature.<br /><br />During my presentation I also talked about thin hypervisors. I first referenced a few bugs that were found in various VMMs in the recent months by other researchers (congrats to Rafal Wojtczuk of McAfee for some interestingly looking bugs in VMWare and Microsoft products). I used them as an argument that we should move towards very thin hypervisor architecture, exploiting hardware virtualization extension as much as possible (e.g. Nested Paging/EPT, IOMMU/DEV/NoDMA, etc) and avoiding doing things "in software".<br /><br />Nobody should be really surprised seeing VMMs bugs \u2013 after all we have seen so many bugs in OS kernels over years, so no surprise we will see more and more bugs in VMMs, unless we switch to very thin hypervisors, so thin that it would be possible to understand and verify their code by one person. Only then we would be able to talk about security advantage (in terms of isolation) offered by VMMs comparing to traditional OSes.<br /><br />I couldn\u2019t refrain myself from mentioning that the existence of those bugs in popular VMMs clearly shows that having a VMM already installed doesn\u2019t currently prevent from the "Blue Pill threat" \u2013 a point often expressed by some virtualization vendors, who notoriously try to diminish the importance of this problem (i.e. the problem of virtualization based malware).<br /><br />I also announced that Invisible Things Lab has just started working with <a href="http://www.phoenix.com/en/Home/default.htm">Phoenix Technologies</a>. Phoenix is the world leader in system firmware, particularly known for providing BIOSes for PCs for almost 25 years, and currently is working on a new product called HyperCore that would be a very thin and lightweight hypervisor for consumer systems. ITL will be helping Phoenix to ensure the security of this product.<br /><br />HyperCore hypervisor will use all the latest hardware virtualization extensions, like e.g. Nested Paging/EPT to minimize the unnecessary complexity and to provide negligible performance impact. For the same reasons, the I/O access will go through almost natively, just like in case of our Blue Pill...<br /><br />Speaking about Blue Pill \u2013 Phoenix is also interested in further research on Blue Pill, which will be used as a test bed for trying various ideas \u2013 e.g. nested virtualization, which might be adopted in the future versions of HyperCore to allow users to use other commercial VMMs inside their already-virtualized OSes. Blue Pill\u2019s small size and minimal functionality makes it a convenient tool for experimenting. Phoenix will also support <a href="http://bluepillproject.org/">The Blue Pill Project</a> which means that some parts of our research will be available for other researchers (including code)!<br /><br />In case you still feel like having a look into my slides, you can get them <a href="http://invisiblethings.org/pub/Security%20Challenges%20in%20Virtualized%20Enviroments.pdf">here</a>.', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'I just came back from Stockholm where I attended the Virtualization Forum, and saw several, quite interesting vendor presentations. One that caught my attention was a talk by VMware, and especially the part that talked about the new ESX 3i hypervisor and presented it as "razor-thin". This "razor-thin" hypervisor will have, according to VMWare, the footprint "of only 32MB".My regular readers might sense that I\'m a bit ironic here. Well, 32MB of code is definitely not a "razor-thin" hypervisor in my opinion and it\'s not even close to a thin hypervisor... But why am I so picky about it? Is it really that important?Yes, I think so, because the bigger the hypervisor the more chances that there is a bug somewhere out there. And one of the reasons for using virtual machines is to provide isolation. Even if we use virtualization because of business reasons (server consolidation), still we want each VM to be properly isolated, to make sure that if an attackers "gets into" one VM, she will not be able to 0wn all the other VMs on the same hardware\u2026 In other words, isolation of VMs, is an extremely important feature.During my presentation I also talked about thin hypervisors. I first referenced a few bugs that were found in various VMMs in the recent months by other researchers (congrats to Rafal Wojtczuk of McAfee for some interestingly looking bugs in VMWare and Microsoft products). I used them as an argument that we should move towards very thin hypervisor architecture, exploiting hardware virtualization extension as much as possible (e.g. Nested Paging/EPT, IOMMU/DEV/NoDMA, etc) and avoiding doing things "in software".Nobody should be really surprised seeing VMMs bugs \u2013 after all we have seen so many bugs in OS kernels over years, so no surprise we will see more and more bugs in VMMs, unless we switch to very thin hypervisors, so thin that it would be possible to understand and verify their code by one person. Only then we would be able to talk about security advantage (in terms of isolation) offered by VMMs comparing to traditional OSes.I couldn\'t refrain myself from mentioning that the existence of those bugs in popular VMMs clearly shows that having a VMM already installed doesn\'t currently prevent from the "Blue Pill threat" \u2013 a point often expressed by some virtualization vendors, who notoriously try to diminish the importance of this problem (i.e. the problem of virtualization based malware).I also announced that Invisible Things Lab has just started working with Phoenix Technologies. Phoenix is the world leader in system firmware, particularly known for providing BIOSes for PCs for almost 25 years, and currently is working on a new product called HyperCore that would be a very thin and lightweight hypervisor for consumer systems. ITL will be helping Phoenix to ensure the security of this product.HyperCore hypervisor will use all the latest hardware virtualization extensions, like e.g. Nested Paging/EPT to minimize the unnecessary complexity and to provide negligible performance impact. For the same reasons, the I/O access will go through almost natively, just like in case of our Blue Pill...Speaking about Blue Pill \u2013 Phoenix is also interested in further research on Blue Pill, which will be used as a test bed for trying various ideas \u2013 e.g. nested virtualization, which might be adopted in the future versions of HyperCore to allow users to use other commercial VMMs inside their already-virtualized OSes. Blue Pill\'s small size and minimal functionality makes it a convenient tool for experimenting. Phoenix will also support The Blue Pill Project which means that some parts of our research will be available for other researchers (including code)!In case you still feel like having a look into my slides, you can get them here.', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Razor-Thin Hypervisors', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2007/10/razor-thin-hypervisors.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2007-10-25T19:55:00.001+02:00', u'thr_total': u'10', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-7805915543221342080'}
{'cprob': 1.0, 'updated': u'2009-03-25T16:05:28.276+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'security', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=5, tm_sec=28, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2007, tm_mon=10, tm_mday=17, tm_hour=11, tm_min=41, tm_sec=0, tm_wday=2, tm_yday=290, tm_isdst=0), 'title': u'Thoughts On Browser Rootkits', 'pred': 'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/8414578753020362950/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=8414578753020362950', 'type': u'text/html', 'rel': u'replies', 'title': u'6 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8414578753020362950', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/8414578753020362950', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2007/10/thoughts-on-browser-rootkits.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Thoughts On Browser Rootkits'}], 'summary': u'Petko D. Petkov from <a href="http://gnucitizen.org/">GNUCITIZEN</a> wrote <a href="http://www.gnucitizen.org/blog/browser-rootkits">a post about Browser Rootkits</a>, which inspired me to give some more thoughts on this subject. Petko is an active researcher in the field of client-side exploits (e.g. <a href="http://blogs.zdnet.com/security/?p=530">recent Adobe Acrobat PDF flaw</a>), so it\u2019s not a surprise that he\u2019s thinking about browsers as a natural environment for rootkits or malware. Also it\u2019s quite common to hear an opinion these days that browsers become so complicated and so universal that they are almost like operating systems rather than just standard applications.<br /> <br />Petko in his post gives several ideas of how browser-based malware could be created and I\u2019m sure that we will see more and more such malware in the near future (I would actually be surprised if it didn\u2019t exist already). His main argument for creating \u201cBrowser Rootkits\u201d is that they would be \u201ccloser to the data\u201d, which is, of course, undisputable.<br />  <br />The other argument is the complexity of a typical browser like e.g. Firefox or Internet Explorer. It seems like we have a very similar situation here to what we have with "classic" operating systems like e.g. Windows. Windows is so complex that nobody (including Microsoft) can really spot all the sensitive places in the kernel where a rootkit might "hook" \u2013 thus it\u2019s not possible to effectively monitor all those places. We have a similar problem with Firefox and IE because of their extensible architecture (think about all those plugins, add-ons, etc) \u2013 although we could examine the whole memory of firefox.exe process, we still would not be able to decide whether something bad is there or not.<br /> <br />I\u2019m even quite sure that <a href="http://theinvisiblethings.blogspot.com/2006/11/introducing-stealth-malware-taxonomy.html">my little malware taxonomy</a> could be used here to classify Firefox or IE infections. E.g. the browser malware of type 0, would be nothing else then just additional plugins, installed using official API and not trying to hide from browser reporting mechanisms (in other words they still will be visible to users when they will ask the browser to list all the installed plugins). And we will have type I and type II infections, the former would be simply modifying some code (be that a code of a browser or maybe of some other plugin) while the latter would be hooking some function pointers or changing some data only \u2013 this all to hide the offensive module. <br /><br />BTW, there is a little problem with classifying JIT-generated code \u2013 should it be type I or type II infection? I don\u2019t know the answer for now and I welcome all the feedback on this. And we can even imagine type III infections of browsers, but I will leave it as an exercise for my readers :)<br /><br />So, should we expect the classic, OS-based rootkits to die and the efforts in the malware community to move towards creating Browser-based rootkits? I don\u2019t think so. While the browser-based malware is and will definitely be more and more important problem, it has one disadvantage comparing to classic OS-based malware. Namely it\u2019s quite easy to avoid, or at least minimize the impact from browser-based rootkits. It\u2019s just enough to use two different browsers \u2013 one for sensitive and the other one for non-sensitive operations.<br /><br />So, for example, I use IE to do all my sensitive browsing (e.g. online banking, blogger access, etc), while Firefox to do all the casual browsing, which includes morning press reading, google searching, etc. The reason I use Firefox for non-sensitive browsing doesn\u2019t come from the fact that I think it\u2019s more secure (or better written) then IE, but because I like using NoScript and there is no similar plugin for IE...<br /><br />Of course, an attacker still might exploit my non-sensitive browser (Firefox) and then modify configuration or executable files that are being used by my sensitive browser (IE). However this would require write-access to those files. This is yet another reason why one should run the non-sensitive browser with limited privileges and technologies like UAC in Vista help to achieve it. I wrote <a href="http://theinvisiblethings.blogspot.com/2007/02/running-vista-every-day.html">an article</a> some time ago about how one can configure Vista to implement almost-full privilege separation.<br /><br />Of course, even if we decide to use 2 different browsers - one for sensitive and the other one for non-sensitive browsing, an attacker still might be able to break out from account protection via a kernel mode exploit (e.g. exploiting one of the bug that Alex and I presented in Vegas this year). However this would not be a browser malware anymore \u2013 this would be a good old kernel-mode malware :)<br /><br />A solution to this problem will probably be the use of a Virtual Machine to run the non-sensitive browser. Even today one might download e.g. the <a href="http://www.vmware.com/appliances/directory/browserapp.html">Browser Appliance</a> from VMWare and we will see more and more solutions like this in the coming years I think. This BTW, will probably stimulate more research into VM escaping and virtualization-based malware.<br /><br />Of course, the very important and sometimes non-trivial question is how to decide which type of browsing is sensitive and which is non-sensitive. E.g. most people will agree the online banking is a sensitive browsing, but what about webmail? Should I use my sensitive or non-sensitive browser for accessing my mail via web? Using a sensitive browser for webmail is dangerous, as it\u2019s quite possible that it could be infected via some malicious mail that would be in our inbox. While using the non-sensitive browser for webmail is also not a good solution, as most people would like to consider mail as sensitive and would not like to allow the possibly-compromised browser to learn the password for the mailbox.<br /><br />I avoid this problem by not using a browser for webmail and by having a special account just for running a thunderbird application (see again <a href="http://theinvisiblethings.blogspot.com/2007/02/running-vista-every-day.html">my article</a> on how to do this in Vista). It works well for me.<br /> <br />Of course, one could also do the same for browser \u2013 i.e. instead of having 2 browsers  (i.e. sensitive and non-sensitive), one could have 3 or more (maybe even 3 different virtual machines). But the question is how many accounts should we use? One for email, one for sensitive browsing, one for non-sensitive, one for accessing personal data (e.g. pictures)...? I guess there is no good answer for this and it depends on the specific situation (i.e. different configuration for home user that uses computer mostly for "fun" and different for somebody using the same computer for both work and "fun", etc...)<br /><br />On a side note \u2013 I really don\u2019t like the idea of using a web browser to do "everything" \u2013 I like using browser to do browsing, while to do other things to use specialized applications. I like having my data on my local hard drive. It\u2019s quite amazing that so many people these days use Google not only for searching, but also for email, calendaring and documents editing \u2013 it\u2019s like giving all your life secretes on a plate! Google can now correlate all your web search queries with a specific email account and even see who are you meeting with next evening and also know what a new product your company will be presenting next week, as you prepared you presentation using Google Documents. I\u2019m not sure whether it\u2019s Google or the people\u2019s naivety that disturbs me more...', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'Petko D. Petkov from GNUCITIZEN wrote a post about Browser Rootkits, which inspired me to give some more thoughts on this subject. Petko is an active researcher in the field of client-side exploits (e.g. recent Adobe Acrobat PDF flaw), so it\'s not a surprise that he\'s thinking about browsers as a natural environment for rootkits or malware. Also it\'s quite common to hear an opinion these days that browsers become so complicated and so universal that they are almost like operating systems rather than just standard applications. Petko in his post gives several ideas of how browser-based malware could be created and I\'m sure that we will see more and more such malware in the near future (I would actually be surprised if it didn\'t exist already). His main argument for creating Browser Rootkits is that they would be closer to the data, which is, of course, undisputable.  The other argument is the complexity of a typical browser like e.g. Firefox or Internet Explorer. It seems like we have a very similar situation here to what we have with "classic" operating systems like e.g. Windows. Windows is so complex that nobody (including Microsoft) can really spot all the sensitive places in the kernel where a rootkit might "hook" \u2013 thus it\'s not possible to effectively monitor all those places. We have a similar problem with Firefox and IE because of their extensible architecture (think about all those plugins, add-ons, etc) \u2013 although we could examine the whole memory of firefox.exe process, we still would not be able to decide whether something bad is there or not. I\'m even quite sure that my little malware taxonomy could be used here to classify Firefox or IE infections. E.g. the browser malware of type 0, would be nothing else then just additional plugins, installed using official API and not trying to hide from browser reporting mechanisms (in other words they still will be visible to users when they will ask the browser to list all the installed plugins). And we will have type I and type II infections, the former would be simply modifying some code (be that a code of a browser or maybe of some other plugin) while the latter would be hooking some function pointers or changing some data only \u2013 this all to hide the offensive module. BTW, there is a little problem with classifying JIT-generated code \u2013 should it be type I or type II infection? I don\'t know the answer for now and I welcome all the feedback on this. And we can even imagine type III infections of browsers, but I will leave it as an exercise for my readers :)So, should we expect the classic, OS-based rootkits to die and the efforts in the malware community to move towards creating Browser-based rootkits? I don\'t think so. While the browser-based malware is and will definitely be more and more important problem, it has one disadvantage comparing to classic OS-based malware. Namely it\'s quite easy to avoid, or at least minimize the impact from browser-based rootkits. It\'s just enough to use two different browsers \u2013 one for sensitive and the other one for non-sensitive operations.So, for example, I use IE to do all my sensitive browsing (e.g. online banking, blogger access, etc), while Firefox to do all the casual browsing, which includes morning press reading, google searching, etc. The reason I use Firefox for non-sensitive browsing doesn\'t come from the fact that I think it\'s more secure (or better written) then IE, but because I like using NoScript and there is no similar plugin for IE...Of course, an attacker still might exploit my non-sensitive browser (Firefox) and then modify configuration or executable files that are being used by my sensitive browser (IE). However this would require write-access to those files. This is yet another reason why one should run the non-sensitive browser with limited privileges and technologies like UAC in Vista help to achieve it. I wrote an article some time ago about how one can configure Vista to implement almost-full privilege separation.Of course, even if we decide to use 2 different browsers - one for sensitive and the other one for non-sensitive browsing, an attacker still might be able to break out from account protection via a kernel mode exploit (e.g. exploiting one of the bug that Alex and I presented in Vegas this year). However this would not be a browser malware anymore \u2013 this would be a good old kernel-mode malware :)A solution to this problem will probably be the use of a Virtual Machine to run the non-sensitive browser. Even today one might download e.g. the Browser Appliance from VMWare and we will see more and more solutions like this in the coming years I think. This BTW, will probably stimulate more research into VM escaping and virtualization-based malware.Of course, the very important and sometimes non-trivial question is how to decide which type of browsing is sensitive and which is non-sensitive. E.g. most people will agree the online banking is a sensitive browsing, but what about webmail? Should I use my sensitive or non-sensitive browser for accessing my mail via web? Using a sensitive browser for webmail is dangerous, as it\'s quite possible that it could be infected via some malicious mail that would be in our inbox. While using the non-sensitive browser for webmail is also not a good solution, as most people would like to consider mail as sensitive and would not like to allow the possibly-compromised browser to learn the password for the mailbox.I avoid this problem by not using a browser for webmail and by having a special account just for running a thunderbird application (see again my article on how to do this in Vista). It works well for me. Of course, one could also do the same for browser \u2013 i.e. instead of having 2 browsers  (i.e. sensitive and non-sensitive), one could have 3 or more (maybe even 3 different virtual machines). But the question is how many accounts should we use? One for email, one for sensitive browsing, one for non-sensitive, one for accessing personal data (e.g. pictures)...? I guess there is no good answer for this and it depends on the specific situation (i.e. different configuration for home user that uses computer mostly for "fun" and different for somebody using the same computer for both work and "fun", etc...)On a side note \u2013 I really don\'t like the idea of using a web browser to do "everything" \u2013 I like using browser to do browsing, while to do other things to use specialized applications. I like having my data on my local hard drive. It\'s quite amazing that so many people these days use Google not only for searching, but also for email, calendaring and documents editing \u2013 it\'s like giving all your life secretes on a plate! Google can now correlate all your web search queries with a specific email account and even see who are you meeting with next evening and also know what a new product your company will be presenting next week, as you prepared you presentation using Google Documents. I\'m not sure whether it\'s Google or the people\'s naivety that disturbs me more...', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Thoughts On Browser Rootkits', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2007/10/thoughts-on-browser-rootkits.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2007-10-17T13:41:00.001+02:00', u'thr_total': u'6', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-8414578753020362950'}
{'cprob': 1.0, 'updated': u'2009-03-25T16:05:37.514+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'security', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=5, tm_sec=37, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2007, tm_mon=8, tm_mday=31, tm_hour=18, tm_min=25, tm_sec=0, tm_wday=4, tm_yday=243, tm_isdst=0), 'title': u'Tricky Tricks', 'pred': 'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/3681389965289346657/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=3681389965289346657', 'type': u'text/html', 'rel': u'replies', 'title': u'31 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3681389965289346657', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/3681389965289346657', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2007/08/tricky-tricks.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Tricky Tricks'}], 'summary': u'I want to make a short philosophical comment about how some approaches to building security are wrong. <br /><br />Let\u2019s move back in time to the last decade of the XX century, to the 90\u2019s... Back in those days one of the most annoying problems in computer security was viruses, or, more precisely, executable file infectors. Many smart guys were working on both sides to create more stealthy infectors and also better detectors for those infectors\u2026<br /><br />Russian virus write Z0mbie with his Mistfall engine and Zmist virus went probably closest to the Holy Grail in this arm race \u2013 the creation of an undetectable virus. Peter Szor, a Symantec\u2019s chief antivirus researcher, wrote about his work in 2001:<br /><br /><span style="font-style: italic;">Many of us will not have seen a virus approaching this complexity for a few years. We could easily call Zmist one of the most complex binary viruses ever written.</span><br /><br />But nothing is really undetectable if you have a sample of the malware in your lab and can spent XXX hours analyzing it \u2013 you will always come up with some <span style="font-style: italic;">tricks</span> to detect it sooner or later. The question is \u2013 were any of the A/V scanners back then ready to detect such an infection if it was a 0day in the wild? Will any of the today\u2019s scanners detect a modified/improved Zmist virus, or would they have to count on the virus author being nice enough to send them a sample for an analysis first?<br /><br />Interestingly, file infectors stopped being a serious problem a few years ago. But this didn\u2019t happen because the A/V industry discovered a miracle cure for viruses, but rather because the users\u2019 habits changed. People do not exchange executables that often as 10 years ago. Today people rather download an executable from the Web (legal or not) rather then copy it from a friend\u2019s computer. <br /><br />But could the industry have solved the problem of file infectors in an elegant, definite way? The answer is yes and we all know the solution \u2013 digital signatures for executable files. Right now, most of the executables (but unfortunately still not all) on the laptop I\u2019m writing this text on are digitally signed. This includes programs from Microsoft, Adobe, Mozilla and even some open source ones like e.g. True Crypt. <br /><br />With digital signatures we can "detect" any kind of executable modifications, starting form the simplest and ending with those most complex, metamorphic EPO infectors as presented e.g. by Z0mbie. All we need to do (or more precisely the OS needs to do) is to verify the signature of an executable before executing it.<br /><br />I hear all the counter arguments: that many programs out there are still not digitally signed, that users are too stupid to decide which certificates to trust, that sometimes the bad guys might be able to obtain a legitimate certificate, etc...<br /><br />But all those minor problems can be solved and probably will eventually be solved in the coming years. Moreover, solving all those problems will probably cost much less then all the research on file infectors cost over the last 20 year. But that also means no money for the A/V vendors. <br /><br />Does it mean we get a secure OS this way? Of course not! Digital signatures do not protect against malicious code execution, e.g. they can\'t stop an exploit from executing its shellcode. So why bother? Because certificates allow to verify that what we have is really what we should have (e.g. that nobody infected any of our executable files). It\u2019s the first step in ensuring integrity of an OS.<br /><br />The case of digital signatures vs. file infectors is a good example of how problems in security should be addressed. But we all know that the A/V industry took a different approach \u2013 they invested zillions of dollars into research on polymorphic virus detection, built advanced emulators for analysis of infected files, etc. The outcome \u2013 lots of complex heuristics that usually work quite well against known patterns of infection, but are often useless against new 0day engines and also are so complex that nobody really knows how many false positives they can produce and how buggy the code itself is. <span style="font-style: italic;">Tricks!</span> Very complex and maybe even interesting (from a scientific point of view) <span style="font-style: italic;">tricks</span>.<br /><br />So, do I want to say that all those years of A/V research on detecting file infections was a waste time? I\u2019m afraid that is exactly what I want to say here. This is an example of how the security industry took a wrong path, the path that never could lead to an effective and elegant solution. This is an example of how people decided to employ <span style="font-style: italic;">tricks</span>, instead looking for generic, simple and robust solutions.<br /><br />Security should not be built on <span style="font-style: italic;">tricks</span> and hacks! Security should be built on simple and robust solutions. Oh, and we should always assume that the users are not stupid \u2013 building solutions to protect uneducated users will always fail.', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'I want to make a short philosophical comment about how some approaches to building security are wrong. Let\'s move back in time to the last decade of the XX century, to the 90\'s... Back in those days one of the most annoying problems in computer security was viruses, or, more precisely, executable file infectors. Many smart guys were working on both sides to create more stealthy infectors and also better detectors for those infectors\u2026Russian virus write Z0mbie with his Mistfall engine and Zmist virus went probably closest to the Holy Grail in this arm race \u2013 the creation of an undetectable virus. Peter Szor, a Symantec\'s chief antivirus researcher, wrote about his work in 2001:Many of us will not have seen a virus approaching this complexity for a few years. We could easily call Zmist one of the most complex binary viruses ever written.But nothing is really undetectable if you have a sample of the malware in your lab and can spent XXX hours analyzing it \u2013 you will always come up with some tricks to detect it sooner or later. The question is \u2013 were any of the A/V scanners back then ready to detect such an infection if it was a 0day in the wild? Will any of the today\'s scanners detect a modified/improved Zmist virus, or would they have to count on the virus author being nice enough to send them a sample for an analysis first?Interestingly, file infectors stopped being a serious problem a few years ago. But this didn\'t happen because the A/V industry discovered a miracle cure for viruses, but rather because the users\' habits changed. People do not exchange executables that often as 10 years ago. Today people rather download an executable from the Web (legal or not) rather then copy it from a friend\'s computer. But could the industry have solved the problem of file infectors in an elegant, definite way? The answer is yes and we all know the solution \u2013 digital signatures for executable files. Right now, most of the executables (but unfortunately still not all) on the laptop I\'m writing this text on are digitally signed. This includes programs from Microsoft, Adobe, Mozilla and even some open source ones like e.g. True Crypt. With digital signatures we can "detect" any kind of executable modifications, starting form the simplest and ending with those most complex, metamorphic EPO infectors as presented e.g. by Z0mbie. All we need to do (or more precisely the OS needs to do) is to verify the signature of an executable before executing it.I hear all the counter arguments: that many programs out there are still not digitally signed, that users are too stupid to decide which certificates to trust, that sometimes the bad guys might be able to obtain a legitimate certificate, etc...But all those minor problems can be solved and probably will eventually be solved in the coming years. Moreover, solving all those problems will probably cost much less then all the research on file infectors cost over the last 20 year. But that also means no money for the A/V vendors. Does it mean we get a secure OS this way? Of course not! Digital signatures do not protect against malicious code execution, e.g. they can\'t stop an exploit from executing its shellcode. So why bother? Because certificates allow to verify that what we have is really what we should have (e.g. that nobody infected any of our executable files). It\'s the first step in ensuring integrity of an OS.The case of digital signatures vs. file infectors is a good example of how problems in security should be addressed. But we all know that the A/V industry took a different approach \u2013 they invested zillions of dollars into research on polymorphic virus detection, built advanced emulators for analysis of infected files, etc. The outcome \u2013 lots of complex heuristics that usually work quite well against known patterns of infection, but are often useless against new 0day engines and also are so complex that nobody really knows how many false positives they can produce and how buggy the code itself is. Tricks! Very complex and maybe even interesting (from a scientific point of view) tricks.So, do I want to say that all those years of A/V research on detecting file infections was a waste time? I\'m afraid that is exactly what I want to say here. This is an example of how the security industry took a wrong path, the path that never could lead to an effective and elegant solution. This is an example of how people decided to employ tricks, instead looking for generic, simple and robust solutions.Security should not be built on tricks and hacks! Security should be built on simple and robust solutions. Oh, and we should always assume that the users are not stupid \u2013 building solutions to protect uneducated users will always fail.', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Tricky Tricks', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2007/08/tricky-tricks.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2007-08-31T20:25:00.001+02:00', u'thr_total': u'31', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-3681389965289346657'}
{'cprob': 1.0, 'updated': u'2009-03-25T16:05:46.916+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'announcements', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=5, tm_sec=46, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2007, tm_mon=8, tm_mday=3, tm_hour=4, tm_min=1, tm_sec=0, tm_wday=4, tm_yday=215, tm_isdst=0), 'title': u'Virtualization Detection vs. Blue Pill Detection', 'pred': 'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/6894036738428375097/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=6894036738428375097', 'type': u'text/html', 'rel': u'replies', 'title': u'7 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6894036738428375097', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6894036738428375097', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2007/08/virtualization-detection-vs-blue-pill.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Virtualization Detection vs. Blue Pill Detection'}], 'summary': u'So, it\u2019s all over the press now, but, as usual, many people didn\u2019t quite get the main points of <a href="http://bluepillproject.org/stuff/IsGameOver.ppt">our Black Hat talk</a>. So, let\u2019s clear things up... First, please note that the talk was divided into two separate, independent, parts \u2013 the first one about bypassing vista kernel protection and the second one about virtualization based malware.<br /><br />The message of the first part was that <span style="font-weight: bold;">we don\u2019t believe it\u2019s possible to implement effective kernel protection on any general purpose OS based on monolithic kernel design</span>.<br /><br />The second part, the one about virtualization, had several messages...<br /><ol><li><span style="font-weight: bold;">The main point was that detecting virtualization is not the same as detecting virtualization based malware.</span> As hardware virtualization technology gets more and more widespread, many machines will be running with virtualization mode enabled, no matter whether blue pilled or not. In that case blue pill-like malware doesn\u2019t need to cheat that virtualization is not enabled, as it\u2019s actually expected that virtualization is being used for some legitimate purposes. In that case using a "blue pill detector", that in fact is just a generic virtualization detector is completely pointless.<br /><br />Obviously in such scenarios blue pill-like malware must support nested hypervisors. And this is what we have implemented in our <a href="http://bluepillproject.org/">New Blue Pill</a>. We can run tens of blue pills inside each other and they all work! You can try it by yourself, but you should disable comport debug output to do more then twenty nested pills. We still fail at running Virtual PC 2007 as a nested hypervisor (when it\u2019s guest switches to protected mode), but we hope to have this fixed in the coming weeks (please note that VPC\u2019s hypervisor doesn\u2019t block blue pill from loading \u2013 see our slides for more info).<br /><br />In other words, if somebody announces to the world that they can fight virtualization based malware using generic virtualization detectors, it\u2019s like if they said that they can detect e.g. a botnet agent, just by detecting that an executable is using networking!</li><br /><li>We have also decided to discuss how blue pill could potentially cheat those generic virtualization detectors, even though we don\u2019t believe it would be necessary in the coming years, as everything will be virtualized anyways (see previous point). But, we still decided to look into some of the SVM detection methods. First, we found out that <span style="font-weight: bold;">many methods that people described as a way to detect virtualization do not work in the simple form as they were described</span>. We took a closer look e.g. at the TLB profiling methods that were suggested by several researchers as a reliable method for virtualization detection. However all the papers that were describing this method missed the fact that some of the caches are not fully associative and one needs to use special effort (which means additional complexity) to make sure to e.g. fill the whole TLB L2 buffer. Obviously we provided all the necessary details of how to write those detectors properly (we even posted one such detector).<br /><br />In other words - we believe that <span style="font-weight: bold;">it will always be possible to detect virtualization mode using various tricks and hacks, but: 1) those hacks could be forced to be very complex and 2) in case virtualization is being used on the target computer for some legitimate purposes all those methods fail anyway (see point 1)</span>.</li><br /><li>Some people might argue that maybe then we should build these virtualization detectors into all the legitimate hypervisors (e.g. Virtual PC hypervisor), so that they know at least whether they are being run on a native machine or maybe inside blue pill. However this approach contradicts the rules we use to build secure and effective hypervisors. These rules say that hypervisors should be as small as possible and there should be no 3rd party code  allowed there.<br /><br />Now imagine that A/V company try to insert their virtualization detectors (which BTW would have to be updated from time to time to support e.g. new processor models) into hypervisors \u2013 if that ever happened, it would be a failure of our industry. We need other methods to address this threat, methods that would be based on documented, robust and simple methods. Security should not be built on bugs, hacks and tricks!</li></ol><br />We posted the full source code of out New Blue Pill <a href="http://bluepillproject.org/">here</a>. We believe that it will help other researchers to to analyze this threat and hopefully we will find a good solution soon, before this ever become widespread. <br /><br />Happy bluepilling!<br /><br />On a side note: now I can also explain (if this is not clear already) how we were planning to beat <a href="http://theinvisiblethings.blogspot.com/2007/06/were-ready-for-ptaceks-challenge.html">our challengers</a>. We would simply ask them to install Virtual Server 2005 R2 on all the test machines and we would install our New Blue Pill on just a few of them. Then their wonderful detectors would simply detect that all the machines have SVM mode enabled, but that would be a completely useless information. Yes, we still believe we would need a couple of months to get our proof-of-concept to the level we would be confident that we will win anyway (e.g. if they used memory scanning for some \u201csignature). <br /><br />BTW, you might be wondering why I introduced the \u201cno CPU peek for more then 1s\u201d requirement? I will leave finding an answer as an exercise from a psychology to my dear readers ;)', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'So, it\'s all over the press now, but, as usual, many people didn\'t quite get the main points of our Black Hat talk. So, let\'s clear things up... First, please note that the talk was divided into two separate, independent, parts \u2013 the first one about bypassing vista kernel protection and the second one about virtualization based malware.The message of the first part was that we don\'t believe it\'s possible to implement effective kernel protection on any general purpose OS based on monolithic kernel design.The second part, the one about virtualization, had several messages...The main point was that detecting virtualization is not the same as detecting virtualization based malware. As hardware virtualization technology gets more and more widespread, many machines will be running with virtualization mode enabled, no matter whether blue pilled or not. In that case blue pill-like malware doesn\'t need to cheat that virtualization is not enabled, as it\'s actually expected that virtualization is being used for some legitimate purposes. In that case using a "blue pill detector", that in fact is just a generic virtualization detector is completely pointless.Obviously in such scenarios blue pill-like malware must support nested hypervisors. And this is what we have implemented in our New Blue Pill. We can run tens of blue pills inside each other and they all work! You can try it by yourself, but you should disable comport debug output to do more then twenty nested pills. We still fail at running Virtual PC 2007 as a nested hypervisor (when it\'s guest switches to protected mode), but we hope to have this fixed in the coming weeks (please note that VPC\'s hypervisor doesn\'t block blue pill from loading \u2013 see our slides for more info).In other words, if somebody announces to the world that they can fight virtualization based malware using generic virtualization detectors, it\'s like if they said that they can detect e.g. a botnet agent, just by detecting that an executable is using networking!We have also decided to discuss how blue pill could potentially cheat those generic virtualization detectors, even though we don\'t believe it would be necessary in the coming years, as everything will be virtualized anyways (see previous point). But, we still decided to look into some of the SVM detection methods. First, we found out that many methods that people described as a way to detect virtualization do not work in the simple form as they were described. We took a closer look e.g. at the TLB profiling methods that were suggested by several researchers as a reliable method for virtualization detection. However all the papers that were describing this method missed the fact that some of the caches are not fully associative and one needs to use special effort (which means additional complexity) to make sure to e.g. fill the whole TLB L2 buffer. Obviously we provided all the necessary details of how to write those detectors properly (we even posted one such detector).In other words - we believe that it will always be possible to detect virtualization mode using various tricks and hacks, but: 1) those hacks could be forced to be very complex and 2) in case virtualization is being used on the target computer for some legitimate purposes all those methods fail anyway (see point 1).Some people might argue that maybe then we should build these virtualization detectors into all the legitimate hypervisors (e.g. Virtual PC hypervisor), so that they know at least whether they are being run on a native machine or maybe inside blue pill. However this approach contradicts the rules we use to build secure and effective hypervisors. These rules say that hypervisors should be as small as possible and there should be no 3rd party code  allowed there.Now imagine that A/V company try to insert their virtualization detectors (which BTW would have to be updated from time to time to support e.g. new processor models) into hypervisors \u2013 if that ever happened, it would be a failure of our industry. We need other methods to address this threat, methods that would be based on documented, robust and simple methods. Security should not be built on bugs, hacks and tricks!We posted the full source code of out New Blue Pill here. We believe that it will help other researchers to to analyze this threat and hopefully we will find a good solution soon, before this ever become widespread. Happy bluepilling!On a side note: now I can also explain (if this is not clear already) how we were planning to beat our challengers. We would simply ask them to install Virtual Server 2005 R2 on all the test machines and we would install our New Blue Pill on just a few of them. Then their wonderful detectors would simply detect that all the machines have SVM mode enabled, but that would be a completely useless information. Yes, we still believe we would need a couple of months to get our proof-of-concept to the level we would be confident that we will win anyway (e.g. if they used memory scanning for some signature). BTW, you might be wondering why I introduced the no CPU peek for more then 1s requirement? I will leave finding an answer as an exercise from a psychology to my dear readers ;)', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Virtualization Detection vs. Blue Pill Detection', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2007/08/virtualization-detection-vs-blue-pill.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2007-08-03T06:01:00.001+02:00', u'thr_total': u'7', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-6894036738428375097'}
{'cprob': 1.0, 'updated': u'2009-03-25T16:06:10.364+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'announcements', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=6, tm_sec=10, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2007, tm_mon=6, tm_mday=28, tm_hour=11, tm_min=23, tm_sec=0, tm_wday=3, tm_yday=179, tm_isdst=0), 'title': u"We're ready for the Ptacek's challenge!", 'pred': 'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/4491938186982426867/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=4491938186982426867', 'type': u'text/html', 'rel': u'replies', 'title': u'19 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/4491938186982426867', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/4491938186982426867', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2007/06/were-ready-for-ptaceks-challenge.html', 'type': u'text/html', 'rel': u'alternate', 'title': u"We're ready for the Ptacek's challenge!"}], 'summary': u'Thomas Ptacek and company just came up with this <a href="http://www.matasano.com/log/895/joanna-we-can-detect-bluepill-let-us-prove-it/">funny challenge</a> to test our Blue Pill rootkit. And, needles to say, the Invisible Things Lab <a href="http://invisiblethingslab.com/about.html">team</a> is ready to take their challenge, however with some additional requirements, that would assure the fairness of the contest.<br /><br />First, we believe that 2 machines are definitely not enough, because the chance of correct guess, using a completely random (read: unreliable) detection method is 50%. Thus we think that the reasonable number is 5 machines. Each of them could be in a state <span style="font-family: courier new;">0</span> or <span style="font-family: courier new;">1</span> (i.e. infected or not). On each of this machines we install two files: <span style="font-family: courier new;">bluepill.exe</span> and <span style="font-family: courier new;">bluepill.sys</span><br /><br />The <span style="font-family: courier new;">.sys</span> file is digitally signed, so it loads without any problem (we could use one of our methods for loading unsigned code on vista that we\'re planning to demonstrate at BH, but this is not part of the challenge, so we will use the official way).<br /><br />The <span style="font-family: courier new;">bluepill.exe</span> takes one argument which is <span style="font-family: courier new;">0</span> or <span style="font-family: courier new;">1</span>. If it\'s <span style="font-family: courier new;">1</span> it loads the driver and infects the machines. If it\'s 0 it also loads the driver, but the driver does not infect the machine.<br /><br />So, on each of the 5 machines we run <span style="font-family: courier new;">bluepill.exe</span> with randomly chosen argument, being <span style="font-family: courier new;">0</span> or <span style="font-family: courier new;">1</span>. We make sure that at least one machine is not infected and that at least one machine is infected.<br /><br />After that the detection team runs their <span style="font-family: courier new;">detector.exe</span> executable on each machine. This program can not take any arguments and must return only one value: <span style="font-family: courier new;">0</span> or <span style="font-family: courier new;">1</span>. It must act autonomously -- no human assistance when interpreting the results.<br /><br />The goal of the detection team is to correctly mark each machine as either being infected (<span style="font-family: courier new;">1</span>) or not (<span style="font-family: courier new;">0</span>). The chance of a blind guess is:<br /><br /><div style="text-align: center;"><span style="font-family: courier new;">1/(2^5-2) = 3%</span><br /></div><br />The detector can not cause system crash or halt the machine -- if it does they lose. The detector can not consume significant amount of CPU time (say > 90%) for more then, say 1 sec. If it does, then it\'s considered disturbing for the user and thus unpractical.<br /><br />The source code of our rootkit as well as the detector should be provided to the judges at the beginning of the contests. The judges will compile the rootkit and the detector and will copy the resulting binaries to all test machines.<br /><br />After the completion of the contest, regardless of who wins, the sources for both the rootkit and the detector will be published in the Internet -- for educational purpose to allow others to research this subject.<br /><br />Our current Blue Pill has been in the development for only about 2 months (please note that we do not have rights to use the previous version developed for COSEINC) and it is more of a prototype, with primary use for <a href="http://blackhat.com/html/bh-usa-07/train-bh-us-07-jrk.html">our training in Vegas</a>, rather then a "commercial grade rootkit". Obviously we will be discussing all the limitations of this prototype during our training. We believe that we would need about 6 months full-time work by 2 people to turn it into such a commercial grade creature that would win the contest described above. We\'re ready to do this, but we expect that somebody compensate us for the time spent on this work. We would expect an industry standard fee for this work, which we estimate to be $200 USD per hour per person.<br /><br />If Thomas Ptacek and his colleges are so certain that they found a panacea for virtualization based malware, then I\'m sure that they will be able to find sponsors willing to financially support this challenge.<br /><br />As a side note, the description for our <a href="http://blackhat.com/html/bh-usa-07/bh-usa-07-speakers.html#Rutkowska">new talk for Black Hat Vegas</a> has just been published yesterday.', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'Thomas Ptacek and company just came up with this funny challenge to test our Blue Pill rootkit. And, needles to say, the Invisible Things Lab team is ready to take their challenge, however with some additional requirements, that would assure the fairness of the contest.First, we believe that 2 machines are definitely not enough, because the chance of correct guess, using a completely random (read: unreliable) detection method is 50%. Thus we think that the reasonable number is 5 machines. Each of them could be in a state 0 or 1 (i.e. infected or not). On each of this machines we install two files: bluepill.exe and bluepill.sysThe .sys file is digitally signed, so it loads without any problem (we could use one of our methods for loading unsigned code on vista that we\'re planning to demonstrate at BH, but this is not part of the challenge, so we will use the official way).The bluepill.exe takes one argument which is 0 or 1. If it\'s 1 it loads the driver and infects the machines. If it\'s 0 it also loads the driver, but the driver does not infect the machine.So, on each of the 5 machines we run bluepill.exe with randomly chosen argument, being 0 or 1. We make sure that at least one machine is not infected and that at least one machine is infected.After that the detection team runs their detector.exe executable on each machine. This program can not take any arguments and must return only one value: 0 or 1. It must act autonomously -- no human assistance when interpreting the results.The goal of the detection team is to correctly mark each machine as either being infected (1) or not (0). The chance of a blind guess is:1/(2^5-2) = 3%The detector can not cause system crash or halt the machine -- if it does they lose. The detector can not consume significant amount of CPU time (say > 90%) for more then, say 1 sec. If it does, then it\'s considered disturbing for the user and thus unpractical.The source code of our rootkit as well as the detector should be provided to the judges at the beginning of the contests. The judges will compile the rootkit and the detector and will copy the resulting binaries to all test machines.After the completion of the contest, regardless of who wins, the sources for both the rootkit and the detector will be published in the Internet -- for educational purpose to allow others to research this subject.Our current Blue Pill has been in the development for only about 2 months (please note that we do not have rights to use the previous version developed for COSEINC) and it is more of a prototype, with primary use for our training in Vegas, rather then a "commercial grade rootkit". Obviously we will be discussing all the limitations of this prototype during our training. We believe that we would need about 6 months full-time work by 2 people to turn it into such a commercial grade creature that would win the contest described above. We\'re ready to do this, but we expect that somebody compensate us for the time spent on this work. We would expect an industry standard fee for this work, which we estimate to be $200 USD per hour per person.If Thomas Ptacek and his colleges are so certain that they found a panacea for virtualization based malware, then I\'m sure that they will be able to find sponsors willing to financially support this challenge.As a side note, the description for our new talk for Black Hat Vegas has just been published yesterday.', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u"We're ready for the Ptacek's challenge!", 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2007/06/were-ready-for-ptaceks-challenge.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2007-06-28T13:23:00.001+02:00', u'thr_total': u'19', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-4491938186982426867'}
{'cprob': 1.0, 'updated': u'2009-03-25T16:06:20.690+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'security', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=6, tm_sec=20, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2007, tm_mon=5, tm_mday=18, tm_hour=11, tm_min=57, tm_sec=0, tm_wday=4, tm_yday=138, tm_isdst=0), 'title': u'Invisible Things Lab, Bitlocker/TPM bypassing and some conference thoughts', 'pred': 'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/1481677447138628382/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=1481677447138628382', 'type': u'text/html', 'rel': u'replies', 'title': u'5 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1481677447138628382', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1481677447138628382', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2007/05/invisible-things-lab-bitlockertpm.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Invisible Things Lab, Bitlocker/TPM bypassing and some conference thoughts'}], 'summary': u'Invisible Things Lab\u2019s <a href="http://invisiblethingslab.com/">website</a> is now online! However, we still don\u2019t have a cute logo because the company where I order the logo presented me with something completely unacceptable and disappointing after taking a week to prepare it :( Alex is really pissed of by this and I hope we will find something nice really soon...<br /><br />Anyway, as you can see on the website, we don\u2019t have any product and we focus on consulting and research-on-demand only. We mainly target three groups of customers:<br /><br />First there are security vendors and OS vendors, to whom we offer our product assessment and advisory services. E.g. we can take a look at the design and implementation of a rootkit detector, host IPS or some custom hardened OS and point out all the weaknesses we see and also give advices what we think should be improved. We can advise about both the design and implementation side, sometimes without requiring all the product internal information being shared with us.<br /><br />The other group is corporate customers interested in unbiased evaluation of security technology they\'re planning to deploy. Here we can look at the products they consider to deploy and point out pros and cons of each of them and suggest the best choice. So e.g. we can look at various \u201cinformation leak protectors\u201d and tell how sophisticated techniques are required to bypass each of them (because, of course, all such products are bypassable). We can also advise about various technical aspects of implementing corporate security policies.<br /><br />Finally there are law enforcement customers and forensic investigators, whom we can help to stay up-to-date with current offensive technology as used e.g. by modern malware, by running various trainings and seminars. We can also share our experience with advanced stealth malware and covert channels to help investigate more sophisticated incidents.<br /><br />Ok, so what we don\u2019t do? Well, we do not do classic code auditing, understood as looking for implementation bugs like e.g. buffer overflows or race conditions. We still do implementation analysis, when e.g. assessing a product, but we look only at feature-specific parts of implementation \u2013 e.g. how the kernel protection or hooking has been implemented in a given host IDS.<br /><br />We also don\u2019t do web application security nor database security. There are people who have much more experience in this area then we have, so go to them!<br /><br />Finally, we do not do penetration testing, simply because I don\u2019t believe this is the best way of improving system security. I can run 101 exploits against your server and even though all of them fail, still it tells nothing about how secure is your system. Maybe there is some little detail I missed which caused all my exploits to fail just because I was tired that day? I would definately prefer to talk to the security team and also to the server admin and ask them what they have done to secure the server in the first place. If I though that their approach has some weakness then I would simply advise them what I think they should improve. Later I would kindly ask them to give me the root/admin access so that I could verify by myself whether the advices have been implemented... This approach has an advantage of being much more complete and usually taking much less time over the standard pen-testing. It has one disadvantage though \u2013 it\u2019s not a good material for a Hollywood movie ;)<br /><br />So, all in all, we focus on OS security in contrast to application security and network security (although we can be helpful with detecting covert channels in a corporate enviroment).<br /><br />Speaking of OS security (and leaving the subject of my new company for a second) \u2013 I recently had a pleasure of giving a keynote speech at the <a href="http://www.nluug.nl/events/vj07/">NLUUG conference</a> in the Netherlands, which this year was focused on virtualization technology. The conference was really nice (even though 2/3 of the talks were in Dutch) and there were couple of talks I liked in particular. First, there was a talk about <a href="http://www.nluug.nl/events/vj07/abstracts/ab.html?id=4">Microhypervisor Verification</a> by Hendrik Tews. Author presented the overview of the Nizza architecture (which was interesting, but in my opinion way too complicated and impractical for using it anywhere outside the lab). He also talked about challenges with formal verification of kernel and microkernel, which was very interesting. I talked to him later about feasibility of verifying the monolithic kernels, like those in Linux or Windows and, not surprisingly, he said it\'s not really possible these days and in the coming years, because of the cost (I need to mention that he does the verification "manually").<br /><br />There was also a nice presentation about <a href="http://www.nluug.nl/events/vj07/abstracts/ab.html?id=10">Kernel Virtual Machine Monitor (KVM) for Linux</a> by one of its developer Avi Kivity. I think in the future it might be a strong competition to Xen, especially after they add support for IOMMU technology (which I think is expected to be introduced on AMD and Intel processors somewhere in 2008). I really like the design of KVM which takes advantage of many features already present in Linux kernel without implementing them from scratch.<br /><br />Finally there was a presentation by another polish female researcher, <a href="http://www.nluug.nl/events/vj07/abstracts/ab.html?id=16">Asia (Joanna) Slowinska</a>. She talked about Prospector, a system built on top of a CPU emulator (based on Qemu) to automatically generate generic signatures for buffer overflow attacks (both heap and stack based). On a side note, Asia (which by the way is pronounced \u201cAshyia\u201d and not like the continent!) is the short form of the name Joanna, so basically almost everybody in Poland calls me Asia as well ;)<br /><br />There was also a talk by <a href="http://www.nluug.nl/events/vj07/abstracts/ab.html?id=2">Anil Madhavapeddy</a> of XenSource, but in my opinion it was a little bit too much of a \u201cmarketing\u201d presentation rather then a technical one (even though Anil turned out as a very technical and knowledgeable guy).<br /><br />I also had some meetings at the Vrije Universiteit in Amsterdam the following day, where I met with <a href="http://www.minix3.org/">MINIX3</a> developers and prof. Andrew Tanenbaum (what a fool I was that I didn\u2019t bring one of his famous books to get an autograph:/). I must say really like the design of MINIX3, which keeps all the drivers (and other system components) in usermode, in separated address spaces. This is, however, still problematic today, as without IOMMU we can\u2019t really fully protect kernel from usermode drivers, because of the potential DMA attacks \u2013 i.e. a driver can setup a DMA write-transaction to overwrite some part of the micro kernel memory, thus owning the system completely. But I guess we will all have processors supporting IOMMU within the next 1-2 years.<br /><br />Just two days ago I delivered another keynote presentation, this time at the <a href="http://www.infosecurityproject.com/">InfoSecurity conference in Honk Kong</a>, organized by Computer World. My speech was about \u201cHuman Factor vs. technology\u201d and basically the message I tried to pass was that the technology is just as flawed as the so called \u201chuman factor\u201d, understood here as an user\u2019s unawareness and administrator\u2019s incompetence. I guess this is something perfectly obvious for most of technical security people, who at least once wrote an exploit by themselves. But apparently not for the security management stuff... So, even though it was by far the least technical speech I have every gave in my life, it was received as way too technical for many attendees (who were like \u201cOMG, that was a shock!\u201d). And I didn\u2019t even mention any specific research I\u2019ve done \u2013 just some standard stuff about exploits etc...<br /><br />I also took part in a discussion panel with several C-level executives, some of them being CIOs for some huge institutions, others being C-level marketing guys from several security vendors.<br /><br />So, I must say I was really struck by the complete lack of understanding of even the basic technical concepts behind IT security shown by some of the management people who were there. I understand, of course, that typical CIO or CSO doesn\u2019t need to know much about technical details about how exploits and malware work, but their naivety was really shocking!<br /><br />Speaking of conferences, I own apologizes to the organizers of <a href="http://2007.confidence.org.pl/?lp_lang_view=en">Confidence 2007 conference</a> in Krakow, Poland. After spending several days in the Netherlands, experiencing their  rainy weather and also because of the shortage of sleep in the recent weeks due to some traveling (especially lack of my afternoon naps), I got sick and couldn\u2019t make it to the conference. I heard it was very good this year, featuring many international speakers and, of course, Krakow, which is one of the nicest cities in Poland.<br /><br />Finally, I would like to explain a little confusion around <a href="http://blackhat.com/html/bh-usa-07/train-bh-us-07-jrk.html">our Black Hat training</a>. Shortly after we announced the training, there appeared <a href="http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9018284">some press articles</a> which incorrectly described the kernel attacks that we\u2019re going to present in Vegas. In the original blog post I said that these attacks \u201cwork on the fly and do not require system reboot and are not afraid of the TPM/Bitlocker protection\u201d, but some people understood that we were going to actually present ways to defeat Bitlocker Drive Encryption (BDE). This is quite a misunderstanding, because those attacks, which allow for inserting unsigned code into Vista x64 kernel, are \u201cnot afraid of TPM/Bitlocker\u201d simply because they can be executed on the fly and thus do not require system reboot, while Bitlocker\u2019s task is to secure the boot process, but not to prevent the kernel against compromises!<br /><br />However I intentionally mentioned TPM and Bitlocker, just to stress that those technologies have simply nothing to do with stopping rootkits and kernel compromises, provided you\u2019re using kernel attacks which do not require system reboot, even though they\u2019re often advertised as if they had\u2026 So, basically, even if we could break the BDE, it still wouldn\u2019t give us any benefit these days. The situation will change within 2-3 years or so, i.e. when Microsoft will eventually come up with their own hypervisor, but that\u2019s a different story...', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'Invisible Things Lab\'s website is now online! However, we still don\'t have a cute logo because the company where I order the logo presented me with something completely unacceptable and disappointing after taking a week to prepare it :( Alex is really pissed of by this and I hope we will find something nice really soon...Anyway, as you can see on the website, we don\'t have any product and we focus on consulting and research-on-demand only. We mainly target three groups of customers:First there are security vendors and OS vendors, to whom we offer our product assessment and advisory services. E.g. we can take a look at the design and implementation of a rootkit detector, host IPS or some custom hardened OS and point out all the weaknesses we see and also give advices what we think should be improved. We can advise about both the design and implementation side, sometimes without requiring all the product internal information being shared with us.The other group is corporate customers interested in unbiased evaluation of security technology they\'re planning to deploy. Here we can look at the products they consider to deploy and point out pros and cons of each of them and suggest the best choice. So e.g. we can look at various information leak protectors and tell how sophisticated techniques are required to bypass each of them (because, of course, all such products are bypassable). We can also advise about various technical aspects of implementing corporate security policies.Finally there are law enforcement customers and forensic investigators, whom we can help to stay up-to-date with current offensive technology as used e.g. by modern malware, by running various trainings and seminars. We can also share our experience with advanced stealth malware and covert channels to help investigate more sophisticated incidents.Ok, so what we don\'t do? Well, we do not do classic code auditing, understood as looking for implementation bugs like e.g. buffer overflows or race conditions. We still do implementation analysis, when e.g. assessing a product, but we look only at feature-specific parts of implementation \u2013 e.g. how the kernel protection or hooking has been implemented in a given host IDS.We also don\'t do web application security nor database security. There are people who have much more experience in this area then we have, so go to them!Finally, we do not do penetration testing, simply because I don\'t believe this is the best way of improving system security. I can run 101 exploits against your server and even though all of them fail, still it tells nothing about how secure is your system. Maybe there is some little detail I missed which caused all my exploits to fail just because I was tired that day? I would definately prefer to talk to the security team and also to the server admin and ask them what they have done to secure the server in the first place. If I though that their approach has some weakness then I would simply advise them what I think they should improve. Later I would kindly ask them to give me the root/admin access so that I could verify by myself whether the advices have been implemented... This approach has an advantage of being much more complete and usually taking much less time over the standard pen-testing. It has one disadvantage though \u2013 it\'s not a good material for a Hollywood movie ;)So, all in all, we focus on OS security in contrast to application security and network security (although we can be helpful with detecting covert channels in a corporate enviroment).Speaking of OS security (and leaving the subject of my new company for a second) \u2013 I recently had a pleasure of giving a keynote speech at the NLUUG conference in the Netherlands, which this year was focused on virtualization technology. The conference was really nice (even though 2/3 of the talks were in Dutch) and there were couple of talks I liked in particular. First, there was a talk about Microhypervisor Verification by Hendrik Tews. Author presented the overview of the Nizza architecture (which was interesting, but in my opinion way too complicated and impractical for using it anywhere outside the lab). He also talked about challenges with formal verification of kernel and microkernel, which was very interesting. I talked to him later about feasibility of verifying the monolithic kernels, like those in Linux or Windows and, not surprisingly, he said it\'s not really possible these days and in the coming years, because of the cost (I need to mention that he does the verification "manually").There was also a nice presentation about Kernel Virtual Machine Monitor (KVM) for Linux by one of its developer Avi Kivity. I think in the future it might be a strong competition to Xen, especially after they add support for IOMMU technology (which I think is expected to be introduced on AMD and Intel processors somewhere in 2008). I really like the design of KVM which takes advantage of many features already present in Linux kernel without implementing them from scratch.Finally there was a presentation by another polish female researcher, Asia (Joanna) Slowinska. She talked about Prospector, a system built on top of a CPU emulator (based on Qemu) to automatically generate generic signatures for buffer overflow attacks (both heap and stack based). On a side note, Asia (which by the way is pronounced Ashyia and not like the continent!) is the short form of the name Joanna, so basically almost everybody in Poland calls me Asia as well ;)There was also a talk by Anil Madhavapeddy of XenSource, but in my opinion it was a little bit too much of a marketing presentation rather then a technical one (even though Anil turned out as a very technical and knowledgeable guy).I also had some meetings at the Vrije Universiteit in Amsterdam the following day, where I met with MINIX3 developers and prof. Andrew Tanenbaum (what a fool I was that I didn\'t bring one of his famous books to get an autograph:/). I must say really like the design of MINIX3, which keeps all the drivers (and other system components) in usermode, in separated address spaces. This is, however, still problematic today, as without IOMMU we can\'t really fully protect kernel from usermode drivers, because of the potential DMA attacks \u2013 i.e. a driver can setup a DMA write-transaction to overwrite some part of the micro kernel memory, thus owning the system completely. But I guess we will all have processors supporting IOMMU within the next 1-2 years.Just two days ago I delivered another keynote presentation, this time at the InfoSecurity conference in Honk Kong, organized by Computer World. My speech was about Human Factor vs. technology and basically the message I tried to pass was that the technology is just as flawed as the so called human factor, understood here as an user\'s unawareness and administrator\'s incompetence. I guess this is something perfectly obvious for most of technical security people, who at least once wrote an exploit by themselves. But apparently not for the security management stuff... So, even though it was by far the least technical speech I have every gave in my life, it was received as way too technical for many attendees (who were like OMG, that was a shock!). And I didn\'t even mention any specific research I\'ve done \u2013 just some standard stuff about exploits etc...I also took part in a discussion panel with several C-level executives, some of them being CIOs for some huge institutions, others being C-level marketing guys from several security vendors.So, I must say I was really struck by the complete lack of understanding of even the basic technical concepts behind IT security shown by some of the management people who were there. I understand, of course, that typical CIO or CSO doesn\'t need to know much about technical details about how exploits and malware work, but their naivety was really shocking!Speaking of conferences, I own apologizes to the organizers of Confidence 2007 conference in Krakow, Poland. After spending several days in the Netherlands, experiencing their  rainy weather and also because of the shortage of sleep in the recent weeks due to some traveling (especially lack of my afternoon naps), I got sick and couldn\'t make it to the conference. I heard it was very good this year, featuring many international speakers and, of course, Krakow, which is one of the nicest cities in Poland.Finally, I would like to explain a little confusion around our Black Hat training. Shortly after we announced the training, there appeared some press articles which incorrectly described the kernel attacks that we\'re going to present in Vegas. In the original blog post I said that these attacks work on the fly and do not require system reboot and are not afraid of the TPM/Bitlocker protection, but some people understood that we were going to actually present ways to defeat Bitlocker Drive Encryption (BDE). This is quite a misunderstanding, because those attacks, which allow for inserting unsigned code into Vista x64 kernel, are not afraid of TPM/Bitlocker simply because they can be executed on the fly and thus do not require system reboot, while Bitlocker\'s task is to secure the boot process, but not to prevent the kernel against compromises!However I intentionally mentioned TPM and Bitlocker, just to stress that those technologies have simply nothing to do with stopping rootkits and kernel compromises, provided you\'re using kernel attacks which do not require system reboot, even though they\'re often advertised as if they had\u2026 So, basically, even if we could break the BDE, it still wouldn\'t give us any benefit these days. The situation will change within 2-3 years or so, i.e. when Microsoft will eventually come up with their own hypervisor, but that\'s a different story...', 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Invisible Things Lab, Bitlocker/TPM bypassing and some conference thoughts', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2007/05/invisible-things-lab-bitlockertpm.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2007-05-18T13:57:00.001+02:00', u'thr_total': u'5', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-1481677447138628382'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=6, tm_sec=37, tm_wday=2, tm_yday=84, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/7539069698433794020/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=7539069698433794020', 'type': u'text/html', 'rel': u'replies', 'title': u'18 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7539069698433794020', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/7539069698433794020', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2007/04/understanding-stealth-malware.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Understanding Stealth Malware'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-7539069698433794020', 'published_parsed': time.struct_time(tm_year=2007, tm_mon=4, tm_mday=20, tm_hour=13, tm_min=18, tm_sec=0, tm_wday=4, tm_yday=110, tm_isdst=0), 'title': u'Understanding Stealth Malware', 'pred': 'announcements', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u'Ever wondered whether Blue Pill really works or was just a PR stunt? Ever wanted to see how practical are various timing attacks against it? (And can even those unpractical be cheated?) Or how many Blue Pills inside each other can you run and still be able to play your favorite 3D game smoothly? Or how deep Alex can hook into Windows NDIS to bypass your personal firewall? Do you want to see Patch Guard from a bird\'s eye view perspective? Or do you simply want to find out how well the latest Vista x64 kernel is protected? Ever wondered how rootkits like Deepdoor and Firewalk really worked? You can\'t sleep, because you\'re thinking constantly about how Blue Pill-like malware can be prevented? Does Northbridge hacking sound sexy to you? :)At the very end of July, during the Black Hat Briefings in Las Vegas, Alex Tereshkin and I will be running a training Understanding Stealth Malware, where you should be able to find answers to the above questions plus many more. The training will feature many previously unpublished techniques, implementation details, and of course lots of brand new code, developed especially for the training. The code will include sample rootkits similar to Deepdoor, Firewalk, Blue Pill and Delusion (but redesigned and rewritten from scratch) as well as some more exotic things, like e.g. anti-hardware-forensic attacks.As the training will be focused on Windows platform and Vista x64 specifically, we will also present some new kernel attacks against latest Vista x64 builds. These attacks, of course, work on the fly and do not require system reboot and are not afraid of the TPM/Bitlocker protection. (Although they could also be used to bypass Vista DRM protection, this subject will not be discussed during the training).Attendees will mostly work with kernel debuggers in order to analyze and understand various techniques used in system compromises. The main goal of the training is to help students understand contemporary malware techniques, enable them to see the bigger picture over technical details and show possible approaches to compromise detection. Thus the course is primarily targeted for developers of security products, forensic investigators, pen-testers and OS developers. It\'s recommended that attendees have a basic knowledge of OS design and implementation (specifically Windows), C programming, at least basic experience with debugging and ability to understand fragments of assembler code (IA32 architecture).For ethical reasons we want to limit the availability of this course to only "legitimate" companies, thus we require that you specify your official business email address and company\'s website when registering for the course. Pre-configured workstations will be provided, so there is no need to prepare for the course in any specific way. You can find more information and register for the training on the blackhat website. Please note that there will be only 2 public classes of this training this year \u2013 both during the Black Hat Briefings (28/29 and 30/31 of July). More classes will be available only in the form of on-site trainings for corporate customers. Please also note that the number of seats is hard-limited by the number of available workstations, so we encourage registering early.As for the other news \u2013 I have just quit COSEINC last week and I\'m in the process of establishing a new security consulting and research company. For now I can only betray the name: Invisible Things Lab - expect more details to be posted here in the coming weeks :)', 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Understanding Stealth Malware', 'language': None}, 'updated': u'2009-03-25T16:06:37.816+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'link': u'http://theinvisiblethings.blogspot.com/2007/04/understanding-stealth-malware.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://1.bp.blogspot.com/_Ti3q3Hdvels/Rii9-r9A9MI/AAAAAAAAABc/GYvliLAxxhg/s72-c/matrixdojo6006ad.gif', 'width': u'72', 'height': u'72'}], 'summary': u'<img alt="" border="0" id="BLOGGER_PHOTO_ID_5055499466371560642" src="http://1.bp.blogspot.com/_Ti3q3Hdvels/Rii9-r9A9MI/AAAAAAAAABc/GYvliLAxxhg/s400/matrixdojo6006ad.gif" style="display: block; margin: 0px auto 10px; text-align: center;" /><br /><br />Ever wondered whether Blue Pill really works or was just a PR stunt? Ever wanted to see how practical are various timing attacks against it? (And can even those \u201cunpractical\u201d be cheated?) Or how many Blue Pills inside each other can you run and still be able to play your favorite 3D game smoothly? Or how deep Alex can hook into Windows NDIS to bypass your personal firewall? Do you want to see Patch Guard from a \u201cbird\u2019s eye view\u201d perspective? Or do you simply want to find out how well the latest Vista x64 kernel is protected? Ever wondered how rootkits like Deepdoor and Firewalk really worked? You can\u2019t sleep, because you\u2019re thinking constantly about how Blue Pill-like malware can be prevented? Does Northbridge hacking sound sexy to you? :)<br /><br />At the very end of July, during the Black Hat Briefings in Las Vegas, Alex Tereshkin and I will be running a training \u201cUnderstanding Stealth Malware\u201d, where you should be able to find answers to the above questions plus many more. <br /><br />The training will feature many previously unpublished techniques, implementation details, and of course lots of brand new code, developed especially for the training. The code will include sample rootkits similar to Deepdoor, Firewalk, Blue Pill and Delusion (but redesigned and rewritten from scratch) as well as some more exotic things, like e.g. anti-hardware-forensic attacks.<br /><br />As the training will be focused on Windows platform and Vista x64 specifically, we will also present some new kernel attacks against latest Vista x64 builds. These attacks, of course, work on the fly and do not require system reboot and are not afraid of the TPM/Bitlocker protection. (Although they could also be used to bypass Vista DRM protection, this subject will not be discussed during the training).<br /><br />Attendees will mostly work with kernel debuggers in order to analyze and understand various techniques used in system compromises. The main goal of the training is to help students understand contemporary malware techniques, enable them to see the \u201cbigger picture\u201d over technical details and show possible approaches to compromise detection. <br /><br />Thus the course is primarily targeted for developers of security products, forensic investigators, pen-testers and OS developers. It\u2019s recommended that attendees have a basic knowledge of OS design and implementation (specifically Windows), C programming, at least basic experience with debugging and ability to understand fragments of assembler code (IA32 architecture).<br /><br />For ethical reasons we want to limit the availability of this course to only "legitimate" companies, thus we require that you specify your official business email address and company\'s website when registering for the course. <br /><br />Pre-configured workstations will be provided, so there is no need to prepare for the course in any specific way. You can find more information and register for the training on the <a href="http://blackhat.com/html/bh-usa-07/train-bh-us-07-jrk.html">blackhat website</a>. <span style="font-weight: bold;">Please note that there will be only 2 public classes of this training this year</span> \u2013 both during the Black Hat Briefings (28/29 and 30/31 of July). More classes will be available only in the form of on-site trainings for corporate customers. <br /><br />Please also note that the number of seats is hard-limited by the number of available workstations, so we encourage registering early.<br /><br />As for the other news \u2013 I have just quit COSEINC last week and I\u2019m in the process of establishing a new security consulting and research company. For now I can only betray the name: Invisible Things Lab - expect more details to be posted here in the coming weeks :)', 'guidislink': True, 'published': u'2007-04-20T15:18:00.001+02:00', u'thr_total': u'18'}
{'cprob': 1.0, 'updated': u'2009-03-25T16:06:50.038+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'security', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=6, tm_sec=50, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2007, tm_mon=4, tm_mday=1, tm_hour=12, tm_min=10, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=0), 'title': u'The Human Factor', 'pred': 'security', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/4456022256785429816/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=4456022256785429816', 'type': u'text/html', 'rel': u'replies', 'title': u'15 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/4456022256785429816', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/4456022256785429816', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2007/04/human-factor.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'The Human Factor'}], 'summary': u'When you go to some security conferences, especially those targeted for management staff, you might get the impression that the only problem in the security field that mankind is facing today is\u2026 that we\u2019re too stupid and we do not know how to use the technology properly. So, we, use those silly simple passwords, allow strangers to look at our laptop screens over our shoulders, happily provide our e-bank credentials or credit card numbers to whoever asks for them, etc\u2026  Sure, that\u2019s true indeed \u2013 many people (both administrators and users) do silly mistakes and this is very bad and, of course, they should be trained not to do them. <br /><br />However, we also face another problem these days\u2026 A problem of no less importance then \u201cthe human factor\u201d. Namely, even if we were perfectly trained to use the technology and understood it very well, we would still be defenseless in many areas. Just because the technology is flawed!<br /><br />Think about all those exploitable bugs in WiFi drivers in your laptop or email clients vulnerabilities (e.g. in your GPG/PGP software). The point is, you, as a user can not do anything to prevent exploitation of such bugs. And, of course, the worst thing is, that you don\u2019t even have any reliable way to tell whether somebody actually successfully attacked you or not \u2013 see my <a href="http://theinvisiblethings.blogspot.com/2007/03/game-is-over.html">previous post</a>. None of the so called \u201cindustry best practices\u201d can help \u2013 you just need to hope that your system hasn\u2019t been 0wned. And this is really disturbing\u2026 <br /><br />Of course, you can chose to believe in all this risk assessment pseudo-science, which can tell you that your system is \u201cnon-compromised with 98% probability\u201d or you can try to comfort yourself because you know that your competition has no better security they you\u2026 ;)', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u"When you go to some security conferences, especially those targeted for management staff, you might get the impression that the only problem in the security field that mankind is facing today is\u2026 that we're too stupid and we do not know how to use the technology properly. So, we, use those silly simple passwords, allow strangers to look at our laptop screens over our shoulders, happily provide our e-bank credentials or credit card numbers to whoever asks for them, etc\u2026  Sure, that's true indeed \u2013 many people (both administrators and users) do silly mistakes and this is very bad and, of course, they should be trained not to do them. However, we also face another problem these days\u2026 A problem of no less importance then the human factor. Namely, even if we were perfectly trained to use the technology and understood it very well, we would still be defenseless in many areas. Just because the technology is flawed!Think about all those exploitable bugs in WiFi drivers in your laptop or email clients vulnerabilities (e.g. in your GPG/PGP software). The point is, you, as a user can not do anything to prevent exploitation of such bugs. And, of course, the worst thing is, that you don't even have any reliable way to tell whether somebody actually successfully attacked you or not \u2013 see my previous post. None of the so called industry best practices can help \u2013 you just need to hope that your system hasn't been 0wned. And this is really disturbing\u2026 Of course, you can chose to believe in all this risk assessment pseudo-science, which can tell you that your system is non-compromised with 98% probability or you can try to comfort yourself because you know that your competition has no better security they you\u2026 ;)", 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'The Human Factor', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2007/04/human-factor.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2007-04-01T14:10:00.001+02:00', u'thr_total': u'15', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-4456022256785429816'}
{'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=6, tm_sec=59, tm_wday=2, tm_yday=84, tm_isdst=0), 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/6658513522828638474/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=6658513522828638474', 'type': u'text/html', 'rel': u'replies', 'title': u'14 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6658513522828638474', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/6658513522828638474', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2007/03/game-is-over.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'The Game Is Over!'}], 'href': u'', 'id': u'tag:blogger.com,1999:blog-24586388.post-6658513522828638474', 'published_parsed': time.struct_time(tm_year=2007, tm_mon=3, tm_mday=26, tm_hour=8, tm_min=57, tm_sec=0, tm_wday=0, tm_yday=85, tm_isdst=0), 'title': u'The Game Is Over!', 'pred': 'security', 'cprob': 1.0, 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u"People often say that once an attacker gets access to the kernel the game is over! That's true indeed these days, and most of the research I have done over the past two years or so, was about proofing just that. Some people, however, go a bit further and say, that thus there is no point in researching ways to detect system compromises and, once an attacker got in, you should simply assume everything has been compromised and replace all the components, i.e. buy new machine (as the attacker might have modified the BIOS or re-flashed PCI EEPROMs), reinstall OS, all applications, etc.However, they miss one little detail \u2013 how can they actually know that the attacker got access to the system and that the game is over indeed and we need to reinstall just now?Well, we simply assume that the attacker had to make some mistake and that we, sooner or later, will find out. But what if she didn't make a mistake?There are several trends of how this problem should be addressed in a more general and elegant way though. Most of them are based on a proactive approach. Let's have a quick look at them\u2026One generic solution is to build in a prevention technology into the OS. That includes all the anti-exploitation mechanisms, like e.g. ASLR, Non Executable memory, Stack Guard/GS, and others, as well as some little design changes into OS, like e.g. implementation of least-privilege principle (think e.g. UAC in Vista) and some sort of kernel protection (e.g. securelevel in BSD, grsecurity on Linux, signed drivers in Vista, etc).This has been undoubtedly the most popular approach for the last couple of years and recently it gets even more popular, as Microsoft implemented most of those techniques in Vista.However, everybody who follows the security research for at least several years should know that all those clever mechanisms have all been bypassed at least once in their history. That includes attacks against Stack Guard protection presented back in 2000 by Bulba and Kil3r, several ways to bypass PaX ASLR, like those described by Nergal in 2001 and by others several months later as well as exploiting the privilege elevation bug in PaX discovered by its author in 2005. Also the Microsoft's Hardware DEP (AKA NX) has been demonstrated to be bypassable by skape and Skywing in 2005.Similarly, kernel protection mechanisms have also been bypassed over the past years, starting e.g. with this nice attack against grsecurity /dev/(k)mem protection presented by Guillaume Pelat in 2002. In 2006 Loic Duflot demonstrated that BSD's famous securelevel mechanism can also be bypassed. And, also last year, I showed that Vista x64 kernel protection is not foolproof either.The point is \u2013 all those hardening techniques are designed to make exploitation harder or to limit the damage after a successful exploitation, but not to be 100% foolproof. On the other hand, it must be said, that they probably represent the best prevention solutions available for us these days.Another approach is to dramatically redesign the whole OS in such a way that all components (like e.g. drivers and serves) are compartmentalized, e.g. run as separate processes in usermode, and consequently are isolated not only from each other but also from the OS kernel (micro kernel). The idea here is that the most critical components, i.e. the micro kernel, is very small and can be easily verified. Example of such OS is Minix3 which is still under development though.Undoubtedly this is a very good approach to minimize impact from system or driver faults, but does not protect us against malicious system compromises. After all if an attacker exploits a bug in a web browser, she may only be interested in modifying the browser's code. Sure, she probably would not be able to get access to the micro kernel, but why would she really need it?Imagine, for example, the following common scenario: many online banking systems require users to use smart cards to sign all transaction requests (e.g. money transfers). This usually works by having a browser (more specifically an ActiveX control or Firefox's plugin) to display a message to a user that he or she is about to make e.g. a wire transfer to a given account number for a given amount of money. If the user confirms that action, they should press an \u2018Accept' button, which instructs browser to send the message to the smart card for signing. The message itself is usually just some kind of formatted text message specifying the source and destination account numbers, amount of money, date and time stamp etc. Then the user is asked to insert the smart card, which contains his or her private key (issued by the bank) and to also enter the PIN code. The latter can be done either by using the same browser applet or, in slightly more secure implementations, by the smart card reader itself, if it has a pad for entering PINs.Obviously the point here is that malware should not be able to forge the digital signature and only the legitimate user has access to the smart card and also knows the card's PIN, so nobody else will be able to sign that message with the user's key.However, it's just enough for the attacker to replace the message while it's being send to the card, while displaying the original message in the browser's window. This all can be done by just modifying (hooking) the browser's in-memory code and/or data. No need for kernel malware, yet the system (the browser more specifically) is compromised!Still, one good thing about such a system design is that if we don't allow an attacker to compromise the microkernel, then, at least in theory, we can write a detector capable of finding that some (malicious) changes to the browsers memory have been introduced indeed. However, in practice, we would have to know how exactly the browser's memory should look like, e.g. which function pointers in Firefox's code should be verified in order to find out whether such a compromise has indeed occurred. Unfortunately we can not do that today.Alternative approach to the above two, which does not require any dramatic changes into OS, is to make use of so called sound static code analyzers to verify all sensitive code in OS and applications. The soundness property assures that the analyzer has been mathematically proven not to miss even a single potential run time error, which includes e.g. unintentional execution flow modifications. The catch here is that soundness doesn't mean that the analyzer doesn't generate false positives. It's actually mathematically proven that we can't have such an ideal tool (i.e. with zero false positive rate), as the problem of analyzing all possible program execution paths is incomputable. Thus, the practical analyzers always consider some superset of all possible execution flows, which is easy to compute, yet may introduce some false alarms and the whole trick is how to choose that superset so that the number of false positives is minimal.ASTREE is an example of a sound static code analyzer for the C language (although it doesn't support programs which make use of dynamic memory allocation) and it apparently has been used to verify the primary flight control software for Airbus A340 and A380. Unfortunately, there doesn't seem to be any publicly available sound binary code static analyzers\u2026 (if anybody knows any links, you're more then welcome to paste the links under this post \u2013 just please make sure you're referring to sound analyzers).If we had such sound and precise (i.e. with minimal rate of false alarms) binary static code analyzer that could be a big breakthrough in the OS and application security.We could imagine, for example, a special authority for signing device drivers for various OSes and that they would first perform such a formal static validation on submitted drivers and, once passed the test, the drivers would be digitally signed. Plus, the OS kernel itself would be validated itself by the vendor and would accept only those drivers which were signed by the driver verification authority. The authority could be an OS vendor itself or a separate 3rd party organization. Additionally we could also require that the code of all security critical applications, like e.g. web browser be also signed by such an authority and set a special policy in our OS to allow e.g. only signed applications to access network.The only one week point here is, that if the private key used by the certification authority gets compromised, then the game is over and nobody really knows that\u2026 For this reason it would be good, to have more then one certification authority and require that each driver/application be signed by at least two independent authorities.From the above three approaches only the last one can guarantee that our system will not get compromised ever. The only problem here is that\u2026 there are no tools today for static binary code analysis that would be proved to be sound and also precise enough to be used in practice\u2026So, today, as far as proactive solutions are considered, we're left only with solutions #1 and #2, which, as discussed above, can not protect OS and applications from compromises in 100%. And, to make it worse, do not offer any clue, whether the compromise actually occurred.That's why I'm trying so much to promote the idea of Verifiable Operating Systems, which should allow to at least find out (in a systematic way) whether the system in question has been compromised or not (but, unfortunately not to find whether the single-shot incident occurred). The point is that the number of required design changes should be fairly small. There are some problems with it too, like e.g. verifying JIT-like code, but hopefully they can be solved in the near feature. Expect me to write more on this topic in the near feature.Special thanks to Halvar Flake for eye-opening discussions about sound code analyzers and OS security in general.", 'language': None}], 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'The Game Is Over!', 'language': None}, 'updated': u'2009-03-25T16:06:59.977+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'link': u'http://theinvisiblethings.blogspot.com/2007/03/game-is-over.html', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'actual': 'security', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'media_thumbnail': [{'url': u'http://4.bp.blogspot.com/_Ti3q3Hdvels/Rgfep4q7IGI/AAAAAAAAABQ/B0UGxc6ITz4/s72-c/gameover.png', 'width': u'72', 'height': u'72'}], 'summary': u'People often say that once an attacker gets access to the kernel the game is over! That\u2019s true indeed these days, and most of the research I have done over the past two years or so, was about proofing just that. Some people, however, go a bit further and say, that thus there is no point in researching ways to detect system compromises and, once an attacker got in, you should simply assume everything has been compromised and replace all the components, i.e. buy new machine (as the attacker might have <a href="http://www.blackhat.com/html/bh-federal-06/bh-fed-06-speakers.html#Heasman">modified the BIOS</a> or re-flashed <a href="http://www.blackhat.com/html/bh-dc-07/bh-dc-07-speakers.html#Heasman">PCI EEPROMs</a>), reinstall OS, all applications, etc.<br /><br /><img alt="" border="0" id="BLOGGER_PHOTO_ID_5046246718660354146" src="http://4.bp.blogspot.com/_Ti3q3Hdvels/Rgfep4q7IGI/AAAAAAAAABQ/B0UGxc6ITz4/s400/gameover.png" style="margin: 0px auto 10px; display: block; text-align: center;" /><br /><br />However, they miss one little detail \u2013 how can they actually know that the attacker got access to the system and that the game is over indeed and we need to reinstall just now?<br /><br />Well, we simply assume that the attacker <span style="font-weight: bold;">had to</span> make some mistake and that we, sooner or later, will find out. But what if she didn\u2019t make a mistake?<br /><br />There are several trends of how this problem should be addressed in a more general and elegant way though. Most of them are based on a proactive approach. Let\u2019s have a quick look at them\u2026<br /><ol><li>One generic solution is to build in a prevention technology into the OS. That includes all the anti-exploitation mechanisms, like e.g. ASLR, Non Executable memory, Stack Guard/GS, and others, as well as some little design changes into OS, like e.g. implementation of least-privilege principle (think e.g. UAC in Vista) and some sort of kernel protection (e.g. securelevel in BSD, grsecurity on Linux, signed drivers in Vista, etc).<br /><br />This has been undoubtedly the most popular approach for the last couple of years and recently it gets even more popular, as Microsoft implemented most of those techniques in Vista.<br /><br />However, everybody who follows the security research for at least several years should know that all those clever mechanisms have all been bypassed at least once in their history. That includes attacks against Stack Guard protection presented back in 2000 by <a href="http://phrack.org/archives/56/p56-0x05">Bulba and Kil3r</a>, several ways to bypass PaX ASLR, like those described by <a href="http://phrack.org/archives/58/p58-0x04">Nergal in 2001</a> and <a href="http://phrack.org/archives/59/p59-0x09.txt">by others several months later</a> as well as exploiting <a href="http://lists.immunitysec.com/pipermail/dailydave/2005-March/001619.html">the privilege elevation bug in PaX</a> discovered by its author in 2005. Also the Microsoft\'s Hardware DEP (AKA NX) has been demonstrated <a href="http://uninformed.org/?v=2&amp;a=4&amp;t=sumry">to be bypassable</a> by skape and Skywing in 2005.<br /><br />Similarly, kernel protection mechanisms have also been bypassed over the past years, starting e.g. with <a href="http://archives.neohapsis.com/archives/bugtraq/2002-05/0145.html">this nice attack against grsecurity /dev/(k)mem protection</a> presented by Guillaume Pelat in 2002. In 2006 Loic Duflot demonstrated that BSD\'s famous <a href="http://www.ssi.gouv.fr/fr/sciences/fichiers/lti/cansecwest2006-duflot-paper.pdf">securelevel mechanism can also be bypassed</a>. And, also last year, I showed that <a href="http://www.blackhat.com/html/bh-usa-06/bh-usa-06-speakers.html#Rutkowska">Vista x64 kernel protection is not foolproof either</a>.<br /><br />The point is \u2013 all those hardening techniques are designed to make exploitation <span style="font-style: italic;">harder</span> or to <span style="font-style: italic;">limit </span>the damage after a successful exploitation, but not to be 100% foolproof. On the other hand, it must be said, that they probably represent the best prevention solutions available for us these days.</li><br /><li>Another approach is to dramatically redesign the whole OS in such a way that all components (like e.g. drivers and serves) are compartmentalized, e.g. run as separate processes in usermode, and consequently are isolated not only from each other but also from the OS kernel (micro kernel). The idea here is that the most critical components, i.e. the micro kernel, is very small and can be easily verified. Example of such OS is <a href="http://www.minix3.org/">Minix3</a> which is still under development though.<br /><br />Undoubtedly this is a very good approach to minimize impact from system or driver faults, but does not protect us against malicious system compromises. After all if an attacker exploits a bug in a web browser, she may only be interested in modifying the browser\u2019s code. Sure, she probably would not be able to get access to the micro kernel, but why would she really need it?<br /><br /><span style="font-size: 85%;">Imagine, for example, the following common scenario: many online banking systems require users to use smart cards to sign all transaction requests (e.g. money transfers). This usually works by having a browser (more specifically an ActiveX control or Firefox\u2019s plugin) to display a message to a user that he or she is about to make e.g. a wire transfer to a given account number for a given amount of money. If the user confirms that action, they should press an \u2018Accept\u2019 button, which instructs browser to send the message to the smart card for signing. The message itself is usually just some kind of formatted text message specifying the source and destination account numbers, amount of money, date and time stamp etc. Then the user is asked to insert the smart card, which contains his or her private key (issued by the bank) and to also enter the PIN code. The latter can be done either by using the same browser applet or, in slightly more secure implementations, by the smart card reader itself, if it has a pad for entering PINs.<br /><br />Obviously the point here is that malware should not be able to forge the digital signature and only the legitimate user has access to the smart card and also knows the card\u2019s PIN, so nobody else will be able to sign that message with the user\u2019s key.<br /><br />However, it\u2019s just enough for the attacker to replace the message while it\u2019s being send to the card, while displaying the original message in the browser\u2019s window. This all can be done by just modifying (\u201chooking\u201d) the browser\u2019s in-memory code and/or data. No need for kernel malware, yet the system (the browser more specifically) is compromised!</span><br /><br />Still, one good thing about such a system design is that if we don\u2019t allow an attacker to compromise the microkernel, then, at least in theory, we can write a detector capable of finding that some (malicious) changes to the browsers memory have been introduced indeed. However, in practice, we would have to know how exactly the browser\u2019s memory should look like, e.g. which function pointers in Firefox\u2019s code should be verified in order to find out whether such a compromise has indeed occurred. Unfortunately we can not do that today.</li><br /><li>Alternative approach to the above two, which does not require any dramatic changes into OS, is to make use of so called <span style="font-style: italic;">sound </span>static code analyzers to verify all sensitive code in OS and applications. The <span style="font-style: italic;">soundness </span>property assures that the analyzer has been mathematically proven not to miss even a single potential run time error, which includes e.g. unintentional execution flow modifications. The catch here is that soundness doesn\u2019t mean that the analyzer doesn\u2019t generate false positives. It\u2019s actually mathematically proven that we can\u2019t have such an ideal tool (i.e. with zero false positive rate), as the problem of analyzing all possible program execution paths is incomputable. Thus, the practical analyzers always consider some superset of all possible execution flows, which is easy to compute, yet may introduce some false alarms and the whole trick is how to choose that superset so that the number of false positives is minimal.<br /><br /><a href="http://www.astree.ens.fr/">ASTREE</a> is an example of a sound static code analyzer for the C language (although it doesn\u2019t support programs which make use of dynamic memory allocation) and it apparently has been used to verify the primary flight control software for Airbus A340 and A380. Unfortunately, there doesn\u2019t seem to be any publicly available sound binary code static analyzers\u2026 (if anybody knows any links, you\u2019re more then welcome to paste the links under this post \u2013 just please make sure you\u2019re referring to sound analyzers).<br /><br />If we had such sound and precise (i.e. with minimal rate of false alarms) binary static code analyzer that could be a big breakthrough in the OS and application security.<br /><br />We could imagine, for example, a special authority for signing device drivers for various OSes and that they would first perform such a formal static validation on submitted drivers and, once passed the test, the drivers would be digitally signed. Plus, the OS kernel itself would be validated itself by the vendor and would accept only those drivers which were signed by the driver verification authority. The authority could be an OS vendor itself or a separate 3rd party organization. Additionally we could also require that the code of all security critical applications, like e.g. web browser be also signed by such an authority and set a special policy in our OS to allow e.g. only signed applications to access network.<br /><br />The only one week point here is, that if the private key used by the certification authority gets compromised, then the game is over and nobody really knows that\u2026 For this reason it would be good, to have more then one certification authority and require that each driver/application be signed by at least two independent authorities.</li></ol><br />From the above three approaches only the last one can guarantee that our system will not get compromised ever. The only problem here is that\u2026 there are no tools today for static binary code analysis that would be proved to be sound and also precise enough to be used in practice\u2026<br /><br />So, today, as far as proactive solutions are considered, we\u2019re left only with solutions #1 and #2, which, as discussed above, can not protect OS and applications from compromises in 100%. And, to make it worse, do not offer any clue, whether the compromise actually occurred.<br /><br />That\u2019s why I\u2019m trying so much to promote the idea of <a href="http://theinvisiblethings.blogspot.com/2007/01/towards-verifiable-operating-systems.html">Verifiable Operating Systems</a>, which should allow to at least find out (in a systematic way) whether the system in question has been compromised or not (but, unfortunately not to find whether the single-shot incident occurred). The point is that the number of required design changes should be fairly small. There are some problems with it too, like e.g. verifying JIT-like code, but hopefully they can be solved in the near feature. Expect me to write more on this topic in the near feature.<br /><br />Special thanks to Halvar Flake for eye-opening discussions about sound code analyzers and OS security in general.', 'guidislink': True, 'published': u'2007-03-26T10:57:00.001+02:00', u'thr_total': u'14'}
{'cprob': 1.0, 'updated': u'2009-03-25T16:07:15.128+01:00', u'gd_image': {'src': u'http://3.bp.blogspot.com/-lBJ9wnE4-ns/U99u3kPby0I/AAAAAAAAAOE/DVdgeZa8LQ0/s1600/*', 'height': u'32', 'rel': u'http://schemas.google.com/g/2005#thumbnail', 'width': u'21'}, 'actual': 'os', 'updated_parsed': time.struct_time(tm_year=2009, tm_mon=3, tm_mday=25, tm_hour=15, tm_min=7, tm_sec=15, tm_wday=2, tm_yday=84, tm_isdst=0), 'published_parsed': time.struct_time(tm_year=2007, tm_mon=3, tm_mday=5, tm_hour=17, tm_min=53, tm_sec=0, tm_wday=0, tm_yday=64, tm_isdst=0), 'title': u'Handy Tool To Play with Windows Integrity Levels', 'pred': 'announcements', 'authors': [{'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}], 'links': [{'href': u'http://theinvisiblethings.blogspot.com/feeds/1586021214114399750/comments/default', 'type': u'application/atom+xml', 'rel': u'replies', 'title': u'Post Comments'}, {'href': u'https://www.blogger.com/comment.g?blogID=24586388&postID=1586021214114399750', 'type': u'text/html', 'rel': u'replies', 'title': u'4 Comments'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1586021214114399750', 'type': u'application/atom+xml', 'rel': u'edit'}, {'href': u'https://www.blogger.com/feeds/24586388/posts/default/1586021214114399750', 'type': u'application/atom+xml', 'rel': u'self'}, {'href': u'http://theinvisiblethings.blogspot.com/2007/03/handy-tool-to-play-with-windows.html', 'type': u'text/html', 'rel': u'alternate', 'title': u'Handy Tool To Play with Windows Integrity Levels'}], 'summary': u'<a href="http://www.minasi.com/">Mark Minasi</a> wrote to me recently to point out that his new tool, <a href="http://www.minasi.com/vista/chml.htm">chml</a>, is capable of setting NoReadUp and NoExecuteUp policy on file objects, in addition to the standard NoWriteUp policy, which is used by default on Vista.<br /><br />As I wrote <a href="http://theinvisiblethings.blogspot.com/2007/02/running-vista-every-day.html">before </a> the default IL policy used on Vista assumes only the NoWriteUp policy. That means that all objects which do not have assigned any IL explicitly (and consequently are treated as if they were marked with Medium IL) can be read by low integrity processes (only writes are prevented). Also, the standard Windows <span style="font-family: courier new;">icacls </span>command, which allows to set IL for file objects, assumes always the NoWriteUp policy only (unless I\u2019m missing some secret switch).<br /><br />However, it\u2019s possible, for each object, to define not only the integrity level but also the policy which will be used to access it. All this information is stored in the same SACE which also defines the IL.<br /><br />There doesn\u2019t seem to be too much documentation from Microsoft about how to set those permissions, except <a href="http://msdn.microsoft.com/library/en-us/ietechcol/dnwebgen/protectedmode.asp?frame=true#dse_lores">this paper about Protected Mode IE</a> and the <span style="font-family: courier new;">sddl.h</span> file itself.<br /><br />Anyway, it\u2019s good to see a tool like <span style="font-family: courier new;">chml<span style="font-family: times new roman;"> </span></span>as it allows to do some cool things in a very simple way. E.g. consider that you have some secret documents in the folder <span style="font-family: courier new;">c:\\secretes</span> and that you don\u2019t feel like sharing those files with anybody who can exploit your Protected Mode IE. As I pointed out in my previous article, by default all your personal files are accessible to your Protected Mode IE low integrity process, so in the event of successful exploitation the attacker is free to steal them all. However now, using Mark Minasi\u2019s tool, you can just do this:<br /><pre>chml.exe c:\\secrets -i:m -nr -nx<br /></pre>This should prevent all the low IL processes, like e.g. Protected Mode IE, from reading the contents of your secret directory.<br /><br />BTW, you can use <span style="font-family: courier new;">chml</span> to also examine the SACE which was created:<br /><pre>chml.exe c:\\secrets -showsddl<br /></pre>and you should get something like that as a result:<br /><pre>SDDL string for c:\\secrets\'s integrity label=S:(ML;OICI;NRNX;;;ME)<br /></pre>Where S means that it\u2019s an SACE (in contrast to e.g. DACE), ML says that this ACE defines mandatory label, OICI means \u201cObject Inherit\u201d and \u201cContainer Inherit\u201d, NRNX defines that to access this object the NoReadUp and NoExecuteUp policies should be used (which also implies the NoWriteUp BTW) and finally the ME stands for Medium Integrity Level.<br /><br />All credits go to Mark Minasi and the Windows IL team :)<br /><br />As a side note: the updated slides for my recent Black Hat DC talk about cheating hardware based memory acquisition can be found <a href="http://invisiblethings.org/papers/cheating-hardware-memory-acquisition-updated.ppt">here</a>. You can also get the demo movies <a href="http://invisiblethings.org/papers/DMA-cheating-demo-bh-fed07.rar">here</a>.', 'content': [{'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/html', 'value': u"Mark Minasi wrote to me recently to point out that his new tool, chml, is capable of setting NoReadUp and NoExecuteUp policy on file objects, in addition to the standard NoWriteUp policy, which is used by default on Vista.As I wrote before  the default IL policy used on Vista assumes only the NoWriteUp policy. That means that all objects which do not have assigned any IL explicitly (and consequently are treated as if they were marked with Medium IL) can be read by low integrity processes (only writes are prevented). Also, the standard Windows icacls command, which allows to set IL for file objects, assumes always the NoWriteUp policy only (unless I'm missing some secret switch).However, it's possible, for each object, to define not only the integrity level but also the policy which will be used to access it. All this information is stored in the same SACE which also defines the IL.There doesn't seem to be too much documentation from Microsoft about how to set those permissions, except this paper about Protected Mode IE and the sddl.h file itself.Anyway, it's good to see a tool like chml as it allows to do some cool things in a very simple way. E.g. consider that you have some secret documents in the folder c:\\secretes and that you don't feel like sharing those files with anybody who can exploit your Protected Mode IE. As I pointed out in my previous article, by default all your personal files are accessible to your Protected Mode IE low integrity process, so in the event of successful exploitation the attacker is free to steal them all. However now, using Mark Minasi's tool, you can just do this:chml.exe c:\\secrets -i:m -nr -nxThis should prevent all the low IL processes, like e.g. Protected Mode IE, from reading the contents of your secret directory.BTW, you can use chml to also examine the SACE which was created:chml.exe c:\\secrets -showsddland you should get something like that as a result:SDDL string for c:\\secrets's integrity label=S:(ML;OICI;NRNX;;;ME)Where S means that it's an SACE (in contrast to e.g. DACE), ML says that this ACE defines mandatory label, OICI means Object Inherit and Container Inherit, NRNX defines that to access this object the NoReadUp and NoExecuteUp policies should be used (which also implies the NoWriteUp BTW) and finally the ME stands for Medium Integrity Level.All credits go to Mark Minasi and the Windows IL team :)As a side note: the updated slides for my recent Black Hat DC talk about cheating hardware based memory acquisition can be found here. You can also get the demo movies here.", 'language': None}], 'guidislink': True, 'title_detail': {'base': u'https://www.blogger.com/feeds/24586388/posts/default?alt=atom&start-index=76&max-results=25', 'type': u'text/plain', 'value': u'Handy Tool To Play with Windows Integrity Levels', 'language': None}, 'href': u'http://www.blogger.com/profile/07657268181166351141', 'link': u'http://theinvisiblethings.blogspot.com/2007/03/handy-tool-to-play-with-windows.html', 'author': u'Joanna Rutkowska (noreply@blogger.com)', 'published': u'2007-03-05T18:53:00.001+01:00', u'thr_total': u'4', 'author_detail': {'href': u'http://www.blogger.com/profile/07657268181166351141', 'name': u'Joanna Rutkowska', 'email': u'noreply@blogger.com'}, 'id': u'tag:blogger.com,1999:blog-24586388.post-1586021214114399750'}

----------------------
Precision: 0.58
Recall: 1.0
F1: 0.73417721519
